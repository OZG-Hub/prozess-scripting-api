// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.condition.section;

import java.util.stream.Stream;
import de.seitenbau.serviceportal.scripting.api.v1.form.FieldGroupInstanceV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormV1;

/**
 * Abstrakte Elternklasse für Bedingungen zum Überspringen von Elementen.
 */
public abstract class SkipConditionV1 implements Cloneable {
  /**
   * Prüft, ob die Bedingung in der gegebenen Gruppeninstanz im gegebenen Formular erfüllt
   * ist. Wenn die Bedingung erfüllt ist, wird der Abschnitt, an dem die
   * Bedingung hängt, übersprungen, sonst angezeigt.
   *
   * @param instance Feldgruppen-Instanz, in der sich das referenzierte Feld befindet, nicht {@code null}.
   * @param form das Formular, innerhalb dessen die Bedingung geprüft werden soll, nicht {@code null}.
   *
   * @return {@code true}, wenn die Bedingung erfüllt ist, sonst {@code false}
   */
  public abstract boolean isSkipped(FieldGroupInstanceV1 instance, FormV1 form);

  @Override
  public SkipConditionV1 clone() {
    try {
      return (SkipConditionV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Gibt alle enthaltenen {@link ReferencedFieldSkipConditionV1}-Bedingungen zurück.
   *
   * @param condition die Bedingung, deren {@link ReferencedFieldSkipConditionV1}-Bedingungen
   * extrahiert werden soll.
   *
   * @return einen Stream mit den enthaltenen {@link ReferencedFieldSkipConditionV1}-Bedingungen,
   * niemals {@code null}.
   */
  public static Stream<ReferencedFieldSkipConditionV1> identifyFieldDisplayConditions(SkipConditionV1 condition) {
    if (condition instanceof ReferencedFieldSkipConditionV1) {
      return Stream.of((ReferencedFieldSkipConditionV1) condition);
    }
    return Stream.of();
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class SkipConditionV1Builder<C extends SkipConditionV1, B extends SkipConditionV1.SkipConditionV1Builder<C, B>> {
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "SkipConditionV1.SkipConditionV1Builder()";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected SkipConditionV1(final SkipConditionV1.SkipConditionV1Builder<?, ?> b) {
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof SkipConditionV1)) return false;
    final SkipConditionV1 other = (SkipConditionV1) o;
    if (!other.canEqual((Object) this)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof SkipConditionV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int result = 1;
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "SkipConditionV1()";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public SkipConditionV1() {
  }
}
