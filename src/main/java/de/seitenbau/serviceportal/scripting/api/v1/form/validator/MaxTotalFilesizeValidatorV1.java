// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

/**
 * Validierungsregel, die prüft, dass die Gesamtgröße aller hochgeladenen Dateien eines Feldes nicht die
 * definierte maximale Gesamtgröße überschreiten.
 */
public class MaxTotalFilesizeValidatorV1 extends ValidationRuleV1 {
  /**
   * Maximale Gesamtgröße der Dateien (in Bytes).
   */
  private int maxTotalFilesize;


  @SuppressWarnings("all")
  public static abstract class MaxTotalFilesizeValidatorV1Builder<C extends MaxTotalFilesizeValidatorV1, B extends MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    private int maxTotalFilesize;

    /**
     * Maximale Gesamtgröße der Dateien (in Bytes).
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B maxTotalFilesize(final int maxTotalFilesize) {
      this.maxTotalFilesize = maxTotalFilesize;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1Builder(super=" + super.toString() + ", maxTotalFilesize=" + this.maxTotalFilesize + ")";
    }
  }


  @SuppressWarnings("all")
  private static final class MaxTotalFilesizeValidatorV1BuilderImpl extends MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1Builder<MaxTotalFilesizeValidatorV1, MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    private MaxTotalFilesizeValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    protected MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    public MaxTotalFilesizeValidatorV1 build() {
      return new MaxTotalFilesizeValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  protected MaxTotalFilesizeValidatorV1(final MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1Builder<?, ?> b) {
    super(b);
    this.maxTotalFilesize = b.maxTotalFilesize;
  }

  @SuppressWarnings("all")
  public static MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1Builder<?, ?> builder() {
    return new MaxTotalFilesizeValidatorV1.MaxTotalFilesizeValidatorV1BuilderImpl();
  }

  /**
   * Maximale Gesamtgröße der Dateien (in Bytes).
   */
  @SuppressWarnings("all")
  public int getMaxTotalFilesize() {
    return this.maxTotalFilesize;
  }

  /**
   * Maximale Gesamtgröße der Dateien (in Bytes).
   */
  @SuppressWarnings("all")
  public void setMaxTotalFilesize(final int maxTotalFilesize) {
    this.maxTotalFilesize = maxTotalFilesize;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "MaxTotalFilesizeValidatorV1(maxTotalFilesize=" + this.getMaxTotalFilesize() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof MaxTotalFilesizeValidatorV1)) return false;
    final MaxTotalFilesizeValidatorV1 other = (MaxTotalFilesizeValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (this.getMaxTotalFilesize() != other.getMaxTotalFilesize()) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof MaxTotalFilesizeValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getMaxTotalFilesize();
    return result;
  }
}
