// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.start;

import java.util.Date;
import java.util.Map;
import de.seitenbau.serviceportal.scripting.api.v1.ScriptingApiV1;

/**
 * Objekt, das beim Start eines Prozesses / Erzeugen einer Prozessinstanz zur Verfügung gestellt wird.
 * Für den OZG-Hub wird das Objekt in die Prozessinstanzvariable {@code startParameter} gespeichert.
 * Für amt24, service-bw und den OZG-Hub kann das Objekt über die Scripting-Api aufgerufen werden
 *
 * @see ScriptingApiV1#getStartParameter()
 */
public class StartParameterV1 {
  /**
   * Zeitpunkt an dem der Prozess gestartet wurde.
   */
  private Date startTime;
  /**
   * Informationen über den Benutzer, der den Prozess gestartet hat.
   * {@code null}, wenn der Benutzer nicht eingeloggt war.
   */
  private StartedByUserV1 startedByUser;
  /**
   * Name des Prozesses aus der BPMN-Datei.
   */
  private String processName;
  /**
   * Leistung.
   * {@code null}, wenn keine Leistung definiert wurde.
   */
  private LeistungParameterV1 leistung;
  /**
   * Organisationseinheit.
   * {@code null}, wenn keine Organisationseinheit definiert wurde.
   */
  private OrganisationseinheitParameterV1 organisationseinheit;
  /**
   * Allgemeiner Gemeindeschlüssel.
   * {@code null}, wenn der Parameter nicht beim Prozessstart definiert wurde.
   */
  private String ags;
  /**
   * Frei wählbarer Parameter.
   * {@code null}, wenn kein Parameter definiert wurde.
   */
  private String p;
  /**
   * Menge der Parameter von externen Parameter-Quellen, wie Jesaja.
   * {@code null}, wenn keine Parameter abgefragt wurden, weil Daten zum Abfragen fehlten.
   */
  private Map<String, Object> parameters;


  @SuppressWarnings("all")
  public static class StartParameterV1Builder {
    @SuppressWarnings("all")
    private Date startTime;
    @SuppressWarnings("all")
    private StartedByUserV1 startedByUser;
    @SuppressWarnings("all")
    private String processName;
    @SuppressWarnings("all")
    private LeistungParameterV1 leistung;
    @SuppressWarnings("all")
    private OrganisationseinheitParameterV1 organisationseinheit;
    @SuppressWarnings("all")
    private String ags;
    @SuppressWarnings("all")
    private String p;
    @SuppressWarnings("all")
    private Map<String, Object> parameters;

    @SuppressWarnings("all")
    StartParameterV1Builder() {
    }

    /**
     * Zeitpunkt an dem der Prozess gestartet wurde.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder startTime(final Date startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * Informationen über den Benutzer, der den Prozess gestartet hat.
     * {@code null}, wenn der Benutzer nicht eingeloggt war.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder startedByUser(final StartedByUserV1 startedByUser) {
      this.startedByUser = startedByUser;
      return this;
    }

    /**
     * Name des Prozesses aus der BPMN-Datei.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder processName(final String processName) {
      this.processName = processName;
      return this;
    }

    /**
     * Leistung.
     * {@code null}, wenn keine Leistung definiert wurde.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder leistung(final LeistungParameterV1 leistung) {
      this.leistung = leistung;
      return this;
    }

    /**
     * Organisationseinheit.
     * {@code null}, wenn keine Organisationseinheit definiert wurde.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder organisationseinheit(final OrganisationseinheitParameterV1 organisationseinheit) {
      this.organisationseinheit = organisationseinheit;
      return this;
    }

    /**
     * Allgemeiner Gemeindeschlüssel.
     * {@code null}, wenn der Parameter nicht beim Prozessstart definiert wurde.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder ags(final String ags) {
      this.ags = ags;
      return this;
    }

    /**
     * Frei wählbarer Parameter.
     * {@code null}, wenn kein Parameter definiert wurde.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder p(final String p) {
      this.p = p;
      return this;
    }

    /**
     * Menge der Parameter von externen Parameter-Quellen, wie Jesaja.
     * {@code null}, wenn keine Parameter abgefragt wurden, weil Daten zum Abfragen fehlten.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public StartParameterV1.StartParameterV1Builder parameters(final Map<String, Object> parameters) {
      this.parameters = parameters;
      return this;
    }

    @SuppressWarnings("all")
    public StartParameterV1 build() {
      return new StartParameterV1(this.startTime, this.startedByUser, this.processName, this.leistung, this.organisationseinheit, this.ags, this.p, this.parameters);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "StartParameterV1.StartParameterV1Builder(startTime=" + this.startTime + ", startedByUser=" + this.startedByUser + ", processName=" + this.processName + ", leistung=" + this.leistung + ", organisationseinheit=" + this.organisationseinheit + ", ags=" + this.ags + ", p=" + this.p + ", parameters=" + this.parameters + ")";
    }
  }

  @SuppressWarnings("all")
  public static StartParameterV1.StartParameterV1Builder builder() {
    return new StartParameterV1.StartParameterV1Builder();
  }

  /**
   * Zeitpunkt an dem der Prozess gestartet wurde.
   */
  @SuppressWarnings("all")
  public Date getStartTime() {
    return this.startTime;
  }

  /**
   * Informationen über den Benutzer, der den Prozess gestartet hat.
   * {@code null}, wenn der Benutzer nicht eingeloggt war.
   */
  @SuppressWarnings("all")
  public StartedByUserV1 getStartedByUser() {
    return this.startedByUser;
  }

  /**
   * Name des Prozesses aus der BPMN-Datei.
   */
  @SuppressWarnings("all")
  public String getProcessName() {
    return this.processName;
  }

  /**
   * Leistung.
   * {@code null}, wenn keine Leistung definiert wurde.
   */
  @SuppressWarnings("all")
  public LeistungParameterV1 getLeistung() {
    return this.leistung;
  }

  /**
   * Organisationseinheit.
   * {@code null}, wenn keine Organisationseinheit definiert wurde.
   */
  @SuppressWarnings("all")
  public OrganisationseinheitParameterV1 getOrganisationseinheit() {
    return this.organisationseinheit;
  }

  /**
   * Allgemeiner Gemeindeschlüssel.
   * {@code null}, wenn der Parameter nicht beim Prozessstart definiert wurde.
   */
  @SuppressWarnings("all")
  public String getAgs() {
    return this.ags;
  }

  /**
   * Frei wählbarer Parameter.
   * {@code null}, wenn kein Parameter definiert wurde.
   */
  @SuppressWarnings("all")
  public String getP() {
    return this.p;
  }

  /**
   * Menge der Parameter von externen Parameter-Quellen, wie Jesaja.
   * {@code null}, wenn keine Parameter abgefragt wurden, weil Daten zum Abfragen fehlten.
   */
  @SuppressWarnings("all")
  public Map<String, Object> getParameters() {
    return this.parameters;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "StartParameterV1(startTime=" + this.getStartTime() + ", startedByUser=" + this.getStartedByUser() + ", processName=" + this.getProcessName() + ", leistung=" + this.getLeistung() + ", organisationseinheit=" + this.getOrganisationseinheit() + ", ags=" + this.getAgs() + ", p=" + this.getP() + ", parameters=" + this.getParameters() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof StartParameterV1)) return false;
    final StartParameterV1 other = (StartParameterV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$startTime = this.getStartTime();
    final Object other$startTime = other.getStartTime();
    if (this$startTime == null ? other$startTime != null : !this$startTime.equals(other$startTime)) return false;
    final Object this$startedByUser = this.getStartedByUser();
    final Object other$startedByUser = other.getStartedByUser();
    if (this$startedByUser == null ? other$startedByUser != null : !this$startedByUser.equals(other$startedByUser)) return false;
    final Object this$processName = this.getProcessName();
    final Object other$processName = other.getProcessName();
    if (this$processName == null ? other$processName != null : !this$processName.equals(other$processName)) return false;
    final Object this$leistung = this.getLeistung();
    final Object other$leistung = other.getLeistung();
    if (this$leistung == null ? other$leistung != null : !this$leistung.equals(other$leistung)) return false;
    final Object this$organisationseinheit = this.getOrganisationseinheit();
    final Object other$organisationseinheit = other.getOrganisationseinheit();
    if (this$organisationseinheit == null ? other$organisationseinheit != null : !this$organisationseinheit.equals(other$organisationseinheit)) return false;
    final Object this$ags = this.getAgs();
    final Object other$ags = other.getAgs();
    if (this$ags == null ? other$ags != null : !this$ags.equals(other$ags)) return false;
    final Object this$p = this.getP();
    final Object other$p = other.getP();
    if (this$p == null ? other$p != null : !this$p.equals(other$p)) return false;
    final Object this$parameters = this.getParameters();
    final Object other$parameters = other.getParameters();
    if (this$parameters == null ? other$parameters != null : !this$parameters.equals(other$parameters)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof StartParameterV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $startTime = this.getStartTime();
    result = result * PRIME + ($startTime == null ? 43 : $startTime.hashCode());
    final Object $startedByUser = this.getStartedByUser();
    result = result * PRIME + ($startedByUser == null ? 43 : $startedByUser.hashCode());
    final Object $processName = this.getProcessName();
    result = result * PRIME + ($processName == null ? 43 : $processName.hashCode());
    final Object $leistung = this.getLeistung();
    result = result * PRIME + ($leistung == null ? 43 : $leistung.hashCode());
    final Object $organisationseinheit = this.getOrganisationseinheit();
    result = result * PRIME + ($organisationseinheit == null ? 43 : $organisationseinheit.hashCode());
    final Object $ags = this.getAgs();
    result = result * PRIME + ($ags == null ? 43 : $ags.hashCode());
    final Object $p = this.getP();
    result = result * PRIME + ($p == null ? 43 : $p.hashCode());
    final Object $parameters = this.getParameters();
    result = result * PRIME + ($parameters == null ? 43 : $parameters.hashCode());
    return result;
  }

  @SuppressWarnings("all")
  public StartParameterV1() {
  }

  @SuppressWarnings("all")
  public StartParameterV1(final Date startTime, final StartedByUserV1 startedByUser, final String processName, final LeistungParameterV1 leistung, final OrganisationseinheitParameterV1 organisationseinheit, final String ags, final String p, final Map<String, Object> parameters) {
    this.startTime = startTime;
    this.startedByUser = startedByUser;
    this.processName = processName;
    this.leistung = leistung;
    this.organisationseinheit = organisationseinheit;
    this.ags = ags;
    this.p = p;
    this.parameters = parameters;
  }
}
