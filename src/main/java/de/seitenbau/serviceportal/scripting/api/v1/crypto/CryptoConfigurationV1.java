// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.crypto;

/**
 * Die beim Verschlüsseln verwendete Konfiguration. Diese sind erforderlich,
 * um die Entschlüsselung auf Servern von Drittanbietern zu konfigurieren.
 *
 * @since Release 1.169
 */
public class CryptoConfigurationV1 {
  /**
   * Cipher Transformation (Name/Mode/Padding).
   *
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-names">Cipher Algorithm Names</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-modes">Cipher Algorithm Modes</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-paddings">
   * Cipher Algorithm Paddings</a>
   */
  private String cipherTransformation;
  /**
   * Länge des Initialisierungsvektors in Bits. Muss durch 8 teilbar und größer als 0 sein.
   */
  private int initialisationVectorLengthInBits;
  /**
   * Password-Based Key Derivation Konfiguration.
   */
  private PBKDConfigurationV1 pbkdConfiguration;


  @SuppressWarnings("all")
  @lombok.Generated
  public static class CryptoConfigurationV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private String cipherTransformation;
    @SuppressWarnings("all")
    @lombok.Generated
    private int initialisationVectorLengthInBits;
    @SuppressWarnings("all")
    @lombok.Generated
    private PBKDConfigurationV1 pbkdConfiguration;

    @SuppressWarnings("all")
    @lombok.Generated
    CryptoConfigurationV1Builder() {
    }

    /**
     * Cipher Transformation (Name/Mode/Padding).
     *
     * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-names">Cipher Algorithm Names</a>
     * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-modes">Cipher Algorithm Modes</a>
     * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-paddings">
     * Cipher Algorithm Paddings</a>
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public CryptoConfigurationV1.CryptoConfigurationV1Builder cipherTransformation(final String cipherTransformation) {
      this.cipherTransformation = cipherTransformation;
      return this;
    }

    /**
     * Länge des Initialisierungsvektors in Bits. Muss durch 8 teilbar und größer als 0 sein.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public CryptoConfigurationV1.CryptoConfigurationV1Builder initialisationVectorLengthInBits(final int initialisationVectorLengthInBits) {
      this.initialisationVectorLengthInBits = initialisationVectorLengthInBits;
      return this;
    }

    /**
     * Password-Based Key Derivation Konfiguration.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public CryptoConfigurationV1.CryptoConfigurationV1Builder pbkdConfiguration(final PBKDConfigurationV1 pbkdConfiguration) {
      this.pbkdConfiguration = pbkdConfiguration;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public CryptoConfigurationV1 build() {
      return new CryptoConfigurationV1(this.cipherTransformation, this.initialisationVectorLengthInBits, this.pbkdConfiguration);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "CryptoConfigurationV1.CryptoConfigurationV1Builder(cipherTransformation=" + this.cipherTransformation + ", initialisationVectorLengthInBits=" + this.initialisationVectorLengthInBits + ", pbkdConfiguration=" + this.pbkdConfiguration + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static CryptoConfigurationV1.CryptoConfigurationV1Builder builder() {
    return new CryptoConfigurationV1.CryptoConfigurationV1Builder();
  }

  /**
   * Cipher Transformation (Name/Mode/Padding).
   *
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-names">Cipher Algorithm Names</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-modes">Cipher Algorithm Modes</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-paddings">
   * Cipher Algorithm Paddings</a>
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getCipherTransformation() {
    return this.cipherTransformation;
  }

  /**
   * Länge des Initialisierungsvektors in Bits. Muss durch 8 teilbar und größer als 0 sein.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public int getInitialisationVectorLengthInBits() {
    return this.initialisationVectorLengthInBits;
  }

  /**
   * Password-Based Key Derivation Konfiguration.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public PBKDConfigurationV1 getPbkdConfiguration() {
    return this.pbkdConfiguration;
  }

  /**
   * Cipher Transformation (Name/Mode/Padding).
   *
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-names">Cipher Algorithm Names</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-modes">Cipher Algorithm Modes</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-paddings">
   * Cipher Algorithm Paddings</a>
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setCipherTransformation(final String cipherTransformation) {
    this.cipherTransformation = cipherTransformation;
  }

  /**
   * Länge des Initialisierungsvektors in Bits. Muss durch 8 teilbar und größer als 0 sein.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setInitialisationVectorLengthInBits(final int initialisationVectorLengthInBits) {
    this.initialisationVectorLengthInBits = initialisationVectorLengthInBits;
  }

  /**
   * Password-Based Key Derivation Konfiguration.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setPbkdConfiguration(final PBKDConfigurationV1 pbkdConfiguration) {
    this.pbkdConfiguration = pbkdConfiguration;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof CryptoConfigurationV1)) return false;
    final CryptoConfigurationV1 other = (CryptoConfigurationV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (this.getInitialisationVectorLengthInBits() != other.getInitialisationVectorLengthInBits()) return false;
    final Object this$cipherTransformation = this.getCipherTransformation();
    final Object other$cipherTransformation = other.getCipherTransformation();
    if (this$cipherTransformation == null ? other$cipherTransformation != null : !this$cipherTransformation.equals(other$cipherTransformation)) return false;
    final Object this$pbkdConfiguration = this.getPbkdConfiguration();
    final Object other$pbkdConfiguration = other.getPbkdConfiguration();
    if (this$pbkdConfiguration == null ? other$pbkdConfiguration != null : !this$pbkdConfiguration.equals(other$pbkdConfiguration)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof CryptoConfigurationV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getInitialisationVectorLengthInBits();
    final Object $cipherTransformation = this.getCipherTransformation();
    result = result * PRIME + ($cipherTransformation == null ? 43 : $cipherTransformation.hashCode());
    final Object $pbkdConfiguration = this.getPbkdConfiguration();
    result = result * PRIME + ($pbkdConfiguration == null ? 43 : $pbkdConfiguration.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "CryptoConfigurationV1(cipherTransformation=" + this.getCipherTransformation() + ", initialisationVectorLengthInBits=" + this.getInitialisationVectorLengthInBits() + ", pbkdConfiguration=" + this.getPbkdConfiguration() + ")";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public CryptoConfigurationV1() {
  }

  /**
   * Creates a new {@code CryptoConfigurationV1} instance.
   *
   * @param cipherTransformation Cipher Transformation (Name/Mode/Padding).
   *
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-names">Cipher Algorithm Names</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-modes">Cipher Algorithm Modes</a>
   * @see <a href="https://tinyurl.com/standard-names#cipher-algorithm-paddings">
   * Cipher Algorithm Paddings</a>
   * @param initialisationVectorLengthInBits Länge des Initialisierungsvektors in Bits. Muss durch 8 teilbar und größer als 0 sein.
   * @param pbkdConfiguration Password-Based Key Derivation Konfiguration.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public CryptoConfigurationV1(final String cipherTransformation, final int initialisationVectorLengthInBits, final PBKDConfigurationV1 pbkdConfiguration) {
    this.cipherTransformation = cipherTransformation;
    this.initialisationVectorLengthInBits = initialisationVectorLengthInBits;
    this.pbkdConfiguration = pbkdConfiguration;
  }
}
