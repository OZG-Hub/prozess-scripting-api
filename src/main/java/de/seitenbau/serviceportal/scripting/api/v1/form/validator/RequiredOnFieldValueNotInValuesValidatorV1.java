// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

import java.util.Set;

/**
 * Validierungsregel, die ein Feld zum Pflichtfeld macht, wenn das referenziertes
 * Feld einen Wert hat, der nicht Teil einer definierten Menge von Werten ist.
 */
public class RequiredOnFieldValueNotInValuesValidatorV1 extends ConditionalFieldValidationRuleV1 {
  /**
   * Werte des referenzierten Feldes, bei denen das Feld nicht zum Pflichtfeld wird.
   */
  private Set<Object> values;


  @SuppressWarnings("all")
  public static abstract class RequiredOnFieldValueNotInValuesValidatorV1Builder<C extends RequiredOnFieldValueNotInValuesValidatorV1, B extends RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1Builder<C, B>> extends ConditionalFieldValidationRuleV1.ConditionalFieldValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    private Set<Object> values;

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B values(final Set<Object> values) {
      this.values = values;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1Builder(super=" + super.toString() + ", values=" + this.values + ")";
    }
  }


  @SuppressWarnings("all")
  private static final class RequiredOnFieldValueNotInValuesValidatorV1BuilderImpl extends RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1Builder<RequiredOnFieldValueNotInValuesValidatorV1, RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    private RequiredOnFieldValueNotInValuesValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    protected RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    public RequiredOnFieldValueNotInValuesValidatorV1 build() {
      return new RequiredOnFieldValueNotInValuesValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  protected RequiredOnFieldValueNotInValuesValidatorV1(final RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1Builder<?, ?> b) {
    super(b);
    this.values = b.values;
  }

  @SuppressWarnings("all")
  public static RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1Builder<?, ?> builder() {
    return new RequiredOnFieldValueNotInValuesValidatorV1.RequiredOnFieldValueNotInValuesValidatorV1BuilderImpl();
  }

  /**
   * Werte des referenzierten Feldes, bei denen das Feld nicht zum Pflichtfeld wird.
   */
  @SuppressWarnings("all")
  public Set<Object> getValues() {
    return this.values;
  }

  /**
   * Werte des referenzierten Feldes, bei denen das Feld nicht zum Pflichtfeld wird.
   */
  @SuppressWarnings("all")
  public void setValues(final Set<Object> values) {
    this.values = values;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "RequiredOnFieldValueNotInValuesValidatorV1(values=" + this.getValues() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof RequiredOnFieldValueNotInValuesValidatorV1)) return false;
    final RequiredOnFieldValueNotInValuesValidatorV1 other = (RequiredOnFieldValueNotInValuesValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (!super.equals(o)) return false;
    final Object this$values = this.getValues();
    final Object other$values = other.getValues();
    if (this$values == null ? other$values != null : !this$values.equals(other$values)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof RequiredOnFieldValueNotInValuesValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = super.hashCode();
    final Object $values = this.getValues();
    result = result * PRIME + ($values == null ? 43 : $values.hashCode());
    return result;
  }
}
