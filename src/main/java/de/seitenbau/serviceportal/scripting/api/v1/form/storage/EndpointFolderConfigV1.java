// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.storage;

/**
 * Konfiguration zur Angabe einer externen Dateiablange.
 */
public class EndpointFolderConfigV1 implements Cloneable {
  /**
   * URL zur externen Dateiablange. Nicht {@code null}.
   */
  private String baseUrl;
  /**
   * Ordner oder 端ber "/" geschachtelter Pfad von Ordnern auf der externen Dateiablange, wo eine Datei
   * gespeichert werden soll. Nicht {@code null}.
   */
  private String folder;

  @Override
  public EndpointFolderConfigV1 clone() {
    try {
      return (EndpointFolderConfigV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }


  @SuppressWarnings("all")
  public static class EndpointFolderConfigV1Builder {
    @SuppressWarnings("all")
    private String baseUrl;
    @SuppressWarnings("all")
    private String folder;

    @SuppressWarnings("all")
    EndpointFolderConfigV1Builder() {
    }

    /**
     * URL zur externen Dateiablange. Nicht {@code null}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public EndpointFolderConfigV1.EndpointFolderConfigV1Builder baseUrl(final String baseUrl) {
      this.baseUrl = baseUrl;
      return this;
    }

    /**
     * Ordner oder 端ber "/" geschachtelter Pfad von Ordnern auf der externen Dateiablange, wo eine Datei
     * gespeichert werden soll. Nicht {@code null}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public EndpointFolderConfigV1.EndpointFolderConfigV1Builder folder(final String folder) {
      this.folder = folder;
      return this;
    }

    @SuppressWarnings("all")
    public EndpointFolderConfigV1 build() {
      return new EndpointFolderConfigV1(this.baseUrl, this.folder);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "EndpointFolderConfigV1.EndpointFolderConfigV1Builder(baseUrl=" + this.baseUrl + ", folder=" + this.folder + ")";
    }
  }

  @SuppressWarnings("all")
  public static EndpointFolderConfigV1.EndpointFolderConfigV1Builder builder() {
    return new EndpointFolderConfigV1.EndpointFolderConfigV1Builder();
  }

  /**
   * URL zur externen Dateiablange. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public String getBaseUrl() {
    return this.baseUrl;
  }

  /**
   * Ordner oder 端ber "/" geschachtelter Pfad von Ordnern auf der externen Dateiablange, wo eine Datei
   * gespeichert werden soll. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public String getFolder() {
    return this.folder;
  }

  /**
   * URL zur externen Dateiablange. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public void setBaseUrl(final String baseUrl) {
    this.baseUrl = baseUrl;
  }

  /**
   * Ordner oder 端ber "/" geschachtelter Pfad von Ordnern auf der externen Dateiablange, wo eine Datei
   * gespeichert werden soll. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public void setFolder(final String folder) {
    this.folder = folder;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof EndpointFolderConfigV1)) return false;
    final EndpointFolderConfigV1 other = (EndpointFolderConfigV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$baseUrl = this.getBaseUrl();
    final Object other$baseUrl = other.getBaseUrl();
    if (this$baseUrl == null ? other$baseUrl != null : !this$baseUrl.equals(other$baseUrl)) return false;
    final Object this$folder = this.getFolder();
    final Object other$folder = other.getFolder();
    if (this$folder == null ? other$folder != null : !this$folder.equals(other$folder)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof EndpointFolderConfigV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $baseUrl = this.getBaseUrl();
    result = result * PRIME + ($baseUrl == null ? 43 : $baseUrl.hashCode());
    final Object $folder = this.getFolder();
    result = result * PRIME + ($folder == null ? 43 : $folder.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "EndpointFolderConfigV1(baseUrl=" + this.getBaseUrl() + ", folder=" + this.getFolder() + ")";
  }

  @SuppressWarnings("all")
  public EndpointFolderConfigV1() {
  }

  @SuppressWarnings("all")
  public EndpointFolderConfigV1(final String baseUrl, final String folder) {
    this.baseUrl = baseUrl;
    this.folder = folder;
  }
}
