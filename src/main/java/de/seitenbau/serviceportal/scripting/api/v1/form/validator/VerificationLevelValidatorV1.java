// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

import java.util.ArrayList;
import java.util.List;
import de.seitenbau.serviceportal.scripting.api.v1.form.content.FormFieldVerificationLevelV1;
import lombok.NonNull;

/**
 * Validierungsregel, die prüft, dass der Wert eines Feldes eine bestimmte Herkunft hat.
 * Diese Regel wird nur für die Validierung von NPA-Feldern eingesetzt.
 */
public class VerificationLevelValidatorV1 extends ValidationRuleV1 {
  /**
   * Erlaubte Vertrauensniveaus für die Überprüfung. Default ist eine leere Liste.
   */
  @NonNull
  private List<FormFieldVerificationLevelV1> levels;

  @SuppressWarnings("all")
  private static List<FormFieldVerificationLevelV1> $default$levels() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  public static abstract class VerificationLevelValidatorV1Builder<C extends VerificationLevelValidatorV1, B extends VerificationLevelValidatorV1.VerificationLevelValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    private boolean levels$set;
    @SuppressWarnings("all")
    private List<FormFieldVerificationLevelV1> levels$value;

    /**
     * Erlaubte Vertrauensniveaus für die Überprüfung. Default ist eine leere Liste.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B levels(@NonNull final List<FormFieldVerificationLevelV1> levels) {
      if (levels == null) {
        throw new NullPointerException("levels is marked non-null but is null");
      }
      this.levels$value = levels;
      levels$set = true;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "VerificationLevelValidatorV1.VerificationLevelValidatorV1Builder(super=" + super.toString() + ", levels$value=" + this.levels$value + ")";
    }
  }


  @SuppressWarnings("all")
  private static final class VerificationLevelValidatorV1BuilderImpl extends VerificationLevelValidatorV1.VerificationLevelValidatorV1Builder<VerificationLevelValidatorV1, VerificationLevelValidatorV1.VerificationLevelValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    private VerificationLevelValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    protected VerificationLevelValidatorV1.VerificationLevelValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    public VerificationLevelValidatorV1 build() {
      return new VerificationLevelValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  protected VerificationLevelValidatorV1(final VerificationLevelValidatorV1.VerificationLevelValidatorV1Builder<?, ?> b) {
    super(b);
    if (b.levels$set) this.levels = b.levels$value;
     else this.levels = VerificationLevelValidatorV1.$default$levels();
    if (levels == null) {
      throw new NullPointerException("levels is marked non-null but is null");
    }
  }

  @SuppressWarnings("all")
  public static VerificationLevelValidatorV1.VerificationLevelValidatorV1Builder<?, ?> builder() {
    return new VerificationLevelValidatorV1.VerificationLevelValidatorV1BuilderImpl();
  }

  /**
   * Erlaubte Vertrauensniveaus für die Überprüfung. Default ist eine leere Liste.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<FormFieldVerificationLevelV1> getLevels() {
    return this.levels;
  }

  /**
   * Erlaubte Vertrauensniveaus für die Überprüfung. Default ist eine leere Liste.
   */
  @SuppressWarnings("all")
  public void setLevels(@NonNull final List<FormFieldVerificationLevelV1> levels) {
    if (levels == null) {
      throw new NullPointerException("levels is marked non-null but is null");
    }
    this.levels = levels;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "VerificationLevelValidatorV1(levels=" + this.getLevels() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof VerificationLevelValidatorV1)) return false;
    final VerificationLevelValidatorV1 other = (VerificationLevelValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$levels = this.getLevels();
    final Object other$levels = other.getLevels();
    if (this$levels == null ? other$levels != null : !this$levels.equals(other$levels)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof VerificationLevelValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $levels = this.getLevels();
    result = result * PRIME + ($levels == null ? 43 : $levels.hashCode());
    return result;
  }
}
