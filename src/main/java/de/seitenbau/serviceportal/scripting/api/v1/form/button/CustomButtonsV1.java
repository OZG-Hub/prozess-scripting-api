// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.button;

import java.util.ArrayList;
import java.util.List;
import de.seitenbau.serviceportal.scripting.api.v1.form.DataResourcePointerV1;
import lombok.NonNull;

/**
 * Klasse der Liste der Custom-Buttons am Formular.
 */
public class CustomButtonsV1 {
  /**
   * Liste der Buttons. Default ist eine leere Liste.
   */
  @NonNull
  private List<CustomButtonV1> buttons;
  /**
   * Prozessinstanzvariable, in die der Wert des geklickten Buttons geschrieben wird.
   */
  private DataResourcePointerV1 target;

  @SuppressWarnings("all")
  private static List<CustomButtonV1> $default$buttons() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  public static class CustomButtonsV1Builder {
    @SuppressWarnings("all")
    private boolean buttons$set;
    @SuppressWarnings("all")
    private List<CustomButtonV1> buttons$value;
    @SuppressWarnings("all")
    private DataResourcePointerV1 target;

    @SuppressWarnings("all")
    CustomButtonsV1Builder() {
    }

    /**
     * Liste der Buttons. Default ist eine leere Liste.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonsV1.CustomButtonsV1Builder buttons(@NonNull final List<CustomButtonV1> buttons) {
      if (buttons == null) {
        throw new NullPointerException("buttons is marked non-null but is null");
      }
      this.buttons$value = buttons;
      buttons$set = true;
      return this;
    }

    /**
     * Prozessinstanzvariable, in die der Wert des geklickten Buttons geschrieben wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonsV1.CustomButtonsV1Builder target(final DataResourcePointerV1 target) {
      this.target = target;
      return this;
    }

    @SuppressWarnings("all")
    public CustomButtonsV1 build() {
      List<CustomButtonV1> buttons$value = this.buttons$value;
      if (!this.buttons$set) buttons$value = CustomButtonsV1.$default$buttons();
      return new CustomButtonsV1(buttons$value, this.target);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "CustomButtonsV1.CustomButtonsV1Builder(buttons$value=" + this.buttons$value + ", target=" + this.target + ")";
    }
  }

  @SuppressWarnings("all")
  public static CustomButtonsV1.CustomButtonsV1Builder builder() {
    return new CustomButtonsV1.CustomButtonsV1Builder();
  }

  /**
   * Liste der Buttons. Default ist eine leere Liste.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<CustomButtonV1> getButtons() {
    return this.buttons;
  }

  /**
   * Prozessinstanzvariable, in die der Wert des geklickten Buttons geschrieben wird.
   */
  @SuppressWarnings("all")
  public DataResourcePointerV1 getTarget() {
    return this.target;
  }

  /**
   * Liste der Buttons. Default ist eine leere Liste.
   */
  @SuppressWarnings("all")
  public void setButtons(@NonNull final List<CustomButtonV1> buttons) {
    if (buttons == null) {
      throw new NullPointerException("buttons is marked non-null but is null");
    }
    this.buttons = buttons;
  }

  /**
   * Prozessinstanzvariable, in die der Wert des geklickten Buttons geschrieben wird.
   */
  @SuppressWarnings("all")
  public void setTarget(final DataResourcePointerV1 target) {
    this.target = target;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof CustomButtonsV1)) return false;
    final CustomButtonsV1 other = (CustomButtonsV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$buttons = this.getButtons();
    final Object other$buttons = other.getButtons();
    if (this$buttons == null ? other$buttons != null : !this$buttons.equals(other$buttons)) return false;
    final Object this$target = this.getTarget();
    final Object other$target = other.getTarget();
    if (this$target == null ? other$target != null : !this$target.equals(other$target)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof CustomButtonsV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $buttons = this.getButtons();
    result = result * PRIME + ($buttons == null ? 43 : $buttons.hashCode());
    final Object $target = this.getTarget();
    result = result * PRIME + ($target == null ? 43 : $target.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "CustomButtonsV1(buttons=" + this.getButtons() + ", target=" + this.getTarget() + ")";
  }

  @SuppressWarnings("all")
  public CustomButtonsV1() {
    this.buttons = CustomButtonsV1.$default$buttons();
  }

  @SuppressWarnings("all")
  private CustomButtonsV1(@NonNull final List<CustomButtonV1> buttons, final DataResourcePointerV1 target) {
    if (buttons == null) {
      throw new NullPointerException("buttons is marked non-null but is null");
    }
    this.buttons = buttons;
    this.target = target;
  }
}
