// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.content;

/**
 * Symmetrischer Schlüssel zur Verschlüsselung von Dateien und deren Metadaten.
 *
 * @see FileReferenceV1
 */
public class SymmetricKeyV1 {
  /**
   * Secret.
   */
  private String secret;
  /**
   * Salt.
   */
  private byte[] salt;
  /**
   * Initialization vector.
   */
  private byte[] iv;

  @SuppressWarnings("all")
  SymmetricKeyV1(final String secret, final byte[] salt, final byte[] iv) {
    this.secret = secret;
    this.salt = salt;
    this.iv = iv;
  }


  @SuppressWarnings("all")
  public static class SymmetricKeyV1Builder {
    @SuppressWarnings("all")
    private String secret;
    @SuppressWarnings("all")
    private byte[] salt;
    @SuppressWarnings("all")
    private byte[] iv;

    @SuppressWarnings("all")
    SymmetricKeyV1Builder() {
    }

    /**
     * Secret.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public SymmetricKeyV1.SymmetricKeyV1Builder secret(final String secret) {
      this.secret = secret;
      return this;
    }

    /**
     * Salt.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public SymmetricKeyV1.SymmetricKeyV1Builder salt(final byte[] salt) {
      this.salt = salt;
      return this;
    }

    /**
     * Initialization vector.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public SymmetricKeyV1.SymmetricKeyV1Builder iv(final byte[] iv) {
      this.iv = iv;
      return this;
    }

    @SuppressWarnings("all")
    public SymmetricKeyV1 build() {
      return new SymmetricKeyV1(this.secret, this.salt, this.iv);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "SymmetricKeyV1.SymmetricKeyV1Builder(secret=" + this.secret + ", salt=" + java.util.Arrays.toString(this.salt) + ", iv=" + java.util.Arrays.toString(this.iv) + ")";
    }
  }

  @SuppressWarnings("all")
  public static SymmetricKeyV1.SymmetricKeyV1Builder builder() {
    return new SymmetricKeyV1.SymmetricKeyV1Builder();
  }

  /**
   * Secret.
   */
  @SuppressWarnings("all")
  public String getSecret() {
    return this.secret;
  }

  /**
   * Salt.
   */
  @SuppressWarnings("all")
  public byte[] getSalt() {
    return this.salt;
  }

  /**
   * Initialization vector.
   */
  @SuppressWarnings("all")
  public byte[] getIv() {
    return this.iv;
  }

  /**
   * Secret.
   */
  @SuppressWarnings("all")
  public void setSecret(final String secret) {
    this.secret = secret;
  }

  /**
   * Salt.
   */
  @SuppressWarnings("all")
  public void setSalt(final byte[] salt) {
    this.salt = salt;
  }

  /**
   * Initialization vector.
   */
  @SuppressWarnings("all")
  public void setIv(final byte[] iv) {
    this.iv = iv;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof SymmetricKeyV1)) return false;
    final SymmetricKeyV1 other = (SymmetricKeyV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$secret = this.getSecret();
    final Object other$secret = other.getSecret();
    if (this$secret == null ? other$secret != null : !this$secret.equals(other$secret)) return false;
    if (!java.util.Arrays.equals(this.getSalt(), other.getSalt())) return false;
    if (!java.util.Arrays.equals(this.getIv(), other.getIv())) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof SymmetricKeyV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $secret = this.getSecret();
    result = result * PRIME + ($secret == null ? 43 : $secret.hashCode());
    result = result * PRIME + java.util.Arrays.hashCode(this.getSalt());
    result = result * PRIME + java.util.Arrays.hashCode(this.getIv());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "SymmetricKeyV1(secret=" + this.getSecret() + ", salt=" + java.util.Arrays.toString(this.getSalt()) + ", iv=" + java.util.Arrays.toString(this.getIv()) + ")";
  }
}
