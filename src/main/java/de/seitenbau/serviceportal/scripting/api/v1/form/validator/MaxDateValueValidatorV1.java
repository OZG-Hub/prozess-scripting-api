// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

import java.util.Date;

/**
 * Validierungsregel, die prüft, dass die Nutzereingabe ein Datum oder eine Uhrzeit ist und nicht nach einem
 * definierten Datum bzw. Zeitpunkt liegt.
 */
public class MaxDateValueValidatorV1 extends ValidationRuleV1 {
  /**
   * Spätestes erlaubtes Datum.
   */
  private Date maxValue;


  @SuppressWarnings("all")
  public static abstract class MaxDateValueValidatorV1Builder<C extends MaxDateValueValidatorV1, B extends MaxDateValueValidatorV1.MaxDateValueValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    private Date maxValue;

    /**
     * Spätestes erlaubtes Datum.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B maxValue(final Date maxValue) {
      this.maxValue = maxValue;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "MaxDateValueValidatorV1.MaxDateValueValidatorV1Builder(super=" + super.toString() + ", maxValue=" + this.maxValue + ")";
    }
  }


  @SuppressWarnings("all")
  private static final class MaxDateValueValidatorV1BuilderImpl extends MaxDateValueValidatorV1.MaxDateValueValidatorV1Builder<MaxDateValueValidatorV1, MaxDateValueValidatorV1.MaxDateValueValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    private MaxDateValueValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    protected MaxDateValueValidatorV1.MaxDateValueValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    public MaxDateValueValidatorV1 build() {
      return new MaxDateValueValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  protected MaxDateValueValidatorV1(final MaxDateValueValidatorV1.MaxDateValueValidatorV1Builder<?, ?> b) {
    super(b);
    this.maxValue = b.maxValue;
  }

  @SuppressWarnings("all")
  public static MaxDateValueValidatorV1.MaxDateValueValidatorV1Builder<?, ?> builder() {
    return new MaxDateValueValidatorV1.MaxDateValueValidatorV1BuilderImpl();
  }

  /**
   * Spätestes erlaubtes Datum.
   */
  @SuppressWarnings("all")
  public Date getMaxValue() {
    return this.maxValue;
  }

  /**
   * Spätestes erlaubtes Datum.
   */
  @SuppressWarnings("all")
  public void setMaxValue(final Date maxValue) {
    this.maxValue = maxValue;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "MaxDateValueValidatorV1(maxValue=" + this.getMaxValue() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof MaxDateValueValidatorV1)) return false;
    final MaxDateValueValidatorV1 other = (MaxDateValueValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$maxValue = this.getMaxValue();
    final Object other$maxValue = other.getMaxValue();
    if (this$maxValue == null ? other$maxValue != null : !this$maxValue.equals(other$maxValue)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof MaxDateValueValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $maxValue = this.getMaxValue();
    result = result * PRIME + ($maxValue == null ? 43 : $maxValue.hashCode());
    return result;
  }
}
