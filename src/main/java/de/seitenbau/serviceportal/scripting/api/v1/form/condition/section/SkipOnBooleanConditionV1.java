// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.condition.section;

import de.seitenbau.serviceportal.scripting.api.v1.form.FieldGroupInstanceV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormV1;

/**
 * Eine Bedingung zum Überspringen von Elementen.
 * Die Bedingung ist erfüllt, wenn ein boolescher Wert {@code true} ist.
 */
public class SkipOnBooleanConditionV1 extends SkipConditionV1 {
  /**
   * {@code true}, wenn die Sichtbarkeitsbedingung erfüllt ist.
   */
  private boolean skipSection;

  @Override
  public boolean isSkipped(FieldGroupInstanceV1 instance, FormV1 form) {
    return skipSection;
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class SkipOnBooleanConditionV1Builder<C extends SkipOnBooleanConditionV1, B extends SkipOnBooleanConditionV1.SkipOnBooleanConditionV1Builder<C, B>> extends SkipConditionV1.SkipConditionV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean skipSection;

    /**
     * {@code true}, wenn die Sichtbarkeitsbedingung erfüllt ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B skipSection(final boolean skipSection) {
      this.skipSection = skipSection;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "SkipOnBooleanConditionV1.SkipOnBooleanConditionV1Builder(super=" + super.toString() + ", skipSection=" + this.skipSection + ")";
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  private static final class SkipOnBooleanConditionV1BuilderImpl extends SkipOnBooleanConditionV1.SkipOnBooleanConditionV1Builder<SkipOnBooleanConditionV1, SkipOnBooleanConditionV1.SkipOnBooleanConditionV1BuilderImpl> {
    @SuppressWarnings("all")
    @lombok.Generated
    private SkipOnBooleanConditionV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected SkipOnBooleanConditionV1.SkipOnBooleanConditionV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public SkipOnBooleanConditionV1 build() {
      return new SkipOnBooleanConditionV1(this);
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected SkipOnBooleanConditionV1(final SkipOnBooleanConditionV1.SkipOnBooleanConditionV1Builder<?, ?> b) {
    super(b);
    this.skipSection = b.skipSection;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static SkipOnBooleanConditionV1.SkipOnBooleanConditionV1Builder<?, ?> builder() {
    return new SkipOnBooleanConditionV1.SkipOnBooleanConditionV1BuilderImpl();
  }

  /**
   * {@code true}, wenn die Sichtbarkeitsbedingung erfüllt ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean isSkipSection() {
    return this.skipSection;
  }

  /**
   * {@code true}, wenn die Sichtbarkeitsbedingung erfüllt ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setSkipSection(final boolean skipSection) {
    this.skipSection = skipSection;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "SkipOnBooleanConditionV1(skipSection=" + this.isSkipSection() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof SkipOnBooleanConditionV1)) return false;
    final SkipOnBooleanConditionV1 other = (SkipOnBooleanConditionV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (!super.equals(o)) return false;
    if (this.isSkipSection() != other.isSkipSection()) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof SkipOnBooleanConditionV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = super.hashCode();
    result = result * PRIME + (this.isSkipSection() ? 79 : 97);
    return result;
  }
}
