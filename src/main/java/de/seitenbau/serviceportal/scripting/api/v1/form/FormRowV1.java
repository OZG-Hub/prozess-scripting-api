// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.validation.constraints.NotNull;

/**
 * Zeile von Feldern in einem Formular.
 */
public class FormRowV1 implements Cloneable {
  /**
   * Maximale Breite einer Zeile.
   */
  public static final int GRID_ROW_WIDTH = 12;
  /**
   * Formularfelder dieser Zeile.
   */
  @NotNull
  private List<FormFieldV1> fields;

  protected FormRowV1(FormRowV1 toCopy) {
    copy(toCopy);
  }

  @Override
  public FormRowV1 clone() {
    FormRowV1 result;
    try {
      result = (FormRowV1) super.clone();
      result.fields = new ArrayList<>();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    result.copy(this);
    return result;
  }

  private void copy(FormRowV1 toCopy) {
    this.fields = toCopy.getFields().stream().map(FormFieldV1::clone).collect(Collectors.toList());
  }

  @SuppressWarnings("all")
  private static List<FormFieldV1> $default$fields() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  public static class FormRowV1Builder {
    @SuppressWarnings("all")
    private boolean fields$set;
    @SuppressWarnings("all")
    private List<FormFieldV1> fields$value;

    @SuppressWarnings("all")
    FormRowV1Builder() {
    }

    /**
     * Formularfelder dieser Zeile.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormRowV1.FormRowV1Builder fields(final List<FormFieldV1> fields) {
      this.fields$value = fields;
      fields$set = true;
      return this;
    }

    @SuppressWarnings("all")
    public FormRowV1 build() {
      List<FormFieldV1> fields$value = this.fields$value;
      if (!this.fields$set) fields$value = FormRowV1.$default$fields();
      return new FormRowV1(fields$value);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "FormRowV1.FormRowV1Builder(fields$value=" + this.fields$value + ")";
    }
  }

  @SuppressWarnings("all")
  public static FormRowV1.FormRowV1Builder builder() {
    return new FormRowV1.FormRowV1Builder();
  }

  /**
   * Formularfelder dieser Zeile.
   */
  @SuppressWarnings("all")
  public List<FormFieldV1> getFields() {
    return this.fields;
  }

  /**
   * Formularfelder dieser Zeile.
   */
  @SuppressWarnings("all")
  public void setFields(final List<FormFieldV1> fields) {
    this.fields = fields;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof FormRowV1)) return false;
    final FormRowV1 other = (FormRowV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$fields = this.getFields();
    final Object other$fields = other.getFields();
    if (this$fields == null ? other$fields != null : !this$fields.equals(other$fields)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof FormRowV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $fields = this.getFields();
    result = result * PRIME + ($fields == null ? 43 : $fields.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "FormRowV1(fields=" + this.getFields() + ")";
  }

  @SuppressWarnings("all")
  public FormRowV1(final List<FormFieldV1> fields) {
    this.fields = fields;
  }
}
