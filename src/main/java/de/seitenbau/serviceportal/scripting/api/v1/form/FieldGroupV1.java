// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;

/**
 * Feldgruppe in einem Formular.
 */
public class FieldGroupV1 extends AbstractFieldGroupV1 {
  /**
   * {@code true}, wenn beim Ausfüllen des Formulars mehrere Feldgruppen dieser Art angelegt werden können.
   */
  private boolean multiple;
  /**
   * Beschriftung des Buttons zum Hinzufügen einer neuen Feldgruppen-Instanz.
   */
  private String addRowButtonText;
  /**
   * Beschriftung des Buttons zum Entfernen einer Feldgruppen-Instanz.
   */
  private String deleteRowButtonText;
  /**
   * Text des Tooltips am Button zum Hinzufügen einer neuen Instanz, warum keine weitere
   * Feldgruppen-Instanz hinzugefügt werden kann.
   */
  private String addRowButtonInfoText;
  /**
   * Text des Tooltips am Button zum Entfernen einer existierenden Instanz, warum die Instanz nicht entfernt
   * werden kann.
   */
  private String deleteRowButtonInfoText;
  /**
   * Layout der Feldgruppen-Instanzen, wenn es eine mehrfach-ausfüllbare Feldgruppe ist.
   */
  private FieldGroupLayoutV1 layout;
  /**
   * {@code true}, wenn die Feldgruppe nur in einem erzeugten PDF dargestellt werden soll.
   * Auf der Oberfläche beim Ausfüllen des Formulars ist die Gruppe dann nicht sichtbar.
   */
  private boolean printOnly;
  /**
   * Maximal erlaubte Anzahl an Instanzen der Feldgruppe. Default ist 99.
   */
  private int maxInstanceCount;
  /**
   * {@code true}, wenn die Anzahl an Feldgruppen-Instanzen beim Bearbeiten des Formulars und Submit nicht
   * geändert werden.
   */
  private boolean fixedInstanceCount;
  /**
   * Gibt an, wie der Titel der Instanzen der Feldgruppe generiert werden soll.
   */
  private String instanceTitleTemplate;
  /**
   * Instanzen dieser Feldgruppe.
   */
  private List<FieldGroupInstanceV1> instances;

  /**
   * Erzeugt eine neue Feldgruppe mit der gegebenen ID.
   *
   * @param id ID der Feldgruppe, nicht {@code null}
   *
   * @throws NullPointerException Wenn die gegebene ID {@code null} ist
   */
  public FieldGroupV1(String id) {
    super(id);
    maxInstanceCount = DEFAULT_MAX_INSTANCE_COUNT;
    instances = new ArrayList<>();
  }

  /**
   * Gibt die Instanzen der Feldgruppe zurück.
   * <p>
   * Eine Feldgruppe hat immer mindestens einer Instanz.
   * Nur mehrfach ausfüllbare Feldgruppen können mehr als eine Instanz haben.
   * Die Instanzen der Feldgruppen sind aufsteigend nach ihrem Index sortiert.
   *
   * @return Liste der Instanzen
   */
  public List<FieldGroupInstanceV1> getInstances() {
    createFirstInstanceIfNecessary();
    return instances;
  }

  private List<FieldGroupInstanceV1> getGroupInstancesWith(Predicate<FieldGroupInstanceV1> predicate) {
    createFirstInstanceIfNecessary();
    return instances.stream().filter(predicate).collect(Collectors.toList());
  }

  /**
   * Gibt die Feldgruppen-Instanz dieser Gruppe mit dem gegebenen Instanz-Index zurück.
   *
   * @param index Index der gesuchten Feldgruppen-Instanz
   *
   * @return Instanz mit dem gegebenen Index oder {@code null} wenn keine Instanz mit dem gegebenen Index
   * existiert.
   */
  public FieldGroupInstanceV1 getGroupInstance(int index) {
    return getGroupInstancesWith(i -> index == i.getIndex()).stream().findFirst().orElse(null);
  }

  /**
   * Gibt die Feldgruppen-Instanz dieser Gruppe mit dem gegebenen Instanz-Index zurück.
   * Falls die Instanz nicht existiert, wird sie erzeugt.
   *
   * @param index Index der gesuchten Feldgruppen-Instanz
   *
   * @return Die Instanz mit dem gegebenen Index, nicht {@code null}.
   */
  protected FieldGroupInstanceV1 getGroupInstanceOrCreateIfPossible(int index) {
    if (getGroupInstance(index) == null) {
      addInstance(index);
    }
    return getGroupInstance(index);
  }

  /**
   * Gibt das Feld mit der gegebene ID in der Feldgruppen-Instanz mit dem gegebenen Index zurück.
   *
   * @param index Index der Feldgruppen-Instanz, in der das Feld gesucht werden soll.
   * @param id ID des gesuchten Feldes, nicht {@code null}
   *
   * @return Feld mit der gegebenen ID in der Instanz mit dem gegebenen Index,
   * oder {@code null}, wenn Instanz oder Feld nicht existieren
   * @throws NullPointerException Wenn die gegebene ID {@code null} ist
   */
  public FormFieldV1 getFieldInInstance(int index, String id) {
    FieldGroupInstanceV1 instance = getGroupInstance(index);
    return instance == null ? null : instance.getField(id);
  }

  /**
   * Gibt die Liste aller Felder aller Instanzen dieser Gruppe, die das gegebene Predicate erfüllen, zurück.
   *
   * @param predicate Boolesche Funktion zum Filtern der Felder, nicht {@code null}
   *
   * @return Liste der Felder, die das gegebene Predicate erfüllen
   * @throws NullPointerException Wenn das gegebene Predicate {@code null} ist
   */
  public List<FormFieldV1> getFieldsInInstanceWith(Predicate<FormFieldV1> predicate) {
    createFirstInstanceIfNecessary();
    return instances.stream().flatMap(i -> i.getFieldsWith(predicate).stream()).collect(Collectors.toList());
  }

  /**
   * Fügt eine neue Feldgruppen-Instanz zu dieser Gruppe hinzu, sofern diese Gruppe eine mehrfach ausfüllbare
   * Gruppe ist.
   * <p>
   * Die neue Instanz ist mit den Standardwerten der Feldgruppe befüllt.
   * Der Index der Instanz ist genau eins größer als der aktuell größte Index der aktuellen Instanzen.
   * Dementsprechend wird die neue Instanz am Ende der Liste der Instanzen ergänzt.
   * Ist die Gruppe keine mehrfach ausfüllbare Gruppe, macht die Methode nichts.
   */
  public void addInstance() {
    addInstance(getNextIndex());
  }

  /**
   * Führt eine neue Feldgruppen-Instanz mit dem gegebenen Index hinzu, sofern diese Gruppe eine
   * mehrfach ausfüllbare Gruppe ist.
   * <p>
   * Existiert bereits eine Instanz mit dem gegebenen Index, wird keine Instanz
   * hinzugefügt und die bereits existierende Instanz nicht verändert.
   * Die neue Instanz wird sortiert nach dem Index in die Liste der Instanzen eingefügt.
   * Ist die Gruppe keine mehrfach-ausfüllbare Gruppe, macht die Methode nichts.
   *
   * @param index Index der neuen Instanz
   */
  public void addInstance(int index) {
    if (multiple) {
      createFirstInstanceIfNecessary();
      if (getGroupInstancesWith(group -> index == group.getIndex()).isEmpty()) {
        instances.add(new FieldGroupInstanceV1(this, index));
        instances.sort(Comparator.comparing(FieldGroupInstanceV1::getIndex));
      }
    }
  }

  private int getNextIndex() {
    return instances.isEmpty() ? 0 : instances.get(instances.size() - 1).getIndex() + 1;
  }

  private void createFirstInstanceIfNecessary() {
    if (instances.isEmpty()) {
      instances.add(new FieldGroupInstanceV1(this, 0));
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  private static int $default$maxInstanceCount() {
    return DEFAULT_MAX_INSTANCE_COUNT;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  private static List<FieldGroupInstanceV1> $default$instances() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class FieldGroupV1Builder<C extends FieldGroupV1, B extends FieldGroupV1.FieldGroupV1Builder<C, B>> extends AbstractFieldGroupV1.AbstractFieldGroupV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean multiple;
    @SuppressWarnings("all")
    @lombok.Generated
    private String addRowButtonText;
    @SuppressWarnings("all")
    @lombok.Generated
    private String deleteRowButtonText;
    @SuppressWarnings("all")
    @lombok.Generated
    private String addRowButtonInfoText;
    @SuppressWarnings("all")
    @lombok.Generated
    private String deleteRowButtonInfoText;
    @SuppressWarnings("all")
    @lombok.Generated
    private FieldGroupLayoutV1 layout;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean printOnly;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean maxInstanceCount$set;
    @SuppressWarnings("all")
    @lombok.Generated
    private int maxInstanceCount$value;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean fixedInstanceCount;
    @SuppressWarnings("all")
    @lombok.Generated
    private String instanceTitleTemplate;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean instances$set;
    @SuppressWarnings("all")
    @lombok.Generated
    private List<FieldGroupInstanceV1> instances$value;

    /**
     * {@code true}, wenn beim Ausfüllen des Formulars mehrere Feldgruppen dieser Art angelegt werden können.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B multiple(final boolean multiple) {
      this.multiple = multiple;
      return self();
    }

    /**
     * Beschriftung des Buttons zum Hinzufügen einer neuen Feldgruppen-Instanz.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B addRowButtonText(final String addRowButtonText) {
      this.addRowButtonText = addRowButtonText;
      return self();
    }

    /**
     * Beschriftung des Buttons zum Entfernen einer Feldgruppen-Instanz.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B deleteRowButtonText(final String deleteRowButtonText) {
      this.deleteRowButtonText = deleteRowButtonText;
      return self();
    }

    /**
     * Text des Tooltips am Button zum Hinzufügen einer neuen Instanz, warum keine weitere
     * Feldgruppen-Instanz hinzugefügt werden kann.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B addRowButtonInfoText(final String addRowButtonInfoText) {
      this.addRowButtonInfoText = addRowButtonInfoText;
      return self();
    }

    /**
     * Text des Tooltips am Button zum Entfernen einer existierenden Instanz, warum die Instanz nicht entfernt
     * werden kann.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B deleteRowButtonInfoText(final String deleteRowButtonInfoText) {
      this.deleteRowButtonInfoText = deleteRowButtonInfoText;
      return self();
    }

    /**
     * Layout der Feldgruppen-Instanzen, wenn es eine mehrfach-ausfüllbare Feldgruppe ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B layout(final FieldGroupLayoutV1 layout) {
      this.layout = layout;
      return self();
    }

    /**
     * {@code true}, wenn die Feldgruppe nur in einem erzeugten PDF dargestellt werden soll.
     * Auf der Oberfläche beim Ausfüllen des Formulars ist die Gruppe dann nicht sichtbar.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B printOnly(final boolean printOnly) {
      this.printOnly = printOnly;
      return self();
    }

    /**
     * Maximal erlaubte Anzahl an Instanzen der Feldgruppe. Default ist 99.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B maxInstanceCount(final int maxInstanceCount) {
      this.maxInstanceCount$value = maxInstanceCount;
      maxInstanceCount$set = true;
      return self();
    }

    /**
     * {@code true}, wenn die Anzahl an Feldgruppen-Instanzen beim Bearbeiten des Formulars und Submit nicht
     * geändert werden.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B fixedInstanceCount(final boolean fixedInstanceCount) {
      this.fixedInstanceCount = fixedInstanceCount;
      return self();
    }

    /**
     * Gibt an, wie der Titel der Instanzen der Feldgruppe generiert werden soll.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B instanceTitleTemplate(final String instanceTitleTemplate) {
      this.instanceTitleTemplate = instanceTitleTemplate;
      return self();
    }

    /**
     * Instanzen dieser Feldgruppe.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B instances(final List<FieldGroupInstanceV1> instances) {
      this.instances$value = instances;
      instances$set = true;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "FieldGroupV1.FieldGroupV1Builder(super=" + super.toString() + ", multiple=" + this.multiple + ", addRowButtonText=" + this.addRowButtonText + ", deleteRowButtonText=" + this.deleteRowButtonText + ", addRowButtonInfoText=" + this.addRowButtonInfoText + ", deleteRowButtonInfoText=" + this.deleteRowButtonInfoText + ", layout=" + this.layout + ", printOnly=" + this.printOnly + ", maxInstanceCount$value=" + this.maxInstanceCount$value + ", fixedInstanceCount=" + this.fixedInstanceCount + ", instanceTitleTemplate=" + this.instanceTitleTemplate + ", instances$value=" + this.instances$value + ")";
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  private static final class FieldGroupV1BuilderImpl extends FieldGroupV1.FieldGroupV1Builder<FieldGroupV1, FieldGroupV1.FieldGroupV1BuilderImpl> {
    @SuppressWarnings("all")
    @lombok.Generated
    private FieldGroupV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected FieldGroupV1.FieldGroupV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public FieldGroupV1 build() {
      return new FieldGroupV1(this);
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected FieldGroupV1(final FieldGroupV1.FieldGroupV1Builder<?, ?> b) {
    super(b);
    this.multiple = b.multiple;
    this.addRowButtonText = b.addRowButtonText;
    this.deleteRowButtonText = b.deleteRowButtonText;
    this.addRowButtonInfoText = b.addRowButtonInfoText;
    this.deleteRowButtonInfoText = b.deleteRowButtonInfoText;
    this.layout = b.layout;
    this.printOnly = b.printOnly;
    if (b.maxInstanceCount$set) this.maxInstanceCount = b.maxInstanceCount$value;
     else this.maxInstanceCount = FieldGroupV1.$default$maxInstanceCount();
    this.fixedInstanceCount = b.fixedInstanceCount;
    this.instanceTitleTemplate = b.instanceTitleTemplate;
    if (b.instances$set) this.instances = b.instances$value;
     else this.instances = FieldGroupV1.$default$instances();
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static FieldGroupV1.FieldGroupV1Builder<?, ?> builder() {
    return new FieldGroupV1.FieldGroupV1BuilderImpl();
  }

  /**
   * {@code true}, wenn beim Ausfüllen des Formulars mehrere Feldgruppen dieser Art angelegt werden können.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean isMultiple() {
    return this.multiple;
  }

  /**
   * Beschriftung des Buttons zum Hinzufügen einer neuen Feldgruppen-Instanz.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getAddRowButtonText() {
    return this.addRowButtonText;
  }

  /**
   * Beschriftung des Buttons zum Entfernen einer Feldgruppen-Instanz.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getDeleteRowButtonText() {
    return this.deleteRowButtonText;
  }

  /**
   * Text des Tooltips am Button zum Hinzufügen einer neuen Instanz, warum keine weitere
   * Feldgruppen-Instanz hinzugefügt werden kann.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getAddRowButtonInfoText() {
    return this.addRowButtonInfoText;
  }

  /**
   * Text des Tooltips am Button zum Entfernen einer existierenden Instanz, warum die Instanz nicht entfernt
   * werden kann.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getDeleteRowButtonInfoText() {
    return this.deleteRowButtonInfoText;
  }

  /**
   * Layout der Feldgruppen-Instanzen, wenn es eine mehrfach-ausfüllbare Feldgruppe ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public FieldGroupLayoutV1 getLayout() {
    return this.layout;
  }

  /**
   * {@code true}, wenn die Feldgruppe nur in einem erzeugten PDF dargestellt werden soll.
   * Auf der Oberfläche beim Ausfüllen des Formulars ist die Gruppe dann nicht sichtbar.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean isPrintOnly() {
    return this.printOnly;
  }

  /**
   * Maximal erlaubte Anzahl an Instanzen der Feldgruppe. Default ist 99.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public int getMaxInstanceCount() {
    return this.maxInstanceCount;
  }

  /**
   * {@code true}, wenn die Anzahl an Feldgruppen-Instanzen beim Bearbeiten des Formulars und Submit nicht
   * geändert werden.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean isFixedInstanceCount() {
    return this.fixedInstanceCount;
  }

  /**
   * Gibt an, wie der Titel der Instanzen der Feldgruppe generiert werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getInstanceTitleTemplate() {
    return this.instanceTitleTemplate;
  }

  /**
   * {@code true}, wenn beim Ausfüllen des Formulars mehrere Feldgruppen dieser Art angelegt werden können.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setMultiple(final boolean multiple) {
    this.multiple = multiple;
  }

  /**
   * Beschriftung des Buttons zum Hinzufügen einer neuen Feldgruppen-Instanz.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setAddRowButtonText(final String addRowButtonText) {
    this.addRowButtonText = addRowButtonText;
  }

  /**
   * Beschriftung des Buttons zum Entfernen einer Feldgruppen-Instanz.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setDeleteRowButtonText(final String deleteRowButtonText) {
    this.deleteRowButtonText = deleteRowButtonText;
  }

  /**
   * Text des Tooltips am Button zum Hinzufügen einer neuen Instanz, warum keine weitere
   * Feldgruppen-Instanz hinzugefügt werden kann.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setAddRowButtonInfoText(final String addRowButtonInfoText) {
    this.addRowButtonInfoText = addRowButtonInfoText;
  }

  /**
   * Text des Tooltips am Button zum Entfernen einer existierenden Instanz, warum die Instanz nicht entfernt
   * werden kann.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setDeleteRowButtonInfoText(final String deleteRowButtonInfoText) {
    this.deleteRowButtonInfoText = deleteRowButtonInfoText;
  }

  /**
   * Layout der Feldgruppen-Instanzen, wenn es eine mehrfach-ausfüllbare Feldgruppe ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setLayout(final FieldGroupLayoutV1 layout) {
    this.layout = layout;
  }

  /**
   * {@code true}, wenn die Feldgruppe nur in einem erzeugten PDF dargestellt werden soll.
   * Auf der Oberfläche beim Ausfüllen des Formulars ist die Gruppe dann nicht sichtbar.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setPrintOnly(final boolean printOnly) {
    this.printOnly = printOnly;
  }

  /**
   * Maximal erlaubte Anzahl an Instanzen der Feldgruppe. Default ist 99.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setMaxInstanceCount(final int maxInstanceCount) {
    this.maxInstanceCount = maxInstanceCount;
  }

  /**
   * {@code true}, wenn die Anzahl an Feldgruppen-Instanzen beim Bearbeiten des Formulars und Submit nicht
   * geändert werden.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setFixedInstanceCount(final boolean fixedInstanceCount) {
    this.fixedInstanceCount = fixedInstanceCount;
  }

  /**
   * Gibt an, wie der Titel der Instanzen der Feldgruppe generiert werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setInstanceTitleTemplate(final String instanceTitleTemplate) {
    this.instanceTitleTemplate = instanceTitleTemplate;
  }

  /**
   * Instanzen dieser Feldgruppe.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setInstances(final List<FieldGroupInstanceV1> instances) {
    this.instances = instances;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "FieldGroupV1(multiple=" + this.isMultiple() + ", addRowButtonText=" + this.getAddRowButtonText() + ", deleteRowButtonText=" + this.getDeleteRowButtonText() + ", addRowButtonInfoText=" + this.getAddRowButtonInfoText() + ", deleteRowButtonInfoText=" + this.getDeleteRowButtonInfoText() + ", layout=" + this.getLayout() + ", printOnly=" + this.isPrintOnly() + ", maxInstanceCount=" + this.getMaxInstanceCount() + ", fixedInstanceCount=" + this.isFixedInstanceCount() + ", instanceTitleTemplate=" + this.getInstanceTitleTemplate() + ", instances=" + this.getInstances() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof FieldGroupV1)) return false;
    final FieldGroupV1 other = (FieldGroupV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (!super.equals(o)) return false;
    if (this.isMultiple() != other.isMultiple()) return false;
    if (this.isPrintOnly() != other.isPrintOnly()) return false;
    if (this.getMaxInstanceCount() != other.getMaxInstanceCount()) return false;
    if (this.isFixedInstanceCount() != other.isFixedInstanceCount()) return false;
    final Object this$addRowButtonText = this.getAddRowButtonText();
    final Object other$addRowButtonText = other.getAddRowButtonText();
    if (this$addRowButtonText == null ? other$addRowButtonText != null : !this$addRowButtonText.equals(other$addRowButtonText)) return false;
    final Object this$deleteRowButtonText = this.getDeleteRowButtonText();
    final Object other$deleteRowButtonText = other.getDeleteRowButtonText();
    if (this$deleteRowButtonText == null ? other$deleteRowButtonText != null : !this$deleteRowButtonText.equals(other$deleteRowButtonText)) return false;
    final Object this$addRowButtonInfoText = this.getAddRowButtonInfoText();
    final Object other$addRowButtonInfoText = other.getAddRowButtonInfoText();
    if (this$addRowButtonInfoText == null ? other$addRowButtonInfoText != null : !this$addRowButtonInfoText.equals(other$addRowButtonInfoText)) return false;
    final Object this$deleteRowButtonInfoText = this.getDeleteRowButtonInfoText();
    final Object other$deleteRowButtonInfoText = other.getDeleteRowButtonInfoText();
    if (this$deleteRowButtonInfoText == null ? other$deleteRowButtonInfoText != null : !this$deleteRowButtonInfoText.equals(other$deleteRowButtonInfoText)) return false;
    final Object this$layout = this.getLayout();
    final Object other$layout = other.getLayout();
    if (this$layout == null ? other$layout != null : !this$layout.equals(other$layout)) return false;
    final Object this$instanceTitleTemplate = this.getInstanceTitleTemplate();
    final Object other$instanceTitleTemplate = other.getInstanceTitleTemplate();
    if (this$instanceTitleTemplate == null ? other$instanceTitleTemplate != null : !this$instanceTitleTemplate.equals(other$instanceTitleTemplate)) return false;
    final Object this$instances = this.getInstances();
    final Object other$instances = other.getInstances();
    if (this$instances == null ? other$instances != null : !this$instances.equals(other$instances)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof FieldGroupV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = super.hashCode();
    result = result * PRIME + (this.isMultiple() ? 79 : 97);
    result = result * PRIME + (this.isPrintOnly() ? 79 : 97);
    result = result * PRIME + this.getMaxInstanceCount();
    result = result * PRIME + (this.isFixedInstanceCount() ? 79 : 97);
    final Object $addRowButtonText = this.getAddRowButtonText();
    result = result * PRIME + ($addRowButtonText == null ? 43 : $addRowButtonText.hashCode());
    final Object $deleteRowButtonText = this.getDeleteRowButtonText();
    result = result * PRIME + ($deleteRowButtonText == null ? 43 : $deleteRowButtonText.hashCode());
    final Object $addRowButtonInfoText = this.getAddRowButtonInfoText();
    result = result * PRIME + ($addRowButtonInfoText == null ? 43 : $addRowButtonInfoText.hashCode());
    final Object $deleteRowButtonInfoText = this.getDeleteRowButtonInfoText();
    result = result * PRIME + ($deleteRowButtonInfoText == null ? 43 : $deleteRowButtonInfoText.hashCode());
    final Object $layout = this.getLayout();
    result = result * PRIME + ($layout == null ? 43 : $layout.hashCode());
    final Object $instanceTitleTemplate = this.getInstanceTitleTemplate();
    result = result * PRIME + ($instanceTitleTemplate == null ? 43 : $instanceTitleTemplate.hashCode());
    final Object $instances = this.getInstances();
    result = result * PRIME + ($instances == null ? 43 : $instances.hashCode());
    return result;
  }
}
