// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

import java.math.BigDecimal;

/**
 * Validierungsregel, die prüft, dass die Nutzereingabe eine Zahl ist
 * und nicht größer als der hier angegebene Maximalwert ist.
 */
public class MaxNumberValueValidatorV1 extends ValidationRuleV1 {
  /**
   * Maximalwert, der nicht überschritten werden darf.
   */
  private BigDecimal maxValue;
  /**
   * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
   */
  private String validationInvalidNumberMessage;


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class MaxNumberValueValidatorV1Builder<C extends MaxNumberValueValidatorV1, B extends MaxNumberValueValidatorV1.MaxNumberValueValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private BigDecimal maxValue;
    @SuppressWarnings("all")
    @lombok.Generated
    private String validationInvalidNumberMessage;

    /**
     * Maximalwert, der nicht überschritten werden darf.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B maxValue(final BigDecimal maxValue) {
      this.maxValue = maxValue;
      return self();
    }

    /**
     * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B validationInvalidNumberMessage(final String validationInvalidNumberMessage) {
      this.validationInvalidNumberMessage = validationInvalidNumberMessage;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "MaxNumberValueValidatorV1.MaxNumberValueValidatorV1Builder(super=" + super.toString() + ", maxValue=" + this.maxValue + ", validationInvalidNumberMessage=" + this.validationInvalidNumberMessage + ")";
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  private static final class MaxNumberValueValidatorV1BuilderImpl extends MaxNumberValueValidatorV1.MaxNumberValueValidatorV1Builder<MaxNumberValueValidatorV1, MaxNumberValueValidatorV1.MaxNumberValueValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    @lombok.Generated
    private MaxNumberValueValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected MaxNumberValueValidatorV1.MaxNumberValueValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public MaxNumberValueValidatorV1 build() {
      return new MaxNumberValueValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected MaxNumberValueValidatorV1(final MaxNumberValueValidatorV1.MaxNumberValueValidatorV1Builder<?, ?> b) {
    super(b);
    this.maxValue = b.maxValue;
    this.validationInvalidNumberMessage = b.validationInvalidNumberMessage;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static MaxNumberValueValidatorV1.MaxNumberValueValidatorV1Builder<?, ?> builder() {
    return new MaxNumberValueValidatorV1.MaxNumberValueValidatorV1BuilderImpl();
  }

  /**
   * Maximalwert, der nicht überschritten werden darf.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public BigDecimal getMaxValue() {
    return this.maxValue;
  }

  /**
   * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getValidationInvalidNumberMessage() {
    return this.validationInvalidNumberMessage;
  }

  /**
   * Maximalwert, der nicht überschritten werden darf.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setMaxValue(final BigDecimal maxValue) {
    this.maxValue = maxValue;
  }

  /**
   * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValidationInvalidNumberMessage(final String validationInvalidNumberMessage) {
    this.validationInvalidNumberMessage = validationInvalidNumberMessage;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "MaxNumberValueValidatorV1(maxValue=" + this.getMaxValue() + ", validationInvalidNumberMessage=" + this.getValidationInvalidNumberMessage() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof MaxNumberValueValidatorV1)) return false;
    final MaxNumberValueValidatorV1 other = (MaxNumberValueValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$maxValue = this.getMaxValue();
    final Object other$maxValue = other.getMaxValue();
    if (this$maxValue == null ? other$maxValue != null : !this$maxValue.equals(other$maxValue)) return false;
    final Object this$validationInvalidNumberMessage = this.getValidationInvalidNumberMessage();
    final Object other$validationInvalidNumberMessage = other.getValidationInvalidNumberMessage();
    if (this$validationInvalidNumberMessage == null ? other$validationInvalidNumberMessage != null : !this$validationInvalidNumberMessage.equals(other$validationInvalidNumberMessage)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof MaxNumberValueValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $maxValue = this.getMaxValue();
    result = result * PRIME + ($maxValue == null ? 43 : $maxValue.hashCode());
    final Object $validationInvalidNumberMessage = this.getValidationInvalidNumberMessage();
    result = result * PRIME + ($validationInvalidNumberMessage == null ? 43 : $validationInvalidNumberMessage.hashCode());
    return result;
  }
}
