// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

/**
 * Validierungsregel, die pr√ºft, dass die Nutzereingabe ein negativer Geldbetrag ist.
 */
public class EuroBetragNegativeValidatorV1 extends ValidationRuleV1 {
  /**
   * {@code true}, wenn der Betrag nicht 0 sein darf.
   */
  private Boolean strictlyNegative;


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class EuroBetragNegativeValidatorV1Builder<C extends EuroBetragNegativeValidatorV1, B extends EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean strictlyNegative;

    /**
     * {@code true}, wenn der Betrag nicht 0 sein darf.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B strictlyNegative(final Boolean strictlyNegative) {
      this.strictlyNegative = strictlyNegative;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1Builder(super=" + super.toString() + ", strictlyNegative=" + this.strictlyNegative + ")";
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  private static final class EuroBetragNegativeValidatorV1BuilderImpl extends EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1Builder<EuroBetragNegativeValidatorV1, EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    @lombok.Generated
    private EuroBetragNegativeValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public EuroBetragNegativeValidatorV1 build() {
      return new EuroBetragNegativeValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected EuroBetragNegativeValidatorV1(final EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1Builder<?, ?> b) {
    super(b);
    this.strictlyNegative = b.strictlyNegative;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1Builder<?, ?> builder() {
    return new EuroBetragNegativeValidatorV1.EuroBetragNegativeValidatorV1BuilderImpl();
  }

  /**
   * {@code true}, wenn der Betrag nicht 0 sein darf.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getStrictlyNegative() {
    return this.strictlyNegative;
  }

  /**
   * {@code true}, wenn der Betrag nicht 0 sein darf.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setStrictlyNegative(final Boolean strictlyNegative) {
    this.strictlyNegative = strictlyNegative;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "EuroBetragNegativeValidatorV1(strictlyNegative=" + this.getStrictlyNegative() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof EuroBetragNegativeValidatorV1)) return false;
    final EuroBetragNegativeValidatorV1 other = (EuroBetragNegativeValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$strictlyNegative = this.getStrictlyNegative();
    final Object other$strictlyNegative = other.getStrictlyNegative();
    if (this$strictlyNegative == null ? other$strictlyNegative != null : !this$strictlyNegative.equals(other$strictlyNegative)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof EuroBetragNegativeValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $strictlyNegative = this.getStrictlyNegative();
    result = result * PRIME + ($strictlyNegative == null ? 43 : $strictlyNegative.hashCode());
    return result;
  }
}
