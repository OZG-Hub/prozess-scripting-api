// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.auth;

/**
 * Konfiguration zur Authentifizierung an einem externen Server per Keystore mit SSL-Client-Zertifikaten.
 */
public class KeystoreAuthenticationConfigV1 implements AuthenticationConfigV1 {
  /**
   * Base64-Repr채sentation des Keystores mit den Client-Zertifikaten. Nicht {@code null}.
   */
  private String keystore;
  /**
   * Password des Keystores. Nicht {@code null}.
   */
  private String keystorePassword;

  @Override
  public KeystoreAuthenticationConfigV1 clone() {
    try {
      return (KeystoreAuthenticationConfigV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }


  @SuppressWarnings("all")
  public static class KeystoreAuthenticationConfigV1Builder {
    @SuppressWarnings("all")
    private String keystore;
    @SuppressWarnings("all")
    private String keystorePassword;

    @SuppressWarnings("all")
    KeystoreAuthenticationConfigV1Builder() {
    }

    /**
     * Base64-Repr채sentation des Keystores mit den Client-Zertifikaten. Nicht {@code null}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public KeystoreAuthenticationConfigV1.KeystoreAuthenticationConfigV1Builder keystore(final String keystore) {
      this.keystore = keystore;
      return this;
    }

    /**
     * Password des Keystores. Nicht {@code null}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public KeystoreAuthenticationConfigV1.KeystoreAuthenticationConfigV1Builder keystorePassword(final String keystorePassword) {
      this.keystorePassword = keystorePassword;
      return this;
    }

    @SuppressWarnings("all")
    public KeystoreAuthenticationConfigV1 build() {
      return new KeystoreAuthenticationConfigV1(this.keystore, this.keystorePassword);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "KeystoreAuthenticationConfigV1.KeystoreAuthenticationConfigV1Builder(keystore=" + this.keystore + ", keystorePassword=" + this.keystorePassword + ")";
    }
  }

  @SuppressWarnings("all")
  public static KeystoreAuthenticationConfigV1.KeystoreAuthenticationConfigV1Builder builder() {
    return new KeystoreAuthenticationConfigV1.KeystoreAuthenticationConfigV1Builder();
  }

  /**
   * Base64-Repr채sentation des Keystores mit den Client-Zertifikaten. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public String getKeystore() {
    return this.keystore;
  }

  /**
   * Password des Keystores. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public String getKeystorePassword() {
    return this.keystorePassword;
  }

  /**
   * Base64-Repr채sentation des Keystores mit den Client-Zertifikaten. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public void setKeystore(final String keystore) {
    this.keystore = keystore;
  }

  /**
   * Password des Keystores. Nicht {@code null}.
   */
  @SuppressWarnings("all")
  public void setKeystorePassword(final String keystorePassword) {
    this.keystorePassword = keystorePassword;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof KeystoreAuthenticationConfigV1)) return false;
    final KeystoreAuthenticationConfigV1 other = (KeystoreAuthenticationConfigV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$keystore = this.getKeystore();
    final Object other$keystore = other.getKeystore();
    if (this$keystore == null ? other$keystore != null : !this$keystore.equals(other$keystore)) return false;
    final Object this$keystorePassword = this.getKeystorePassword();
    final Object other$keystorePassword = other.getKeystorePassword();
    if (this$keystorePassword == null ? other$keystorePassword != null : !this$keystorePassword.equals(other$keystorePassword)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof KeystoreAuthenticationConfigV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $keystore = this.getKeystore();
    result = result * PRIME + ($keystore == null ? 43 : $keystore.hashCode());
    final Object $keystorePassword = this.getKeystorePassword();
    result = result * PRIME + ($keystorePassword == null ? 43 : $keystorePassword.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "KeystoreAuthenticationConfigV1(keystore=" + this.getKeystore() + ", keystorePassword=" + this.getKeystorePassword() + ")";
  }

  @SuppressWarnings("all")
  public KeystoreAuthenticationConfigV1() {
  }

  @SuppressWarnings("all")
  public KeystoreAuthenticationConfigV1(final String keystore, final String keystorePassword) {
    this.keystore = keystore;
    this.keystorePassword = keystorePassword;
  }
}
