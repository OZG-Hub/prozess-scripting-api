// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.ajax;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormFieldKeyV1;
import lombok.NonNull;

/**
 * Klasse zur Konfiguration von Ajax-Aufrufen.
 */
public class ExternalDataSourcePropertiesV1 implements Cloneable {
  /**
   * URL, an die der Aufruf gesendet werden soll.
   * Für DOWNLOAD- und PDF-Felder kann ein ServiceAlias verwendet werden.
   */
  @NonNull
  private String url;
  /**
   * Host des Proxies, der zum Senden des Requests verwendet werden soll (inklusive Prefix http://).
   * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
   */
  private String proxyHost;
  /**
   * Port der URL des Proxies, der zum Senden des Requests verwendet werden soll.
   * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
   */
  private Integer proxyPort;
  /**
   * Map der HTTP-Header die beim AJAX-Request gesetzt werden sollen. Die Header müssen der Allow-List
   * entsprechen. Keys und Values können Platzhalter enthalten.
   */
  private Map<String, String> headers;
  /**
   * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   */
  @NonNull
  private AjaxRequestIncludedFieldsScopeV1 scope;
  /**
   * Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  private List<FormFieldKeyV1> fieldIds;
  /**
   * Name der Variable aus der gelesen werden soll. Nur für DOWNLOAD- und PDF-Felder.
   */
  private String variableName;

  public ExternalDataSourcePropertiesV1(@NonNull String url, @NonNull AjaxRequestIncludedFieldsScopeV1 scope) {
    if (url == null) {
      throw new NullPointerException("url is marked non-null but is null");
    }
    if (scope == null) {
      throw new NullPointerException("scope is marked non-null but is null");
    }
    this.url = url;
    this.scope = scope;
  }

  public ExternalDataSourcePropertiesV1(ExternalDataSourcePropertiesV1 toCopy) {
    copy(toCopy);
  }

  private void copy(ExternalDataSourcePropertiesV1 toCopy) {
    this.url = toCopy.url;
    this.proxyHost = toCopy.proxyHost;
    this.proxyPort = toCopy.proxyPort;
    this.scope = toCopy.scope;
    this.variableName = toCopy.variableName;
    if (toCopy.getFieldIds() != null) {
      this.fieldIds = new ArrayList<>(toCopy.getFieldIds());
    }
    if (toCopy.getHeaders() != null) {
      this.headers = new HashMap<>(toCopy.getHeaders());
    }
  }

  @Override
  public ExternalDataSourcePropertiesV1 clone() {
    ExternalDataSourcePropertiesV1 result;
    try {
      result = (ExternalDataSourcePropertiesV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    result.copy(this);
    return result;
  }


  @SuppressWarnings("all")
  public static class ExternalDataSourcePropertiesV1Builder {
    @SuppressWarnings("all")
    private String url;
    @SuppressWarnings("all")
    private String proxyHost;
    @SuppressWarnings("all")
    private Integer proxyPort;
    @SuppressWarnings("all")
    private Map<String, String> headers;
    @SuppressWarnings("all")
    private AjaxRequestIncludedFieldsScopeV1 scope;
    @SuppressWarnings("all")
    private List<FormFieldKeyV1> fieldIds;
    @SuppressWarnings("all")
    private String variableName;

    @SuppressWarnings("all")
    ExternalDataSourcePropertiesV1Builder() {
    }

    /**
     * URL, an die der Aufruf gesendet werden soll.
     * Für DOWNLOAD- und PDF-Felder kann ein ServiceAlias verwendet werden.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder url(@NonNull final String url) {
      if (url == null) {
        throw new NullPointerException("url is marked non-null but is null");
      }
      this.url = url;
      return this;
    }

    /**
     * Host des Proxies, der zum Senden des Requests verwendet werden soll (inklusive Prefix http://).
     * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder proxyHost(final String proxyHost) {
      this.proxyHost = proxyHost;
      return this;
    }

    /**
     * Port der URL des Proxies, der zum Senden des Requests verwendet werden soll.
     * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder proxyPort(final Integer proxyPort) {
      this.proxyPort = proxyPort;
      return this;
    }

    /**
     * Map der HTTP-Header die beim AJAX-Request gesetzt werden sollen. Die Header müssen der Allow-List
     * entsprechen. Keys und Values können Platzhalter enthalten.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder headers(final Map<String, String> headers) {
      this.headers = headers;
      return this;
    }

    /**
     * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
     * bestimmt werden sollen.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder scope(@NonNull final AjaxRequestIncludedFieldsScopeV1 scope) {
      if (scope == null) {
        throw new NullPointerException("scope is marked non-null but is null");
      }
      this.scope = scope;
      return this;
    }

    /**
     * Liste mit IDs von explizit definierten Felder, falls Scope
     * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder fieldIds(final List<FormFieldKeyV1> fieldIds) {
      this.fieldIds = fieldIds;
      return this;
    }

    /**
     * Name der Variable aus der gelesen werden soll. Nur für DOWNLOAD- und PDF-Felder.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder variableName(final String variableName) {
      this.variableName = variableName;
      return this;
    }

    @SuppressWarnings("all")
    public ExternalDataSourcePropertiesV1 build() {
      return new ExternalDataSourcePropertiesV1(this.url, this.proxyHost, this.proxyPort, this.headers, this.scope, this.fieldIds, this.variableName);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder(url=" + this.url + ", proxyHost=" + this.proxyHost + ", proxyPort=" + this.proxyPort + ", headers=" + this.headers + ", scope=" + this.scope + ", fieldIds=" + this.fieldIds + ", variableName=" + this.variableName + ")";
    }
  }

  @SuppressWarnings("all")
  public static ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder builder() {
    return new ExternalDataSourcePropertiesV1.ExternalDataSourcePropertiesV1Builder();
  }

  /**
   * URL, an die der Aufruf gesendet werden soll.
   * Für DOWNLOAD- und PDF-Felder kann ein ServiceAlias verwendet werden.
   */
  @NonNull
  @SuppressWarnings("all")
  public String getUrl() {
    return this.url;
  }

  /**
   * Host des Proxies, der zum Senden des Requests verwendet werden soll (inklusive Prefix http://).
   * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
   */
  @SuppressWarnings("all")
  public String getProxyHost() {
    return this.proxyHost;
  }

  /**
   * Port der URL des Proxies, der zum Senden des Requests verwendet werden soll.
   * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
   */
  @SuppressWarnings("all")
  public Integer getProxyPort() {
    return this.proxyPort;
  }

  /**
   * Map der HTTP-Header die beim AJAX-Request gesetzt werden sollen. Die Header müssen der Allow-List
   * entsprechen. Keys und Values können Platzhalter enthalten.
   */
  @SuppressWarnings("all")
  public Map<String, String> getHeaders() {
    return this.headers;
  }

  /**
   * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   */
  @NonNull
  @SuppressWarnings("all")
  public AjaxRequestIncludedFieldsScopeV1 getScope() {
    return this.scope;
  }

  /**
   * Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  @SuppressWarnings("all")
  public List<FormFieldKeyV1> getFieldIds() {
    return this.fieldIds;
  }

  /**
   * Name der Variable aus der gelesen werden soll. Nur für DOWNLOAD- und PDF-Felder.
   */
  @SuppressWarnings("all")
  public String getVariableName() {
    return this.variableName;
  }

  /**
   * URL, an die der Aufruf gesendet werden soll.
   * Für DOWNLOAD- und PDF-Felder kann ein ServiceAlias verwendet werden.
   */
  @SuppressWarnings("all")
  public void setUrl(@NonNull final String url) {
    if (url == null) {
      throw new NullPointerException("url is marked non-null but is null");
    }
    this.url = url;
  }

  /**
   * Host des Proxies, der zum Senden des Requests verwendet werden soll (inklusive Prefix http://).
   * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
   */
  @SuppressWarnings("all")
  public void setProxyHost(final String proxyHost) {
    this.proxyHost = proxyHost;
  }

  /**
   * Port der URL des Proxies, der zum Senden des Requests verwendet werden soll.
   * {@code null}, falls eine direkte Netzwerkverbindung verwendet werden kann.
   */
  @SuppressWarnings("all")
  public void setProxyPort(final Integer proxyPort) {
    this.proxyPort = proxyPort;
  }

  /**
   * Map der HTTP-Header die beim AJAX-Request gesetzt werden sollen. Die Header müssen der Allow-List
   * entsprechen. Keys und Values können Platzhalter enthalten.
   */
  @SuppressWarnings("all")
  public void setHeaders(final Map<String, String> headers) {
    this.headers = headers;
  }

  /**
   * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   */
  @SuppressWarnings("all")
  public void setScope(@NonNull final AjaxRequestIncludedFieldsScopeV1 scope) {
    if (scope == null) {
      throw new NullPointerException("scope is marked non-null but is null");
    }
    this.scope = scope;
  }

  /**
   * Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  @SuppressWarnings("all")
  public void setFieldIds(final List<FormFieldKeyV1> fieldIds) {
    this.fieldIds = fieldIds;
  }

  /**
   * Name der Variable aus der gelesen werden soll. Nur für DOWNLOAD- und PDF-Felder.
   */
  @SuppressWarnings("all")
  public void setVariableName(final String variableName) {
    this.variableName = variableName;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof ExternalDataSourcePropertiesV1)) return false;
    final ExternalDataSourcePropertiesV1 other = (ExternalDataSourcePropertiesV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$proxyPort = this.getProxyPort();
    final Object other$proxyPort = other.getProxyPort();
    if (this$proxyPort == null ? other$proxyPort != null : !this$proxyPort.equals(other$proxyPort)) return false;
    final Object this$url = this.getUrl();
    final Object other$url = other.getUrl();
    if (this$url == null ? other$url != null : !this$url.equals(other$url)) return false;
    final Object this$proxyHost = this.getProxyHost();
    final Object other$proxyHost = other.getProxyHost();
    if (this$proxyHost == null ? other$proxyHost != null : !this$proxyHost.equals(other$proxyHost)) return false;
    final Object this$headers = this.getHeaders();
    final Object other$headers = other.getHeaders();
    if (this$headers == null ? other$headers != null : !this$headers.equals(other$headers)) return false;
    final Object this$scope = this.getScope();
    final Object other$scope = other.getScope();
    if (this$scope == null ? other$scope != null : !this$scope.equals(other$scope)) return false;
    final Object this$fieldIds = this.getFieldIds();
    final Object other$fieldIds = other.getFieldIds();
    if (this$fieldIds == null ? other$fieldIds != null : !this$fieldIds.equals(other$fieldIds)) return false;
    final Object this$variableName = this.getVariableName();
    final Object other$variableName = other.getVariableName();
    if (this$variableName == null ? other$variableName != null : !this$variableName.equals(other$variableName)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof ExternalDataSourcePropertiesV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $proxyPort = this.getProxyPort();
    result = result * PRIME + ($proxyPort == null ? 43 : $proxyPort.hashCode());
    final Object $url = this.getUrl();
    result = result * PRIME + ($url == null ? 43 : $url.hashCode());
    final Object $proxyHost = this.getProxyHost();
    result = result * PRIME + ($proxyHost == null ? 43 : $proxyHost.hashCode());
    final Object $headers = this.getHeaders();
    result = result * PRIME + ($headers == null ? 43 : $headers.hashCode());
    final Object $scope = this.getScope();
    result = result * PRIME + ($scope == null ? 43 : $scope.hashCode());
    final Object $fieldIds = this.getFieldIds();
    result = result * PRIME + ($fieldIds == null ? 43 : $fieldIds.hashCode());
    final Object $variableName = this.getVariableName();
    result = result * PRIME + ($variableName == null ? 43 : $variableName.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "ExternalDataSourcePropertiesV1(url=" + this.getUrl() + ", proxyHost=" + this.getProxyHost() + ", proxyPort=" + this.getProxyPort() + ", headers=" + this.getHeaders() + ", scope=" + this.getScope() + ", fieldIds=" + this.getFieldIds() + ", variableName=" + this.getVariableName() + ")";
  }

  @SuppressWarnings("all")
  private ExternalDataSourcePropertiesV1(@NonNull final String url, final String proxyHost, final Integer proxyPort, final Map<String, String> headers, @NonNull final AjaxRequestIncludedFieldsScopeV1 scope, final List<FormFieldKeyV1> fieldIds, final String variableName) {
    if (url == null) {
      throw new NullPointerException("url is marked non-null but is null");
    }
    if (scope == null) {
      throw new NullPointerException("scope is marked non-null but is null");
    }
    this.url = url;
    this.proxyHost = proxyHost;
    this.proxyPort = proxyPort;
    this.headers = headers;
    this.scope = scope;
    this.fieldIds = fieldIds;
    this.variableName = variableName;
  }
}
