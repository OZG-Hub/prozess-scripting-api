// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import de.seitenbau.serviceportal.scripting.api.v1.form.condition.DisplayConditionV1;
import lombok.NonNull;

/**
 * Abstrakte Elternklasse für Feldgruppen und deren Instanzen.
 */
public abstract class AbstractFieldGroupV1 {
  /**
   * Default und Maximum der maximalen Anzahl an Instanzen, die eine mehrfach-ausfüllbare Feldgruppe haben
   * kann.
   */
  public static final int DEFAULT_MAX_INSTANCE_COUNT = 99;
  /**
   * ID der Feldgruppe.
   */
  @NonNull
  private String id;
  /**
   * Die ID der Feldgruppe als Datenfeldgruppe im FIM-Standard (Föderales Informationsmanagement).
   */
  private String fimId;
  /**
   * Überschrift der Feldgruppe.
   */
  private String title;
  /**
   * Formularzeilen der Feldgruppe. Default ist eine leere Liste.
   */
  @NonNull
  private List<FormRowV1> rows;
  /**
   * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
   * Default ist eine leere Liste.
   */
  @NonNull
  private List<DisplayConditionV1> displayConditions;

  /**
   * Erzeugt eine Feldgruppe mit der übergebenen ID.
   *
   * @param id ID der Feldgruppe, nicht {@code null}.
   *
   * @throws NullPointerException Wenn die gegebene ID {@code null} ist
   */
  protected AbstractFieldGroupV1(@NonNull String id) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    this.id = id;
  }

  /**
   * Gibt das Feld mit der gegebenen ID zurück.
   *
   * @param id ID eines Feldes innerhalb dieser Gruppe, nicht {@code null}
   *
   * @return Feld mit gegebener ID oder {@code null}, wenn nicht gefunden
   * @throws NullPointerException Wenn die gegebene ID {@code null} ist
   */
  public FormFieldV1 getField(String id) {
    return getFieldsWith(f -> id.equals(f.getId())).stream().findFirst().orElse(null);
  }

  /**
   * Gibt die Felder zurück, die die übergebene Bedingung erfüllen.
   *
   * @param predicate Die Bedingung, die die Felder erfüllen müssen, nicht {@code null}
   *
   * @return die Felder, die die Bedingung erfüllen, nicht {@code null}
   * @throws NullPointerException Wenn die gegebene Bedingung {@code null} ist
   */
  protected List<FormFieldV1> getFieldsWith(Predicate<FormFieldV1> predicate) {
    return rows.stream().flatMap(r -> r.getFields().stream()).filter(predicate).collect(Collectors.toList());
  }

  @SuppressWarnings("all")
  private static List<FormRowV1> $default$rows() {
    return new ArrayList<>();
  }

  @SuppressWarnings("all")
  private static List<DisplayConditionV1> $default$displayConditions() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  public static abstract class AbstractFieldGroupV1Builder<C extends AbstractFieldGroupV1, B extends AbstractFieldGroupV1.AbstractFieldGroupV1Builder<C, B>> {
    @SuppressWarnings("all")
    private String id;
    @SuppressWarnings("all")
    private String fimId;
    @SuppressWarnings("all")
    private String title;
    @SuppressWarnings("all")
    private boolean rows$set;
    @SuppressWarnings("all")
    private List<FormRowV1> rows$value;
    @SuppressWarnings("all")
    private boolean displayConditions$set;
    @SuppressWarnings("all")
    private List<DisplayConditionV1> displayConditions$value;

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B id(@NonNull final String id) {
      if (id == null) {
        throw new NullPointerException("id is marked non-null but is null");
      }
      this.id = id;
      return self();
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B fimId(final String fimId) {
      this.fimId = fimId;
      return self();
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B title(final String title) {
      this.title = title;
      return self();
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B rows(@NonNull final List<FormRowV1> rows) {
      if (rows == null) {
        throw new NullPointerException("rows is marked non-null but is null");
      }
      this.rows$value = rows;
      rows$set = true;
      return self();
    }

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B displayConditions(@NonNull final List<DisplayConditionV1> displayConditions) {
      if (displayConditions == null) {
        throw new NullPointerException("displayConditions is marked non-null but is null");
      }
      this.displayConditions$value = displayConditions;
      displayConditions$set = true;
      return self();
    }

    @SuppressWarnings("all")
    protected abstract B self();

    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "AbstractFieldGroupV1.AbstractFieldGroupV1Builder(id=" + this.id + ", fimId=" + this.fimId + ", title=" + this.title + ", rows$value=" + this.rows$value + ", displayConditions$value=" + this.displayConditions$value + ")";
    }
  }

  @SuppressWarnings("all")
  protected AbstractFieldGroupV1(final AbstractFieldGroupV1.AbstractFieldGroupV1Builder<?, ?> b) {
    this.id = b.id;
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    this.fimId = b.fimId;
    this.title = b.title;
    if (b.rows$set) this.rows = b.rows$value;
     else this.rows = AbstractFieldGroupV1.$default$rows();
    if (rows == null) {
      throw new NullPointerException("rows is marked non-null but is null");
    }
    if (b.displayConditions$set) this.displayConditions = b.displayConditions$value;
     else this.displayConditions = AbstractFieldGroupV1.$default$displayConditions();
    if (displayConditions == null) {
      throw new NullPointerException("displayConditions is marked non-null but is null");
    }
  }

  /**
   * ID der Feldgruppe.
   */
  @NonNull
  @SuppressWarnings("all")
  public String getId() {
    return this.id;
  }

  /**
   * Die ID der Feldgruppe als Datenfeldgruppe im FIM-Standard (Föderales Informationsmanagement).
   */
  @SuppressWarnings("all")
  public String getFimId() {
    return this.fimId;
  }

  /**
   * Überschrift der Feldgruppe.
   */
  @SuppressWarnings("all")
  public String getTitle() {
    return this.title;
  }

  /**
   * Formularzeilen der Feldgruppe. Default ist eine leere Liste.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<FormRowV1> getRows() {
    return this.rows;
  }

  /**
   * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
   * Default ist eine leere Liste.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<DisplayConditionV1> getDisplayConditions() {
    return this.displayConditions;
  }

  /**
   * ID der Feldgruppe.
   */
  @SuppressWarnings("all")
  public void setId(@NonNull final String id) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    this.id = id;
  }

  /**
   * Die ID der Feldgruppe als Datenfeldgruppe im FIM-Standard (Föderales Informationsmanagement).
   */
  @SuppressWarnings("all")
  public void setFimId(final String fimId) {
    this.fimId = fimId;
  }

  /**
   * Überschrift der Feldgruppe.
   */
  @SuppressWarnings("all")
  public void setTitle(final String title) {
    this.title = title;
  }

  /**
   * Formularzeilen der Feldgruppe. Default ist eine leere Liste.
   */
  @SuppressWarnings("all")
  public void setRows(@NonNull final List<FormRowV1> rows) {
    if (rows == null) {
      throw new NullPointerException("rows is marked non-null but is null");
    }
    this.rows = rows;
  }

  /**
   * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
   * Default ist eine leere Liste.
   */
  @SuppressWarnings("all")
  public void setDisplayConditions(@NonNull final List<DisplayConditionV1> displayConditions) {
    if (displayConditions == null) {
      throw new NullPointerException("displayConditions is marked non-null but is null");
    }
    this.displayConditions = displayConditions;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof AbstractFieldGroupV1)) return false;
    final AbstractFieldGroupV1 other = (AbstractFieldGroupV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$id = this.getId();
    final Object other$id = other.getId();
    if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
    final Object this$fimId = this.getFimId();
    final Object other$fimId = other.getFimId();
    if (this$fimId == null ? other$fimId != null : !this$fimId.equals(other$fimId)) return false;
    final Object this$title = this.getTitle();
    final Object other$title = other.getTitle();
    if (this$title == null ? other$title != null : !this$title.equals(other$title)) return false;
    final Object this$rows = this.getRows();
    final Object other$rows = other.getRows();
    if (this$rows == null ? other$rows != null : !this$rows.equals(other$rows)) return false;
    final Object this$displayConditions = this.getDisplayConditions();
    final Object other$displayConditions = other.getDisplayConditions();
    if (this$displayConditions == null ? other$displayConditions != null : !this$displayConditions.equals(other$displayConditions)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof AbstractFieldGroupV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $id = this.getId();
    result = result * PRIME + ($id == null ? 43 : $id.hashCode());
    final Object $fimId = this.getFimId();
    result = result * PRIME + ($fimId == null ? 43 : $fimId.hashCode());
    final Object $title = this.getTitle();
    result = result * PRIME + ($title == null ? 43 : $title.hashCode());
    final Object $rows = this.getRows();
    result = result * PRIME + ($rows == null ? 43 : $rows.hashCode());
    final Object $displayConditions = this.getDisplayConditions();
    result = result * PRIME + ($displayConditions == null ? 43 : $displayConditions.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "AbstractFieldGroupV1(id=" + this.getId() + ", fimId=" + this.getFimId() + ", title=" + this.getTitle() + ", rows=" + this.getRows() + ", displayConditions=" + this.getDisplayConditions() + ")";
  }
}
