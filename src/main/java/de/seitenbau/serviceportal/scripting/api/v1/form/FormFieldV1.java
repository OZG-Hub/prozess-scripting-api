// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form;

import static de.seitenbau.serviceportal.scripting.api.v1.form.FormRowV1.GRID_ROW_WIDTH;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.stream.Collectors;
import de.seitenbau.serviceportal.scripting.api.v1.form.ajax.ExternalDataSourcePropertiesV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.condition.DisplayConditionV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalFieldConfigV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.validator.ValidationRuleV1;
import lombok.NonNull;

/**
 * Feld in einem Formular.
 */
public class FormFieldV1 implements Cloneable {
  /**
   * ID des Feldes (eindeutig in Feldgruppen-Instanz).
   */
  @NonNull
  private String id;
  /**
   * ID des Feldes als Datenfeld im FIM-Standard (Föderales Informationsmanagement).
   */
  private String fimId;
  /**
   * Beschriftung des Feldes.
   */
  private String label;
  /**
   * Typ des Feldes.
   */
  @NonNull
  private FieldTypeV1 type;
  /**
   * Aktueller Wert des Feldes.
   */
  private Object value;
  /**
   * Platzhalter, falls Feld nicht ausgefüllt.
   */
  private String placeholder;
  /**
   * {@code true}, wenn das Feld nicht editierbar / deaktiviert ist.
   */
  private Boolean disabled;
  /**
   * {@code true}, wenn das Feld ein Pflichtfeld ist.
   */
  private Boolean required;
  /**
   * {@code true}, wenn das Feld ein {@link FieldTypeV1#DATE Datum-Feld} ist und der grafische Picker des
   * Felds nicht angeboten werden soll.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDateConfigV1}
   * konfiguriert werden.
   */
  @Deprecated(since = "Formularversion 2")
  private Boolean pickerDisabled;
  /**
   * {@code true}, wenn das Feld ein Einwilligungsfeld ist.
   */
  private Boolean consent;
  /**
   * Individueller Fehlertext - Pflichtfeld nicht ausgefüllt.
   */
  private String requiredValidationFailedMessage;
  /**
   * Individueller Fehlertext - Inhalt passt nicht zum Datentyp des Feldes ({@link FieldTypeV1#DATE Datums-},
   * {@link FieldTypeV1#TIME Zeit-} oder {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  private String typeValidationFailedMessage;
  /**
   * Individueller Fehlertext - falsches Tausendertrennzeichen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   */
  @Deprecated(since = "Formularversion 2")
  private String thousandsSeparatorValidationFailedMessage;
  /**
   * Individueller Fehlertext - falsche Anzahl an Nachkommastellen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated(since = "Formularversion 2")
  private String digitsAfterDecimalPointValidationFailedMessage;
  /**
   * Hilfetext zum Feld.
   */
  private String helptext;
  /**
   * Mögliche Werte bei Auswahllisten.
   */
  private List<PossibleValueV1> possibleValues;
  /**
   * Bedingungen, über die das Feld dynamisch ein- oder ausgeblendet werden kann.
   */
  @NonNull
  private List<DisplayConditionV1> displayConditions;
  /**
   * Breite des Felds (die gesamte Formularbreite entspricht 12).
   */
  private int width;
  /**
   * Layout (nur für {@link FieldTypeV1#CHECKBOX Checkbox-} und
   * {@link FieldTypeV1#RADIO_BUTTONS Radiobuttonfelder}).
   * Ab Formularversion 2 kann dieser Parameter nur noch über die entsprechende additionConfig
   * für das spezifische Feld konfiguriert werden:
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalBooleanConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalRadioButtonConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalCheckboxConfigV1}
   */
  @Deprecated(since = "Formularversion 2")
  private String layout;
  /**
   * Validierungsregeln für das Feld.
   */
  @NonNull
  private List<ValidationRuleV1> validationRules;
  /**
   * Texte für die Fehlermeldungen bei einfacher Formularvalidierung.
   */
  @NonNull
  private Set<ValidationMessageV1> validationMessages;
  /**
   * Quelle, aus der der Feldinhalt gelesen wird. Falls {@code null}, wird ggf. eine Default-source
   * verwendet.
   */
  private DataResourcePointerV1 source;
  /**
   * Ziel, in das der Feldinhalt geschrieben wird.
   */
  private DataResourcePointerV1 target;
  /**
   * Quelle, aus der die Select-Items für das Formularfeld gelesen werden (es kann {@code null}
   * zurückgeliefert werden, dann werden die Defaultwerte aus diesem Objekt verwendet, sonst muss eine Liste
   * an PossibleValue Objekten zurückgegeben werden). Wenn {@code null}, dann werden die im Feld definierten
   * verwendet.
   */
  private DataResourcePointerV1 possibleValuesSource;
  /**
   * Properties für Felder, die AJAX-Calls absetzen.
   * Wenn {@code null}, werden die am Feld angegebenen Default Werte verwendet.
   * Für {@link FieldTypeV1#DOWNLOAD Download-} und {@link FieldTypeV1#PDF PDF-}Felder ein Pflichtattribut.
   */
  private ExternalDataSourcePropertiesV1 externalDataSourceProperties;
  /**
   * Gibt eine externe Quelle an, aus der der Wert des Formularfeldes in Abhängigkeiten von anderen Werten im
   * Formular berechnet wird. Wenn der Benutzer einen abhängigen Wert ändert, wird der Feldwert sofort ohne
   * Abschicken des Formulars neu berechnet (per Ajax-Call). Wenn das Feld disabled ist, wird es immer
   * aktualisiert, wenn nicht, wird der Wert nur dann aktualisiert, wenn der Wert vorher leer war.
   */
  private ExternalDataSourcePropertiesV1 externalValue;
  /**
   * {@code true}, wenn das Feld ein Select-Feld ist und die Einträge auf der Oberfläche durch Texteingabe
   * filterbar sind.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die additionalConfig für das
   * entsprechende Feld konfiguriert werden:
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectAjaxConfigV1}
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectConfigV1}
   */
  @Deprecated(since = "Formularversion 2")
  private Boolean filterable;
  /**
   * Konfigurationsparameter für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder}.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 kann dieser Parameter nur noch über
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalGeoMapConfigV1}
   * konfiguriert werden.
   */
  @Deprecated(since = "Formularversion 2")
  private Map<String, String> controlParameters;
  /**
   * Schlüssel des Feldes, das als Address-Suchfeld für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder} dient.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated(since = "Formularversion 2")
  private FormFieldKeyV1 initializeWithAdressField;
  /**
   * Ergänzende Informationen für spezielle Feldtypen (sonst {@code null}).
   */
  private AdditionalFieldConfigV1 additionalConfig;
  /**
   * Informationen zum Hilfe-Dialog, wenn ein Hilfe-Button angezeigt werden soll.
   */
  private ModalHelpDialogV1 helpDialog;

  /**
   * Erzeugt eine neue Feld-Instanz.
   *
   * @param id ID des Feldes
   * @param type Typ des Feldes
   */
  public FormFieldV1(@NonNull String id, @NonNull FieldTypeV1 type) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    if (type == null) {
      throw new NullPointerException("type is marked non-null but is null");
    }
    this.id = id;
    this.type = type;
    displayConditions = new ArrayList<>();
    width = GRID_ROW_WIDTH;
    validationRules = new ArrayList<>();
    validationMessages = new HashSet<>();
  }

  /**
   * Copy-Konstruktor.
   * Attribut {@code value} wird flach kopiert. Alle anderen Attribute werden tief kopiert.
   *
   * @param toCopy zu kopierendes FormFieldV1, nicht {@code null}.
   */
  public FormFieldV1(FormFieldV1 toCopy) {
    copy(toCopy);
  }

  private void copy(FormFieldV1 toCopy) {
    id = toCopy.getId();
    fimId = toCopy.getFimId();
    label = toCopy.getLabel();
    type = toCopy.getType();
    disabled = toCopy.getDisabled();
    required = toCopy.getRequired();
    pickerDisabled = toCopy.getPickerDisabled();
    placeholder = toCopy.getPlaceholder();
    helptext = toCopy.getHelptext();
    value = toCopy.getValue();
    width = toCopy.getWidth();
    consent = toCopy.getConsent();
    layout = toCopy.getLayout();
    requiredValidationFailedMessage = toCopy.getRequiredValidationFailedMessage();
    typeValidationFailedMessage = toCopy.getTypeValidationFailedMessage();
    thousandsSeparatorValidationFailedMessage = toCopy.getThousandsSeparatorValidationFailedMessage();
    digitsAfterDecimalPointValidationFailedMessage = toCopy.getDigitsAfterDecimalPointValidationFailedMessage();
    filterable = toCopy.getFilterable();
    displayConditions = toCopy.getDisplayConditions().stream().map(DisplayConditionV1::clone).collect(Collectors.toList());
    validationRules = toCopy.getValidationRules().stream().map(ValidationRuleV1::clone).collect(Collectors.toList());
    validationMessages = toCopy.getValidationMessages().stream().map(ValidationMessageV1::new).collect(Collectors.toSet());
    possibleValues = copyWithNullAsDefault(toCopy.getPossibleValues(), c -> c.stream().map(PossibleValueV1::new).collect(Collectors.toList()));
    source = copyWithNullAsDefault(toCopy.getSource(), DataResourcePointerV1::clone);
    target = copyWithNullAsDefault(toCopy.getTarget(), DataResourcePointerV1::clone);
    possibleValuesSource = copyWithNullAsDefault(toCopy.getPossibleValuesSource(), DataResourcePointerV1::clone);
    externalDataSourceProperties = copyWithNullAsDefault(toCopy.getExternalDataSourceProperties(), ExternalDataSourcePropertiesV1::clone);
    externalValue = copyWithNullAsDefault(toCopy.getExternalValue(), ExternalDataSourcePropertiesV1::clone);
    additionalConfig = copyWithNullAsDefault(toCopy.getAdditionalConfig(), AdditionalFieldConfigV1::clone);
    initializeWithAdressField = copyWithNullAsDefault(toCopy.getInitializeWithAdressField(), c -> new FormFieldKeyV1(c.toString()));
    controlParameters = copyWithNullAsDefault(toCopy.getControlParameters(), HashMap::new);
    helpDialog = copyWithNullAsDefault(toCopy.getHelpDialog(), ModalHelpDialogV1::new);
  }

  private <T, R> R copyWithNullAsDefault(T source, Function<T, R> function) {
    return source == null ? null : function.apply(source);
  }

  @Override
  public FormFieldV1 clone() {
    FormFieldV1 result;
    try {
      result = (FormFieldV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    result.copy(this);
    return result;
  }

  /**
   * Gibt den eingegebenen Feldwert dieses Feldes zurück.
   *
   * @return handelt es sich beim Wert um ein {@link FormFieldValueV1}, wird der Value des Objekts
   * zurückgegeben. Ist es kein FormFieldValueV1, so wird der Wert direkt zurückgegeben.
   */
  public Object getFieldValue() {
    return hasFormFieldValue() ? ((FormFieldValueV1) value).getValue() : value;
  }

  private boolean hasFormFieldValue() {
    return value instanceof FormFieldValueV1;
  }

  /**
   * Gibt an, ob dieses Feld ausgefüllt ist.
   *
   * @return {@code true} genau dann, wenn der Feldwert ungleich {@code null}, nicht leer oder keinen
   * Whitespace enthält.
   */
  public boolean isFilled() {
    Object value = getFieldValue();
    if (value == null) {
      return false;
    }
    if (type == FieldTypeV1.SINGLE_CHECKBOX) {
      return Boolean.TRUE.equals(value);
    }
    return !"".equals(value.toString().trim());
  }

  /**
   * Gibt an, ob dieses Feld in einem Formular angezeigt wird.
   *
   * @param instance Feldgruppeninstanz in der sich dieses Feld befindet, nicht {@code null}.
   * @param form Formular in dem sich dieses Feld befindet, nicht {@code null}.
   *
   * @return {@code true} genau dann, wenn dieses Feld angezeigt wird.
   */
  public boolean isShown(FieldGroupInstanceV1 instance, FormV1 form) {
    return displayConditions.isEmpty() || displayConditions.stream().anyMatch(c -> c.isShown(instance, form));
  }

  /**
   * Gibt die Liste der Validierungsmeldungen am Feld zurück. Der Typ der Validierungsmeldung wird
   * ignoriert.
   *
   * @return Liste der Validierungsmeldungen am Feld
   */
  public List<String> getValidationMessagesAsString() {
    return validationMessages.stream().map(ValidationMessageV1::getMessageText).collect(Collectors.toList());
  }

  /**
   * Der gegebene String wird als Validierungsmeldung vom Typ {@link MessageTypeV1#INTERNAL INTERNAL}
   * zu den Validierungsmeldungen des Feldes hinzugefügt.
   *
   * @param message Validierungsmeldung, die hinzugefügt wird
   */
  public void addValidationMessageAsString(String message) {
    validationMessages.add(new ValidationMessageV1(MessageTypeV1.INTERNAL, message));
  }

  protected Set<FormFieldKeyV1> fieldsReferencedInDisplayConditions(FieldGroupInstanceV1 instance) {
    return displayConditions.stream().flatMap(DisplayConditionV1::identifyFieldDisplayConditions).map(c -> c.getReferencedFieldKey(instance)).collect(Collectors.toSet());
  }

  public String getLabel() {
    return label;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  private static List<DisplayConditionV1> $default$displayConditions() {
    return new ArrayList<>();
  }

  @SuppressWarnings("all")
  @lombok.Generated
  private static int $default$width() {
    return GRID_ROW_WIDTH;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  private static List<ValidationRuleV1> $default$validationRules() {
    return new ArrayList<>();
  }

  @SuppressWarnings("all")
  @lombok.Generated
  private static Set<ValidationMessageV1> $default$validationMessages() {
    return new HashSet<>();
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static class FormFieldV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private String id;
    @SuppressWarnings("all")
    @lombok.Generated
    private String fimId;
    @SuppressWarnings("all")
    @lombok.Generated
    private String label;
    @SuppressWarnings("all")
    @lombok.Generated
    private FieldTypeV1 type;
    @SuppressWarnings("all")
    @lombok.Generated
    private Object value;
    @SuppressWarnings("all")
    @lombok.Generated
    private String placeholder;
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean disabled;
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean required;
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean pickerDisabled;
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean consent;
    @SuppressWarnings("all")
    @lombok.Generated
    private String requiredValidationFailedMessage;
    @SuppressWarnings("all")
    @lombok.Generated
    private String typeValidationFailedMessage;
    @SuppressWarnings("all")
    @lombok.Generated
    private String thousandsSeparatorValidationFailedMessage;
    @SuppressWarnings("all")
    @lombok.Generated
    private String digitsAfterDecimalPointValidationFailedMessage;
    @SuppressWarnings("all")
    @lombok.Generated
    private String helptext;
    @SuppressWarnings("all")
    @lombok.Generated
    private List<PossibleValueV1> possibleValues;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean displayConditions$set;
    @SuppressWarnings("all")
    @lombok.Generated
    private List<DisplayConditionV1> displayConditions$value;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean width$set;
    @SuppressWarnings("all")
    @lombok.Generated
    private int width$value;
    @SuppressWarnings("all")
    @lombok.Generated
    private String layout;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean validationRules$set;
    @SuppressWarnings("all")
    @lombok.Generated
    private List<ValidationRuleV1> validationRules$value;
    @SuppressWarnings("all")
    @lombok.Generated
    private boolean validationMessages$set;
    @SuppressWarnings("all")
    @lombok.Generated
    private Set<ValidationMessageV1> validationMessages$value;
    @SuppressWarnings("all")
    @lombok.Generated
    private DataResourcePointerV1 source;
    @SuppressWarnings("all")
    @lombok.Generated
    private DataResourcePointerV1 target;
    @SuppressWarnings("all")
    @lombok.Generated
    private DataResourcePointerV1 possibleValuesSource;
    @SuppressWarnings("all")
    @lombok.Generated
    private ExternalDataSourcePropertiesV1 externalDataSourceProperties;
    @SuppressWarnings("all")
    @lombok.Generated
    private ExternalDataSourcePropertiesV1 externalValue;
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean filterable;
    @SuppressWarnings("all")
    @lombok.Generated
    private Map<String, String> controlParameters;
    @SuppressWarnings("all")
    @lombok.Generated
    private FormFieldKeyV1 initializeWithAdressField;
    @SuppressWarnings("all")
    @lombok.Generated
    private AdditionalFieldConfigV1 additionalConfig;
    @SuppressWarnings("all")
    @lombok.Generated
    private ModalHelpDialogV1 helpDialog;

    @SuppressWarnings("all")
    @lombok.Generated
    FormFieldV1Builder() {
    }

    /**
     * ID des Feldes (eindeutig in Feldgruppen-Instanz).
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder id(@NonNull final String id) {
      if (id == null) {
        throw new NullPointerException("id is marked non-null but is null");
      }
      this.id = id;
      return this;
    }

    /**
     * ID des Feldes als Datenfeld im FIM-Standard (Föderales Informationsmanagement).
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder fimId(final String fimId) {
      this.fimId = fimId;
      return this;
    }

    /**
     * Beschriftung des Feldes.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder label(final String label) {
      this.label = label;
      return this;
    }

    /**
     * Typ des Feldes.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder type(@NonNull final FieldTypeV1 type) {
      if (type == null) {
        throw new NullPointerException("type is marked non-null but is null");
      }
      this.type = type;
      return this;
    }

    /**
     * Aktueller Wert des Feldes.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder value(final Object value) {
      this.value = value;
      return this;
    }

    /**
     * Platzhalter, falls Feld nicht ausgefüllt.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder placeholder(final String placeholder) {
      this.placeholder = placeholder;
      return this;
    }

    /**
     * {@code true}, wenn das Feld nicht editierbar / deaktiviert ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder disabled(final Boolean disabled) {
      this.disabled = disabled;
      return this;
    }

    /**
     * {@code true}, wenn das Feld ein Pflichtfeld ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder required(final Boolean required) {
      this.required = required;
      return this;
    }

    /**
     * {@code true}, wenn das Feld ein {@link FieldTypeV1#DATE Datum-Feld} ist und der grafische Picker des
     * Felds nicht angeboten werden soll.
     * Ab Formularversion 2 kann dieser Parameter nur noch über die
     * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDateConfigV1}
     * konfiguriert werden.
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder pickerDisabled(final Boolean pickerDisabled) {
      this.pickerDisabled = pickerDisabled;
      return this;
    }

    /**
     * {@code true}, wenn das Feld ein Einwilligungsfeld ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder consent(final Boolean consent) {
      this.consent = consent;
      return this;
    }

    /**
     * Individueller Fehlertext - Pflichtfeld nicht ausgefüllt.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder requiredValidationFailedMessage(final String requiredValidationFailedMessage) {
      this.requiredValidationFailedMessage = requiredValidationFailedMessage;
      return this;
    }

    /**
     * Individueller Fehlertext - Inhalt passt nicht zum Datentyp des Feldes ({@link FieldTypeV1#DATE Datums-},
     * {@link FieldTypeV1#TIME Zeit-} oder {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
     * Ab Formularversion 2 nicht mehr verwendbar.
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder typeValidationFailedMessage(final String typeValidationFailedMessage) {
      this.typeValidationFailedMessage = typeValidationFailedMessage;
      return this;
    }

    /**
     * Individueller Fehlertext - falsches Tausendertrennzeichen (nur für
     * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder thousandsSeparatorValidationFailedMessage(final String thousandsSeparatorValidationFailedMessage) {
      this.thousandsSeparatorValidationFailedMessage = thousandsSeparatorValidationFailedMessage;
      return this;
    }

    /**
     * Individueller Fehlertext - falsche Anzahl an Nachkommastellen (nur für
     * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
     * Ab Formularversion 2 nicht mehr verwendbar.
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder digitsAfterDecimalPointValidationFailedMessage(final String digitsAfterDecimalPointValidationFailedMessage) {
      this.digitsAfterDecimalPointValidationFailedMessage = digitsAfterDecimalPointValidationFailedMessage;
      return this;
    }

    /**
     * Hilfetext zum Feld.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder helptext(final String helptext) {
      this.helptext = helptext;
      return this;
    }

    /**
     * Mögliche Werte bei Auswahllisten.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder possibleValues(final List<PossibleValueV1> possibleValues) {
      this.possibleValues = possibleValues;
      return this;
    }

    /**
     * Bedingungen, über die das Feld dynamisch ein- oder ausgeblendet werden kann.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder displayConditions(@NonNull final List<DisplayConditionV1> displayConditions) {
      if (displayConditions == null) {
        throw new NullPointerException("displayConditions is marked non-null but is null");
      }
      this.displayConditions$value = displayConditions;
      displayConditions$set = true;
      return this;
    }

    /**
     * Breite des Felds (die gesamte Formularbreite entspricht 12).
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder width(final int width) {
      this.width$value = width;
      width$set = true;
      return this;
    }

    /**
     * Layout (nur für {@link FieldTypeV1#CHECKBOX Checkbox-} und
     * {@link FieldTypeV1#RADIO_BUTTONS Radiobuttonfelder}).
     * Ab Formularversion 2 kann dieser Parameter nur noch über die entsprechende additionConfig
     * für das spezifische Feld konfiguriert werden:
     * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalBooleanConfigV1}
     * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalRadioButtonConfigV1}
     * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalCheckboxConfigV1}
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder layout(final String layout) {
      this.layout = layout;
      return this;
    }

    /**
     * Validierungsregeln für das Feld.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder validationRules(@NonNull final List<ValidationRuleV1> validationRules) {
      if (validationRules == null) {
        throw new NullPointerException("validationRules is marked non-null but is null");
      }
      this.validationRules$value = validationRules;
      validationRules$set = true;
      return this;
    }

    /**
     * Texte für die Fehlermeldungen bei einfacher Formularvalidierung.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder validationMessages(@NonNull final Set<ValidationMessageV1> validationMessages) {
      if (validationMessages == null) {
        throw new NullPointerException("validationMessages is marked non-null but is null");
      }
      this.validationMessages$value = validationMessages;
      validationMessages$set = true;
      return this;
    }

    /**
     * Quelle, aus der der Feldinhalt gelesen wird. Falls {@code null}, wird ggf. eine Default-source
     * verwendet.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder source(final DataResourcePointerV1 source) {
      this.source = source;
      return this;
    }

    /**
     * Ziel, in das der Feldinhalt geschrieben wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder target(final DataResourcePointerV1 target) {
      this.target = target;
      return this;
    }

    /**
     * Quelle, aus der die Select-Items für das Formularfeld gelesen werden (es kann {@code null}
     * zurückgeliefert werden, dann werden die Defaultwerte aus diesem Objekt verwendet, sonst muss eine Liste
     * an PossibleValue Objekten zurückgegeben werden). Wenn {@code null}, dann werden die im Feld definierten
     * verwendet.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder possibleValuesSource(final DataResourcePointerV1 possibleValuesSource) {
      this.possibleValuesSource = possibleValuesSource;
      return this;
    }

    /**
     * Properties für Felder, die AJAX-Calls absetzen.
     * Wenn {@code null}, werden die am Feld angegebenen Default Werte verwendet.
     * Für {@link FieldTypeV1#DOWNLOAD Download-} und {@link FieldTypeV1#PDF PDF-}Felder ein Pflichtattribut.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder externalDataSourceProperties(final ExternalDataSourcePropertiesV1 externalDataSourceProperties) {
      this.externalDataSourceProperties = externalDataSourceProperties;
      return this;
    }

    /**
     * Gibt eine externe Quelle an, aus der der Wert des Formularfeldes in Abhängigkeiten von anderen Werten im
     * Formular berechnet wird. Wenn der Benutzer einen abhängigen Wert ändert, wird der Feldwert sofort ohne
     * Abschicken des Formulars neu berechnet (per Ajax-Call). Wenn das Feld disabled ist, wird es immer
     * aktualisiert, wenn nicht, wird der Wert nur dann aktualisiert, wenn der Wert vorher leer war.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder externalValue(final ExternalDataSourcePropertiesV1 externalValue) {
      this.externalValue = externalValue;
      return this;
    }

    /**
     * {@code true}, wenn das Feld ein Select-Feld ist und die Einträge auf der Oberfläche durch Texteingabe
     * filterbar sind.
     * Ab Formularversion 2 kann dieser Parameter nur noch über die additionalConfig für das
     * entsprechende Feld konfiguriert werden:
     * - {@link
     * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectAjaxConfigV1}
     * - {@link
     * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectConfigV1}
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder filterable(final Boolean filterable) {
      this.filterable = filterable;
      return this;
    }

    /**
     * Konfigurationsparameter für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder}.
     * Für andere Feldtypen {@code null}.
     * Ab Formularversion 2 kann dieser Parameter nur noch über
     * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalGeoMapConfigV1}
     * konfiguriert werden.
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder controlParameters(final Map<String, String> controlParameters) {
      this.controlParameters = controlParameters;
      return this;
    }

    /**
     * Schlüssel des Feldes, das als Address-Suchfeld für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder} dient.
     * Für andere Feldtypen {@code null}.
     * Ab Formularversion 2 nicht mehr verwendbar.
     * @return {@code this}.
     */
    @Deprecated
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder initializeWithAdressField(final FormFieldKeyV1 initializeWithAdressField) {
      this.initializeWithAdressField = initializeWithAdressField;
      return this;
    }

    /**
     * Ergänzende Informationen für spezielle Feldtypen (sonst {@code null}).
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder additionalConfig(final AdditionalFieldConfigV1 additionalConfig) {
      this.additionalConfig = additionalConfig;
      return this;
    }

    /**
     * Informationen zum Hilfe-Dialog, wenn ein Hilfe-Button angezeigt werden soll.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1.FormFieldV1Builder helpDialog(final ModalHelpDialogV1 helpDialog) {
      this.helpDialog = helpDialog;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public FormFieldV1 build() {
      List<DisplayConditionV1> displayConditions$value = this.displayConditions$value;
      if (!this.displayConditions$set) displayConditions$value = FormFieldV1.$default$displayConditions();
      int width$value = this.width$value;
      if (!this.width$set) width$value = FormFieldV1.$default$width();
      List<ValidationRuleV1> validationRules$value = this.validationRules$value;
      if (!this.validationRules$set) validationRules$value = FormFieldV1.$default$validationRules();
      Set<ValidationMessageV1> validationMessages$value = this.validationMessages$value;
      if (!this.validationMessages$set) validationMessages$value = FormFieldV1.$default$validationMessages();
      return new FormFieldV1(this.id, this.fimId, this.label, this.type, this.value, this.placeholder, this.disabled, this.required, this.pickerDisabled, this.consent, this.requiredValidationFailedMessage, this.typeValidationFailedMessage, this.thousandsSeparatorValidationFailedMessage, this.digitsAfterDecimalPointValidationFailedMessage, this.helptext, this.possibleValues, displayConditions$value, width$value, this.layout, validationRules$value, validationMessages$value, this.source, this.target, this.possibleValuesSource, this.externalDataSourceProperties, this.externalValue, this.filterable, this.controlParameters, this.initializeWithAdressField, this.additionalConfig, this.helpDialog);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "FormFieldV1.FormFieldV1Builder(id=" + this.id + ", fimId=" + this.fimId + ", label=" + this.label + ", type=" + this.type + ", value=" + this.value + ", placeholder=" + this.placeholder + ", disabled=" + this.disabled + ", required=" + this.required + ", pickerDisabled=" + this.pickerDisabled + ", consent=" + this.consent + ", requiredValidationFailedMessage=" + this.requiredValidationFailedMessage + ", typeValidationFailedMessage=" + this.typeValidationFailedMessage + ", thousandsSeparatorValidationFailedMessage=" + this.thousandsSeparatorValidationFailedMessage + ", digitsAfterDecimalPointValidationFailedMessage=" + this.digitsAfterDecimalPointValidationFailedMessage + ", helptext=" + this.helptext + ", possibleValues=" + this.possibleValues + ", displayConditions$value=" + this.displayConditions$value + ", width$value=" + this.width$value + ", layout=" + this.layout + ", validationRules$value=" + this.validationRules$value + ", validationMessages$value=" + this.validationMessages$value + ", source=" + this.source + ", target=" + this.target + ", possibleValuesSource=" + this.possibleValuesSource + ", externalDataSourceProperties=" + this.externalDataSourceProperties + ", externalValue=" + this.externalValue + ", filterable=" + this.filterable + ", controlParameters=" + this.controlParameters + ", initializeWithAdressField=" + this.initializeWithAdressField + ", additionalConfig=" + this.additionalConfig + ", helpDialog=" + this.helpDialog + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static FormFieldV1.FormFieldV1Builder builder() {
    return new FormFieldV1.FormFieldV1Builder();
  }

  /**
   * ID des Feldes (eindeutig in Feldgruppen-Instanz).
   */
  @NonNull
  @SuppressWarnings("all")
  @lombok.Generated
  public String getId() {
    return this.id;
  }

  /**
   * ID des Feldes als Datenfeld im FIM-Standard (Föderales Informationsmanagement).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getFimId() {
    return this.fimId;
  }

  /**
   * Typ des Feldes.
   */
  @NonNull
  @SuppressWarnings("all")
  @lombok.Generated
  public FieldTypeV1 getType() {
    return this.type;
  }

  /**
   * Aktueller Wert des Feldes.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Object getValue() {
    return this.value;
  }

  /**
   * Platzhalter, falls Feld nicht ausgefüllt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getPlaceholder() {
    return this.placeholder;
  }

  /**
   * {@code true}, wenn das Feld nicht editierbar / deaktiviert ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getDisabled() {
    return this.disabled;
  }

  /**
   * {@code true}, wenn das Feld ein Pflichtfeld ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getRequired() {
    return this.required;
  }

  /**
   * {@code true}, wenn das Feld ein {@link FieldTypeV1#DATE Datum-Feld} ist und der grafische Picker des
   * Felds nicht angeboten werden soll.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDateConfigV1}
   * konfiguriert werden.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getPickerDisabled() {
    return this.pickerDisabled;
  }

  /**
   * {@code true}, wenn das Feld ein Einwilligungsfeld ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getConsent() {
    return this.consent;
  }

  /**
   * Individueller Fehlertext - Pflichtfeld nicht ausgefüllt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getRequiredValidationFailedMessage() {
    return this.requiredValidationFailedMessage;
  }

  /**
   * Individueller Fehlertext - Inhalt passt nicht zum Datentyp des Feldes ({@link FieldTypeV1#DATE Datums-},
   * {@link FieldTypeV1#TIME Zeit-} oder {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public String getTypeValidationFailedMessage() {
    return this.typeValidationFailedMessage;
  }

  /**
   * Individueller Fehlertext - falsches Tausendertrennzeichen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public String getThousandsSeparatorValidationFailedMessage() {
    return this.thousandsSeparatorValidationFailedMessage;
  }

  /**
   * Individueller Fehlertext - falsche Anzahl an Nachkommastellen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public String getDigitsAfterDecimalPointValidationFailedMessage() {
    return this.digitsAfterDecimalPointValidationFailedMessage;
  }

  /**
   * Hilfetext zum Feld.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getHelptext() {
    return this.helptext;
  }

  /**
   * Mögliche Werte bei Auswahllisten.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public List<PossibleValueV1> getPossibleValues() {
    return this.possibleValues;
  }

  /**
   * Bedingungen, über die das Feld dynamisch ein- oder ausgeblendet werden kann.
   */
  @NonNull
  @SuppressWarnings("all")
  @lombok.Generated
  public List<DisplayConditionV1> getDisplayConditions() {
    return this.displayConditions;
  }

  /**
   * Breite des Felds (die gesamte Formularbreite entspricht 12).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public int getWidth() {
    return this.width;
  }

  /**
   * Layout (nur für {@link FieldTypeV1#CHECKBOX Checkbox-} und
   * {@link FieldTypeV1#RADIO_BUTTONS Radiobuttonfelder}).
   * Ab Formularversion 2 kann dieser Parameter nur noch über die entsprechende additionConfig
   * für das spezifische Feld konfiguriert werden:
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalBooleanConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalRadioButtonConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalCheckboxConfigV1}
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public String getLayout() {
    return this.layout;
  }

  /**
   * Validierungsregeln für das Feld.
   */
  @NonNull
  @SuppressWarnings("all")
  @lombok.Generated
  public List<ValidationRuleV1> getValidationRules() {
    return this.validationRules;
  }

  /**
   * Texte für die Fehlermeldungen bei einfacher Formularvalidierung.
   */
  @NonNull
  @SuppressWarnings("all")
  @lombok.Generated
  public Set<ValidationMessageV1> getValidationMessages() {
    return this.validationMessages;
  }

  /**
   * Quelle, aus der der Feldinhalt gelesen wird. Falls {@code null}, wird ggf. eine Default-source
   * verwendet.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public DataResourcePointerV1 getSource() {
    return this.source;
  }

  /**
   * Ziel, in das der Feldinhalt geschrieben wird.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public DataResourcePointerV1 getTarget() {
    return this.target;
  }

  /**
   * Quelle, aus der die Select-Items für das Formularfeld gelesen werden (es kann {@code null}
   * zurückgeliefert werden, dann werden die Defaultwerte aus diesem Objekt verwendet, sonst muss eine Liste
   * an PossibleValue Objekten zurückgegeben werden). Wenn {@code null}, dann werden die im Feld definierten
   * verwendet.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public DataResourcePointerV1 getPossibleValuesSource() {
    return this.possibleValuesSource;
  }

  /**
   * Properties für Felder, die AJAX-Calls absetzen.
   * Wenn {@code null}, werden die am Feld angegebenen Default Werte verwendet.
   * Für {@link FieldTypeV1#DOWNLOAD Download-} und {@link FieldTypeV1#PDF PDF-}Felder ein Pflichtattribut.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public ExternalDataSourcePropertiesV1 getExternalDataSourceProperties() {
    return this.externalDataSourceProperties;
  }

  /**
   * Gibt eine externe Quelle an, aus der der Wert des Formularfeldes in Abhängigkeiten von anderen Werten im
   * Formular berechnet wird. Wenn der Benutzer einen abhängigen Wert ändert, wird der Feldwert sofort ohne
   * Abschicken des Formulars neu berechnet (per Ajax-Call). Wenn das Feld disabled ist, wird es immer
   * aktualisiert, wenn nicht, wird der Wert nur dann aktualisiert, wenn der Wert vorher leer war.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public ExternalDataSourcePropertiesV1 getExternalValue() {
    return this.externalValue;
  }

  /**
   * {@code true}, wenn das Feld ein Select-Feld ist und die Einträge auf der Oberfläche durch Texteingabe
   * filterbar sind.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die additionalConfig für das
   * entsprechende Feld konfiguriert werden:
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectAjaxConfigV1}
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectConfigV1}
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getFilterable() {
    return this.filterable;
  }

  /**
   * Konfigurationsparameter für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder}.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 kann dieser Parameter nur noch über
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalGeoMapConfigV1}
   * konfiguriert werden.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public Map<String, String> getControlParameters() {
    return this.controlParameters;
  }

  /**
   * Schlüssel des Feldes, das als Address-Suchfeld für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder} dient.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public FormFieldKeyV1 getInitializeWithAdressField() {
    return this.initializeWithAdressField;
  }

  /**
   * Ergänzende Informationen für spezielle Feldtypen (sonst {@code null}).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public AdditionalFieldConfigV1 getAdditionalConfig() {
    return this.additionalConfig;
  }

  /**
   * Informationen zum Hilfe-Dialog, wenn ein Hilfe-Button angezeigt werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public ModalHelpDialogV1 getHelpDialog() {
    return this.helpDialog;
  }

  /**
   * ID des Feldes (eindeutig in Feldgruppen-Instanz).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setId(@NonNull final String id) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    this.id = id;
  }

  /**
   * ID des Feldes als Datenfeld im FIM-Standard (Föderales Informationsmanagement).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setFimId(final String fimId) {
    this.fimId = fimId;
  }

  /**
   * Beschriftung des Feldes.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setLabel(final String label) {
    this.label = label;
  }

  /**
   * Typ des Feldes.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setType(@NonNull final FieldTypeV1 type) {
    if (type == null) {
      throw new NullPointerException("type is marked non-null but is null");
    }
    this.type = type;
  }

  /**
   * Aktueller Wert des Feldes.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValue(final Object value) {
    this.value = value;
  }

  /**
   * Platzhalter, falls Feld nicht ausgefüllt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setPlaceholder(final String placeholder) {
    this.placeholder = placeholder;
  }

  /**
   * {@code true}, wenn das Feld nicht editierbar / deaktiviert ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setDisabled(final Boolean disabled) {
    this.disabled = disabled;
  }

  /**
   * {@code true}, wenn das Feld ein Pflichtfeld ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setRequired(final Boolean required) {
    this.required = required;
  }

  /**
   * {@code true}, wenn das Feld ein {@link FieldTypeV1#DATE Datum-Feld} ist und der grafische Picker des
   * Felds nicht angeboten werden soll.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDateConfigV1}
   * konfiguriert werden.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setPickerDisabled(final Boolean pickerDisabled) {
    this.pickerDisabled = pickerDisabled;
  }

  /**
   * {@code true}, wenn das Feld ein Einwilligungsfeld ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setConsent(final Boolean consent) {
    this.consent = consent;
  }

  /**
   * Individueller Fehlertext - Pflichtfeld nicht ausgefüllt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setRequiredValidationFailedMessage(final String requiredValidationFailedMessage) {
    this.requiredValidationFailedMessage = requiredValidationFailedMessage;
  }

  /**
   * Individueller Fehlertext - Inhalt passt nicht zum Datentyp des Feldes ({@link FieldTypeV1#DATE Datums-},
   * {@link FieldTypeV1#TIME Zeit-} oder {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setTypeValidationFailedMessage(final String typeValidationFailedMessage) {
    this.typeValidationFailedMessage = typeValidationFailedMessage;
  }

  /**
   * Individueller Fehlertext - falsches Tausendertrennzeichen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setThousandsSeparatorValidationFailedMessage(final String thousandsSeparatorValidationFailedMessage) {
    this.thousandsSeparatorValidationFailedMessage = thousandsSeparatorValidationFailedMessage;
  }

  /**
   * Individueller Fehlertext - falsche Anzahl an Nachkommastellen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setDigitsAfterDecimalPointValidationFailedMessage(final String digitsAfterDecimalPointValidationFailedMessage) {
    this.digitsAfterDecimalPointValidationFailedMessage = digitsAfterDecimalPointValidationFailedMessage;
  }

  /**
   * Hilfetext zum Feld.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setHelptext(final String helptext) {
    this.helptext = helptext;
  }

  /**
   * Mögliche Werte bei Auswahllisten.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setPossibleValues(final List<PossibleValueV1> possibleValues) {
    this.possibleValues = possibleValues;
  }

  /**
   * Bedingungen, über die das Feld dynamisch ein- oder ausgeblendet werden kann.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setDisplayConditions(@NonNull final List<DisplayConditionV1> displayConditions) {
    if (displayConditions == null) {
      throw new NullPointerException("displayConditions is marked non-null but is null");
    }
    this.displayConditions = displayConditions;
  }

  /**
   * Breite des Felds (die gesamte Formularbreite entspricht 12).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setWidth(final int width) {
    this.width = width;
  }

  /**
   * Layout (nur für {@link FieldTypeV1#CHECKBOX Checkbox-} und
   * {@link FieldTypeV1#RADIO_BUTTONS Radiobuttonfelder}).
   * Ab Formularversion 2 kann dieser Parameter nur noch über die entsprechende additionConfig
   * für das spezifische Feld konfiguriert werden:
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalBooleanConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalRadioButtonConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalCheckboxConfigV1}
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setLayout(final String layout) {
    this.layout = layout;
  }

  /**
   * Validierungsregeln für das Feld.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValidationRules(@NonNull final List<ValidationRuleV1> validationRules) {
    if (validationRules == null) {
      throw new NullPointerException("validationRules is marked non-null but is null");
    }
    this.validationRules = validationRules;
  }

  /**
   * Texte für die Fehlermeldungen bei einfacher Formularvalidierung.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValidationMessages(@NonNull final Set<ValidationMessageV1> validationMessages) {
    if (validationMessages == null) {
      throw new NullPointerException("validationMessages is marked non-null but is null");
    }
    this.validationMessages = validationMessages;
  }

  /**
   * Quelle, aus der der Feldinhalt gelesen wird. Falls {@code null}, wird ggf. eine Default-source
   * verwendet.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setSource(final DataResourcePointerV1 source) {
    this.source = source;
  }

  /**
   * Ziel, in das der Feldinhalt geschrieben wird.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setTarget(final DataResourcePointerV1 target) {
    this.target = target;
  }

  /**
   * Quelle, aus der die Select-Items für das Formularfeld gelesen werden (es kann {@code null}
   * zurückgeliefert werden, dann werden die Defaultwerte aus diesem Objekt verwendet, sonst muss eine Liste
   * an PossibleValue Objekten zurückgegeben werden). Wenn {@code null}, dann werden die im Feld definierten
   * verwendet.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setPossibleValuesSource(final DataResourcePointerV1 possibleValuesSource) {
    this.possibleValuesSource = possibleValuesSource;
  }

  /**
   * Properties für Felder, die AJAX-Calls absetzen.
   * Wenn {@code null}, werden die am Feld angegebenen Default Werte verwendet.
   * Für {@link FieldTypeV1#DOWNLOAD Download-} und {@link FieldTypeV1#PDF PDF-}Felder ein Pflichtattribut.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setExternalDataSourceProperties(final ExternalDataSourcePropertiesV1 externalDataSourceProperties) {
    this.externalDataSourceProperties = externalDataSourceProperties;
  }

  /**
   * Gibt eine externe Quelle an, aus der der Wert des Formularfeldes in Abhängigkeiten von anderen Werten im
   * Formular berechnet wird. Wenn der Benutzer einen abhängigen Wert ändert, wird der Feldwert sofort ohne
   * Abschicken des Formulars neu berechnet (per Ajax-Call). Wenn das Feld disabled ist, wird es immer
   * aktualisiert, wenn nicht, wird der Wert nur dann aktualisiert, wenn der Wert vorher leer war.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setExternalValue(final ExternalDataSourcePropertiesV1 externalValue) {
    this.externalValue = externalValue;
  }

  /**
   * {@code true}, wenn das Feld ein Select-Feld ist und die Einträge auf der Oberfläche durch Texteingabe
   * filterbar sind.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die additionalConfig für das
   * entsprechende Feld konfiguriert werden:
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectAjaxConfigV1}
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectConfigV1}
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setFilterable(final Boolean filterable) {
    this.filterable = filterable;
  }

  /**
   * Konfigurationsparameter für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder}.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 kann dieser Parameter nur noch über
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalGeoMapConfigV1}
   * konfiguriert werden.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setControlParameters(final Map<String, String> controlParameters) {
    this.controlParameters = controlParameters;
  }

  /**
   * Schlüssel des Feldes, das als Address-Suchfeld für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder} dient.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 nicht mehr verwendbar.
   */
  @Deprecated
  @SuppressWarnings("all")
  @lombok.Generated
  public void setInitializeWithAdressField(final FormFieldKeyV1 initializeWithAdressField) {
    this.initializeWithAdressField = initializeWithAdressField;
  }

  /**
   * Ergänzende Informationen für spezielle Feldtypen (sonst {@code null}).
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setAdditionalConfig(final AdditionalFieldConfigV1 additionalConfig) {
    this.additionalConfig = additionalConfig;
  }

  /**
   * Informationen zum Hilfe-Dialog, wenn ein Hilfe-Button angezeigt werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setHelpDialog(final ModalHelpDialogV1 helpDialog) {
    this.helpDialog = helpDialog;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof FormFieldV1)) return false;
    final FormFieldV1 other = (FormFieldV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (this.getWidth() != other.getWidth()) return false;
    final Object this$disabled = this.getDisabled();
    final Object other$disabled = other.getDisabled();
    if (this$disabled == null ? other$disabled != null : !this$disabled.equals(other$disabled)) return false;
    final Object this$required = this.getRequired();
    final Object other$required = other.getRequired();
    if (this$required == null ? other$required != null : !this$required.equals(other$required)) return false;
    final Object this$pickerDisabled = this.getPickerDisabled();
    final Object other$pickerDisabled = other.getPickerDisabled();
    if (this$pickerDisabled == null ? other$pickerDisabled != null : !this$pickerDisabled.equals(other$pickerDisabled)) return false;
    final Object this$consent = this.getConsent();
    final Object other$consent = other.getConsent();
    if (this$consent == null ? other$consent != null : !this$consent.equals(other$consent)) return false;
    final Object this$filterable = this.getFilterable();
    final Object other$filterable = other.getFilterable();
    if (this$filterable == null ? other$filterable != null : !this$filterable.equals(other$filterable)) return false;
    final Object this$id = this.getId();
    final Object other$id = other.getId();
    if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
    final Object this$fimId = this.getFimId();
    final Object other$fimId = other.getFimId();
    if (this$fimId == null ? other$fimId != null : !this$fimId.equals(other$fimId)) return false;
    final Object this$label = this.getLabel();
    final Object other$label = other.getLabel();
    if (this$label == null ? other$label != null : !this$label.equals(other$label)) return false;
    final Object this$type = this.getType();
    final Object other$type = other.getType();
    if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
    final Object this$value = this.getValue();
    final Object other$value = other.getValue();
    if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;
    final Object this$placeholder = this.getPlaceholder();
    final Object other$placeholder = other.getPlaceholder();
    if (this$placeholder == null ? other$placeholder != null : !this$placeholder.equals(other$placeholder)) return false;
    final Object this$requiredValidationFailedMessage = this.getRequiredValidationFailedMessage();
    final Object other$requiredValidationFailedMessage = other.getRequiredValidationFailedMessage();
    if (this$requiredValidationFailedMessage == null ? other$requiredValidationFailedMessage != null : !this$requiredValidationFailedMessage.equals(other$requiredValidationFailedMessage)) return false;
    final Object this$typeValidationFailedMessage = this.getTypeValidationFailedMessage();
    final Object other$typeValidationFailedMessage = other.getTypeValidationFailedMessage();
    if (this$typeValidationFailedMessage == null ? other$typeValidationFailedMessage != null : !this$typeValidationFailedMessage.equals(other$typeValidationFailedMessage)) return false;
    final Object this$thousandsSeparatorValidationFailedMessage = this.getThousandsSeparatorValidationFailedMessage();
    final Object other$thousandsSeparatorValidationFailedMessage = other.getThousandsSeparatorValidationFailedMessage();
    if (this$thousandsSeparatorValidationFailedMessage == null ? other$thousandsSeparatorValidationFailedMessage != null : !this$thousandsSeparatorValidationFailedMessage.equals(other$thousandsSeparatorValidationFailedMessage)) return false;
    final Object this$digitsAfterDecimalPointValidationFailedMessage = this.getDigitsAfterDecimalPointValidationFailedMessage();
    final Object other$digitsAfterDecimalPointValidationFailedMessage = other.getDigitsAfterDecimalPointValidationFailedMessage();
    if (this$digitsAfterDecimalPointValidationFailedMessage == null ? other$digitsAfterDecimalPointValidationFailedMessage != null : !this$digitsAfterDecimalPointValidationFailedMessage.equals(other$digitsAfterDecimalPointValidationFailedMessage)) return false;
    final Object this$helptext = this.getHelptext();
    final Object other$helptext = other.getHelptext();
    if (this$helptext == null ? other$helptext != null : !this$helptext.equals(other$helptext)) return false;
    final Object this$possibleValues = this.getPossibleValues();
    final Object other$possibleValues = other.getPossibleValues();
    if (this$possibleValues == null ? other$possibleValues != null : !this$possibleValues.equals(other$possibleValues)) return false;
    final Object this$displayConditions = this.getDisplayConditions();
    final Object other$displayConditions = other.getDisplayConditions();
    if (this$displayConditions == null ? other$displayConditions != null : !this$displayConditions.equals(other$displayConditions)) return false;
    final Object this$layout = this.getLayout();
    final Object other$layout = other.getLayout();
    if (this$layout == null ? other$layout != null : !this$layout.equals(other$layout)) return false;
    final Object this$validationRules = this.getValidationRules();
    final Object other$validationRules = other.getValidationRules();
    if (this$validationRules == null ? other$validationRules != null : !this$validationRules.equals(other$validationRules)) return false;
    final Object this$validationMessages = this.getValidationMessages();
    final Object other$validationMessages = other.getValidationMessages();
    if (this$validationMessages == null ? other$validationMessages != null : !this$validationMessages.equals(other$validationMessages)) return false;
    final Object this$source = this.getSource();
    final Object other$source = other.getSource();
    if (this$source == null ? other$source != null : !this$source.equals(other$source)) return false;
    final Object this$target = this.getTarget();
    final Object other$target = other.getTarget();
    if (this$target == null ? other$target != null : !this$target.equals(other$target)) return false;
    final Object this$possibleValuesSource = this.getPossibleValuesSource();
    final Object other$possibleValuesSource = other.getPossibleValuesSource();
    if (this$possibleValuesSource == null ? other$possibleValuesSource != null : !this$possibleValuesSource.equals(other$possibleValuesSource)) return false;
    final Object this$externalDataSourceProperties = this.getExternalDataSourceProperties();
    final Object other$externalDataSourceProperties = other.getExternalDataSourceProperties();
    if (this$externalDataSourceProperties == null ? other$externalDataSourceProperties != null : !this$externalDataSourceProperties.equals(other$externalDataSourceProperties)) return false;
    final Object this$externalValue = this.getExternalValue();
    final Object other$externalValue = other.getExternalValue();
    if (this$externalValue == null ? other$externalValue != null : !this$externalValue.equals(other$externalValue)) return false;
    final Object this$controlParameters = this.getControlParameters();
    final Object other$controlParameters = other.getControlParameters();
    if (this$controlParameters == null ? other$controlParameters != null : !this$controlParameters.equals(other$controlParameters)) return false;
    final Object this$initializeWithAdressField = this.getInitializeWithAdressField();
    final Object other$initializeWithAdressField = other.getInitializeWithAdressField();
    if (this$initializeWithAdressField == null ? other$initializeWithAdressField != null : !this$initializeWithAdressField.equals(other$initializeWithAdressField)) return false;
    final Object this$additionalConfig = this.getAdditionalConfig();
    final Object other$additionalConfig = other.getAdditionalConfig();
    if (this$additionalConfig == null ? other$additionalConfig != null : !this$additionalConfig.equals(other$additionalConfig)) return false;
    final Object this$helpDialog = this.getHelpDialog();
    final Object other$helpDialog = other.getHelpDialog();
    if (this$helpDialog == null ? other$helpDialog != null : !this$helpDialog.equals(other$helpDialog)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof FormFieldV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getWidth();
    final Object $disabled = this.getDisabled();
    result = result * PRIME + ($disabled == null ? 43 : $disabled.hashCode());
    final Object $required = this.getRequired();
    result = result * PRIME + ($required == null ? 43 : $required.hashCode());
    final Object $pickerDisabled = this.getPickerDisabled();
    result = result * PRIME + ($pickerDisabled == null ? 43 : $pickerDisabled.hashCode());
    final Object $consent = this.getConsent();
    result = result * PRIME + ($consent == null ? 43 : $consent.hashCode());
    final Object $filterable = this.getFilterable();
    result = result * PRIME + ($filterable == null ? 43 : $filterable.hashCode());
    final Object $id = this.getId();
    result = result * PRIME + ($id == null ? 43 : $id.hashCode());
    final Object $fimId = this.getFimId();
    result = result * PRIME + ($fimId == null ? 43 : $fimId.hashCode());
    final Object $label = this.getLabel();
    result = result * PRIME + ($label == null ? 43 : $label.hashCode());
    final Object $type = this.getType();
    result = result * PRIME + ($type == null ? 43 : $type.hashCode());
    final Object $value = this.getValue();
    result = result * PRIME + ($value == null ? 43 : $value.hashCode());
    final Object $placeholder = this.getPlaceholder();
    result = result * PRIME + ($placeholder == null ? 43 : $placeholder.hashCode());
    final Object $requiredValidationFailedMessage = this.getRequiredValidationFailedMessage();
    result = result * PRIME + ($requiredValidationFailedMessage == null ? 43 : $requiredValidationFailedMessage.hashCode());
    final Object $typeValidationFailedMessage = this.getTypeValidationFailedMessage();
    result = result * PRIME + ($typeValidationFailedMessage == null ? 43 : $typeValidationFailedMessage.hashCode());
    final Object $thousandsSeparatorValidationFailedMessage = this.getThousandsSeparatorValidationFailedMessage();
    result = result * PRIME + ($thousandsSeparatorValidationFailedMessage == null ? 43 : $thousandsSeparatorValidationFailedMessage.hashCode());
    final Object $digitsAfterDecimalPointValidationFailedMessage = this.getDigitsAfterDecimalPointValidationFailedMessage();
    result = result * PRIME + ($digitsAfterDecimalPointValidationFailedMessage == null ? 43 : $digitsAfterDecimalPointValidationFailedMessage.hashCode());
    final Object $helptext = this.getHelptext();
    result = result * PRIME + ($helptext == null ? 43 : $helptext.hashCode());
    final Object $possibleValues = this.getPossibleValues();
    result = result * PRIME + ($possibleValues == null ? 43 : $possibleValues.hashCode());
    final Object $displayConditions = this.getDisplayConditions();
    result = result * PRIME + ($displayConditions == null ? 43 : $displayConditions.hashCode());
    final Object $layout = this.getLayout();
    result = result * PRIME + ($layout == null ? 43 : $layout.hashCode());
    final Object $validationRules = this.getValidationRules();
    result = result * PRIME + ($validationRules == null ? 43 : $validationRules.hashCode());
    final Object $validationMessages = this.getValidationMessages();
    result = result * PRIME + ($validationMessages == null ? 43 : $validationMessages.hashCode());
    final Object $source = this.getSource();
    result = result * PRIME + ($source == null ? 43 : $source.hashCode());
    final Object $target = this.getTarget();
    result = result * PRIME + ($target == null ? 43 : $target.hashCode());
    final Object $possibleValuesSource = this.getPossibleValuesSource();
    result = result * PRIME + ($possibleValuesSource == null ? 43 : $possibleValuesSource.hashCode());
    final Object $externalDataSourceProperties = this.getExternalDataSourceProperties();
    result = result * PRIME + ($externalDataSourceProperties == null ? 43 : $externalDataSourceProperties.hashCode());
    final Object $externalValue = this.getExternalValue();
    result = result * PRIME + ($externalValue == null ? 43 : $externalValue.hashCode());
    final Object $controlParameters = this.getControlParameters();
    result = result * PRIME + ($controlParameters == null ? 43 : $controlParameters.hashCode());
    final Object $initializeWithAdressField = this.getInitializeWithAdressField();
    result = result * PRIME + ($initializeWithAdressField == null ? 43 : $initializeWithAdressField.hashCode());
    final Object $additionalConfig = this.getAdditionalConfig();
    result = result * PRIME + ($additionalConfig == null ? 43 : $additionalConfig.hashCode());
    final Object $helpDialog = this.getHelpDialog();
    result = result * PRIME + ($helpDialog == null ? 43 : $helpDialog.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "FormFieldV1(id=" + this.getId() + ", fimId=" + this.getFimId() + ", label=" + this.getLabel() + ", type=" + this.getType() + ", value=" + this.getValue() + ", placeholder=" + this.getPlaceholder() + ", disabled=" + this.getDisabled() + ", required=" + this.getRequired() + ", pickerDisabled=" + this.getPickerDisabled() + ", consent=" + this.getConsent() + ", requiredValidationFailedMessage=" + this.getRequiredValidationFailedMessage() + ", typeValidationFailedMessage=" + this.getTypeValidationFailedMessage() + ", thousandsSeparatorValidationFailedMessage=" + this.getThousandsSeparatorValidationFailedMessage() + ", digitsAfterDecimalPointValidationFailedMessage=" + this.getDigitsAfterDecimalPointValidationFailedMessage() + ", helptext=" + this.getHelptext() + ", possibleValues=" + this.getPossibleValues() + ", displayConditions=" + this.getDisplayConditions() + ", width=" + this.getWidth() + ", layout=" + this.getLayout() + ", validationRules=" + this.getValidationRules() + ", validationMessages=" + this.getValidationMessages() + ", source=" + this.getSource() + ", target=" + this.getTarget() + ", possibleValuesSource=" + this.getPossibleValuesSource() + ", externalDataSourceProperties=" + this.getExternalDataSourceProperties() + ", externalValue=" + this.getExternalValue() + ", filterable=" + this.getFilterable() + ", controlParameters=" + this.getControlParameters() + ", initializeWithAdressField=" + this.getInitializeWithAdressField() + ", additionalConfig=" + this.getAdditionalConfig() + ", helpDialog=" + this.getHelpDialog() + ")";
  }

  /**
   * Creates a new {@code FormFieldV1} instance.
   *
   * @param id ID des Feldes (eindeutig in Feldgruppen-Instanz).
   * @param fimId ID des Feldes als Datenfeld im FIM-Standard (Föderales Informationsmanagement).
   * @param label Beschriftung des Feldes.
   * @param type Typ des Feldes.
   * @param value Aktueller Wert des Feldes.
   * @param placeholder Platzhalter, falls Feld nicht ausgefüllt.
   * @param disabled {@code true}, wenn das Feld nicht editierbar / deaktiviert ist.
   * @param required {@code true}, wenn das Feld ein Pflichtfeld ist.
   * @param pickerDisabled {@code true}, wenn das Feld ein {@link FieldTypeV1#DATE Datum-Feld} ist und der grafische Picker des
   * Felds nicht angeboten werden soll.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDateConfigV1}
   * konfiguriert werden.
   * @param consent {@code true}, wenn das Feld ein Einwilligungsfeld ist.
   * @param requiredValidationFailedMessage Individueller Fehlertext - Pflichtfeld nicht ausgefüllt.
   * @param typeValidationFailedMessage Individueller Fehlertext - Inhalt passt nicht zum Datentyp des Feldes ({@link FieldTypeV1#DATE Datums-},
   * {@link FieldTypeV1#TIME Zeit-} oder {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   * @param thousandsSeparatorValidationFailedMessage Individueller Fehlertext - falsches Tausendertrennzeichen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * @param digitsAfterDecimalPointValidationFailedMessage Individueller Fehlertext - falsche Anzahl an Nachkommastellen (nur für
   * {@link FieldTypeV1#EURO_BETRAG Euro-Betragsfelder}).
   * Ab Formularversion 2 nicht mehr verwendbar.
   * @param helptext Hilfetext zum Feld.
   * @param possibleValues Mögliche Werte bei Auswahllisten.
   * @param displayConditions Bedingungen, über die das Feld dynamisch ein- oder ausgeblendet werden kann.
   * @param width Breite des Felds (die gesamte Formularbreite entspricht 12).
   * @param layout Layout (nur für {@link FieldTypeV1#CHECKBOX Checkbox-} und
   * {@link FieldTypeV1#RADIO_BUTTONS Radiobuttonfelder}).
   * Ab Formularversion 2 kann dieser Parameter nur noch über die entsprechende additionConfig
   * für das spezifische Feld konfiguriert werden:
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalBooleanConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalRadioButtonConfigV1}
   * - {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalCheckboxConfigV1}
   * @param validationRules Validierungsregeln für das Feld.
   * @param validationMessages Texte für die Fehlermeldungen bei einfacher Formularvalidierung.
   * @param source Quelle, aus der der Feldinhalt gelesen wird. Falls {@code null}, wird ggf. eine Default-source
   * verwendet.
   * @param target Ziel, in das der Feldinhalt geschrieben wird.
   * @param possibleValuesSource Quelle, aus der die Select-Items für das Formularfeld gelesen werden (es kann {@code null}
   * zurückgeliefert werden, dann werden die Defaultwerte aus diesem Objekt verwendet, sonst muss eine Liste
   * an PossibleValue Objekten zurückgegeben werden). Wenn {@code null}, dann werden die im Feld definierten
   * verwendet.
   * @param externalDataSourceProperties Properties für Felder, die AJAX-Calls absetzen.
   * Wenn {@code null}, werden die am Feld angegebenen Default Werte verwendet.
   * Für {@link FieldTypeV1#DOWNLOAD Download-} und {@link FieldTypeV1#PDF PDF-}Felder ein Pflichtattribut.
   * @param externalValue Gibt eine externe Quelle an, aus der der Wert des Formularfeldes in Abhängigkeiten von anderen Werten im
   * Formular berechnet wird. Wenn der Benutzer einen abhängigen Wert ändert, wird der Feldwert sofort ohne
   * Abschicken des Formulars neu berechnet (per Ajax-Call). Wenn das Feld disabled ist, wird es immer
   * aktualisiert, wenn nicht, wird der Wert nur dann aktualisiert, wenn der Wert vorher leer war.
   * @param filterable {@code true}, wenn das Feld ein Select-Feld ist und die Einträge auf der Oberfläche durch Texteingabe
   * filterbar sind.
   * Ab Formularversion 2 kann dieser Parameter nur noch über die additionalConfig für das
   * entsprechende Feld konfiguriert werden:
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectAjaxConfigV1}
   * - {@link
   * de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalDropdownSingleSelectConfigV1}
   * @param controlParameters Konfigurationsparameter für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder}.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 kann dieser Parameter nur noch über
   * {@link de.seitenbau.serviceportal.scripting.api.v1.form.config.AdditionalGeoMapConfigV1}
   * konfiguriert werden.
   * @param initializeWithAdressField Schlüssel des Feldes, das als Address-Suchfeld für {@link FieldTypeV1#GEO_MAP Geo-Datenfelder} dient.
   * Für andere Feldtypen {@code null}.
   * Ab Formularversion 2 nicht mehr verwendbar.
   * @param additionalConfig Ergänzende Informationen für spezielle Feldtypen (sonst {@code null}).
   * @param helpDialog Informationen zum Hilfe-Dialog, wenn ein Hilfe-Button angezeigt werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  private FormFieldV1(@NonNull final String id, final String fimId, final String label, @NonNull final FieldTypeV1 type, final Object value, final String placeholder, final Boolean disabled, final Boolean required, final Boolean pickerDisabled, final Boolean consent, final String requiredValidationFailedMessage, final String typeValidationFailedMessage, final String thousandsSeparatorValidationFailedMessage, final String digitsAfterDecimalPointValidationFailedMessage, final String helptext, final List<PossibleValueV1> possibleValues, @NonNull final List<DisplayConditionV1> displayConditions, final int width, final String layout, @NonNull final List<ValidationRuleV1> validationRules, @NonNull final Set<ValidationMessageV1> validationMessages, final DataResourcePointerV1 source, final DataResourcePointerV1 target, final DataResourcePointerV1 possibleValuesSource, final ExternalDataSourcePropertiesV1 externalDataSourceProperties, final ExternalDataSourcePropertiesV1 externalValue, final Boolean filterable, final Map<String, String> controlParameters, final FormFieldKeyV1 initializeWithAdressField, final AdditionalFieldConfigV1 additionalConfig, final ModalHelpDialogV1 helpDialog) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    if (type == null) {
      throw new NullPointerException("type is marked non-null but is null");
    }
    if (displayConditions == null) {
      throw new NullPointerException("displayConditions is marked non-null but is null");
    }
    if (validationRules == null) {
      throw new NullPointerException("validationRules is marked non-null but is null");
    }
    if (validationMessages == null) {
      throw new NullPointerException("validationMessages is marked non-null but is null");
    }
    this.id = id;
    this.fimId = fimId;
    this.label = label;
    this.type = type;
    this.value = value;
    this.placeholder = placeholder;
    this.disabled = disabled;
    this.required = required;
    this.pickerDisabled = pickerDisabled;
    this.consent = consent;
    this.requiredValidationFailedMessage = requiredValidationFailedMessage;
    this.typeValidationFailedMessage = typeValidationFailedMessage;
    this.thousandsSeparatorValidationFailedMessage = thousandsSeparatorValidationFailedMessage;
    this.digitsAfterDecimalPointValidationFailedMessage = digitsAfterDecimalPointValidationFailedMessage;
    this.helptext = helptext;
    this.possibleValues = possibleValues;
    this.displayConditions = displayConditions;
    this.width = width;
    this.layout = layout;
    this.validationRules = validationRules;
    this.validationMessages = validationMessages;
    this.source = source;
    this.target = target;
    this.possibleValuesSource = possibleValuesSource;
    this.externalDataSourceProperties = externalDataSourceProperties;
    this.externalValue = externalValue;
    this.filterable = filterable;
    this.controlParameters = controlParameters;
    this.initializeWithAdressField = initializeWithAdressField;
    this.additionalConfig = additionalConfig;
    this.helpDialog = helpDialog;
  }
}
