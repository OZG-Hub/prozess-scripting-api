// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

import java.math.BigDecimal;

/**
 * Validierungsregel, die prüft, dass ein Feldwert eine Zahl ist
 * und nicht kleiner als ein definiertes Minimum ist.
 */
public class MinNumberValueValidatorV1 extends ValidationRuleV1 {
  /**
   * Minimalwert, der nicht unterschritten werden darf.
   */
  private BigDecimal minValue;
  /**
   * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
   */
  private String validationInvalidNumberMessage;


  @SuppressWarnings("all")
  public static abstract class MinNumberValueValidatorV1Builder<C extends MinNumberValueValidatorV1, B extends MinNumberValueValidatorV1.MinNumberValueValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    private BigDecimal minValue;
    @SuppressWarnings("all")
    private String validationInvalidNumberMessage;

    /**
     * Minimalwert, der nicht unterschritten werden darf.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B minValue(final BigDecimal minValue) {
      this.minValue = minValue;
      return self();
    }

    /**
     * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B validationInvalidNumberMessage(final String validationInvalidNumberMessage) {
      this.validationInvalidNumberMessage = validationInvalidNumberMessage;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "MinNumberValueValidatorV1.MinNumberValueValidatorV1Builder(super=" + super.toString() + ", minValue=" + this.minValue + ", validationInvalidNumberMessage=" + this.validationInvalidNumberMessage + ")";
    }
  }


  @SuppressWarnings("all")
  private static final class MinNumberValueValidatorV1BuilderImpl extends MinNumberValueValidatorV1.MinNumberValueValidatorV1Builder<MinNumberValueValidatorV1, MinNumberValueValidatorV1.MinNumberValueValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    private MinNumberValueValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    protected MinNumberValueValidatorV1.MinNumberValueValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    public MinNumberValueValidatorV1 build() {
      return new MinNumberValueValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  protected MinNumberValueValidatorV1(final MinNumberValueValidatorV1.MinNumberValueValidatorV1Builder<?, ?> b) {
    super(b);
    this.minValue = b.minValue;
    this.validationInvalidNumberMessage = b.validationInvalidNumberMessage;
  }

  @SuppressWarnings("all")
  public static MinNumberValueValidatorV1.MinNumberValueValidatorV1Builder<?, ?> builder() {
    return new MinNumberValueValidatorV1.MinNumberValueValidatorV1BuilderImpl();
  }

  /**
   * Minimalwert, der nicht unterschritten werden darf.
   */
  @SuppressWarnings("all")
  public BigDecimal getMinValue() {
    return this.minValue;
  }

  /**
   * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
   */
  @SuppressWarnings("all")
  public String getValidationInvalidNumberMessage() {
    return this.validationInvalidNumberMessage;
  }

  /**
   * Minimalwert, der nicht unterschritten werden darf.
   */
  @SuppressWarnings("all")
  public void setMinValue(final BigDecimal minValue) {
    this.minValue = minValue;
  }

  /**
   * Benutzerdefinierter Fehlertext bei ungültiger Eingabe.
   */
  @SuppressWarnings("all")
  public void setValidationInvalidNumberMessage(final String validationInvalidNumberMessage) {
    this.validationInvalidNumberMessage = validationInvalidNumberMessage;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "MinNumberValueValidatorV1(minValue=" + this.getMinValue() + ", validationInvalidNumberMessage=" + this.getValidationInvalidNumberMessage() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof MinNumberValueValidatorV1)) return false;
    final MinNumberValueValidatorV1 other = (MinNumberValueValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$minValue = this.getMinValue();
    final Object other$minValue = other.getMinValue();
    if (this$minValue == null ? other$minValue != null : !this$minValue.equals(other$minValue)) return false;
    final Object this$validationInvalidNumberMessage = this.getValidationInvalidNumberMessage();
    final Object other$validationInvalidNumberMessage = other.getValidationInvalidNumberMessage();
    if (this$validationInvalidNumberMessage == null ? other$validationInvalidNumberMessage != null : !this$validationInvalidNumberMessage.equals(other$validationInvalidNumberMessage)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof MinNumberValueValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $minValue = this.getMinValue();
    result = result * PRIME + ($minValue == null ? 43 : $minValue.hashCode());
    final Object $validationInvalidNumberMessage = this.getValidationInvalidNumberMessage();
    result = result * PRIME + ($validationInvalidNumberMessage == null ? 43 : $validationInvalidNumberMessage.hashCode());
    return result;
  }
}
