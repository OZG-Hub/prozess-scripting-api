// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.content;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormFieldKeyV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.MessageTypeV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.ValidationMessageV1;
import lombok.NonNull;

/**
 * Inhalt eines Formulars.
 */
public class FormContentV1 {
  /**
   * ID des zugehörigen Formulars.
   */
  @NonNull
  private String formId;
  /**
   * Titel des zugehörigen Formulars. Wird nur zu Ausgabezwecken verwendet, überschreibt nicht den Titel des
   * Formulars, wenn der Content in ein Formular eingespielt wird.
   */
  private String formTitle;
  /**
   * Der Context dieser Formularinhaltsdaten. Dieser kann bspw. die Quelle der Daten oder Informationen über
   * den Bearbeiter der Daten beinhalten.
   */
  private Map<String, Object> context;
  /**
   * Enthält die Inhalte der Felder. Key der Map ist der String-Wert des {@link FormFieldKeyV1 FormFieldKeys}.
   * Default ist eine leere Map.
   */
  @NonNull
  private Map<String, FormFieldContentV1> fields;
  /**
   * Enthält die Texte der Validierungsmeldungen für das Formular insgesamt
   * (Die Validierungsmeldungen, die ein einzelnes Feld betreffen, sind NICHT enthalten).
   * Stammt der Content aus einem submitteten Formular, ist diese Liste immer leer
   * (Submit geht nur, wenn keine Validierungsfehler vorhanden sind
   * oder wenn keine Validierung durchgeführt wurde).
   * Default ist eine leere Liste.
   */
  @NonNull
  private List<ValidationMessageV1> validationMessages;
  /**
   * Wert des Custom-Buttons, der zum Submitten des Formulars gedrückt wurde.
   * {@code null}, wenn keine Custom-Buttons vorhanden.
   */
  private String pressedCustomButton;
  /**
   * Zeitpunkt der Erstellung des Objekts. Entspricht in etwa dem Zeitpunkt des Submits.
   */
  private Date createdOn;
  /**
   * Die Ersetzungswerte für Platzhalter in der Formulardefinition, die verwendet wurden, um die
   * Formulardefinition zu vervollständigen. Dient dazu, um aus der Formulardefinition mit Platzhaltern wieder
   * eine vollständige Formulardefinition machen zu können.
   */
  private FormReplacementValuesV1 appliedReplacements;

  /**
   * Erzeugt eine neue FormContent-Instanz für das Formular mit der gegebenen ID.
   *
   * @param formId ID eines Formulars, nicht {@code null}
   *
   * @throws NullPointerException Falls die gegebene Formular-ID {@code null} ist
   */
  public FormContentV1(@NonNull String formId) {
    if (formId == null) {
      throw new NullPointerException("formId is marked non-null but is null");
    }
    this.formId = formId;
    fields = new HashMap<>();
    validationMessages = new ArrayList<>();
  }

  /**
   * Gibt den Wert eines Feldes zurück.
   *
   * @param combinedFieldId String-Wert des {@link FormFieldKeyV1 FormFieldKeys}
   *
   * @return Wert des Feldes oder {@code null} falls das Feld nicht vorhanden ist
   */
  public Object getFieldValue(String combinedFieldId) {
    return fields.containsKey(combinedFieldId) ? fields.get(combinedFieldId).getValue() : null;
  }

  /**
   * Setzt den Wert eines Feldes. Falls das Feld noch nicht vorhanden ist, wird es zuerst angelegt.
   *
   * @param combinedFieldId String-Wert des {@link FormFieldKeyV1 FormFieldKeys}
   * @param value Wert der gesetzt wird
   */
  public void setFieldValue(String combinedFieldId, Object value) {
    fields.put(combinedFieldId, FormFieldContentV1.builder().value(value).build());
  }

  /**
   * Gibt die Liste der Validierungsmeldungen am Formular zurück. Der Typ der Validierungsmeldung wird
   * ignoriert.
   *
   * @return Liste der Validierungsmeldungen am Formular
   */
  public List<String> getValidationMessagesAsString() {
    return validationMessages.stream().map(ValidationMessageV1::getMessageText).collect(Collectors.toList());
  }

  /**
   * Der gegebene String wird als Validierungsmeldung vom Typ {@link MessageTypeV1#INTERNAL INTERNAL}
   * zu den Validierungsmeldungen des Formulars hinzugefügt.
   *
   * @param message Validierungsmeldung, die hinzugefügt wird
   */
  public void addValidationMessage(String message) {
    validationMessages.add(new ValidationMessageV1(MessageTypeV1.INTERNAL, message));
  }

  @SuppressWarnings("all")
  private static Map<String, FormFieldContentV1> $default$fields() {
    return new HashMap<>();
  }

  @SuppressWarnings("all")
  private static List<ValidationMessageV1> $default$validationMessages() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  public static class FormContentV1Builder {
    @SuppressWarnings("all")
    private String formId;
    @SuppressWarnings("all")
    private String formTitle;
    @SuppressWarnings("all")
    private Map<String, Object> context;
    @SuppressWarnings("all")
    private boolean fields$set;
    @SuppressWarnings("all")
    private Map<String, FormFieldContentV1> fields$value;
    @SuppressWarnings("all")
    private boolean validationMessages$set;
    @SuppressWarnings("all")
    private List<ValidationMessageV1> validationMessages$value;
    @SuppressWarnings("all")
    private String pressedCustomButton;
    @SuppressWarnings("all")
    private Date createdOn;
    @SuppressWarnings("all")
    private FormReplacementValuesV1 appliedReplacements;

    @SuppressWarnings("all")
    FormContentV1Builder() {
    }

    /**
     * ID des zugehörigen Formulars.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder formId(@NonNull final String formId) {
      if (formId == null) {
        throw new NullPointerException("formId is marked non-null but is null");
      }
      this.formId = formId;
      return this;
    }

    /**
     * Titel des zugehörigen Formulars. Wird nur zu Ausgabezwecken verwendet, überschreibt nicht den Titel des
     * Formulars, wenn der Content in ein Formular eingespielt wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder formTitle(final String formTitle) {
      this.formTitle = formTitle;
      return this;
    }

    /**
     * Der Context dieser Formularinhaltsdaten. Dieser kann bspw. die Quelle der Daten oder Informationen über
     * den Bearbeiter der Daten beinhalten.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder context(final Map<String, Object> context) {
      this.context = context;
      return this;
    }

    /**
     * Enthält die Inhalte der Felder. Key der Map ist der String-Wert des {@link FormFieldKeyV1 FormFieldKeys}.
     * Default ist eine leere Map.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder fields(@NonNull final Map<String, FormFieldContentV1> fields) {
      if (fields == null) {
        throw new NullPointerException("fields is marked non-null but is null");
      }
      this.fields$value = fields;
      fields$set = true;
      return this;
    }

    /**
     * Enthält die Texte der Validierungsmeldungen für das Formular insgesamt
     * (Die Validierungsmeldungen, die ein einzelnes Feld betreffen, sind NICHT enthalten).
     * Stammt der Content aus einem submitteten Formular, ist diese Liste immer leer
     * (Submit geht nur, wenn keine Validierungsfehler vorhanden sind
     * oder wenn keine Validierung durchgeführt wurde).
     * Default ist eine leere Liste.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder validationMessages(@NonNull final List<ValidationMessageV1> validationMessages) {
      if (validationMessages == null) {
        throw new NullPointerException("validationMessages is marked non-null but is null");
      }
      this.validationMessages$value = validationMessages;
      validationMessages$set = true;
      return this;
    }

    /**
     * Wert des Custom-Buttons, der zum Submitten des Formulars gedrückt wurde.
     * {@code null}, wenn keine Custom-Buttons vorhanden.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder pressedCustomButton(final String pressedCustomButton) {
      this.pressedCustomButton = pressedCustomButton;
      return this;
    }

    /**
     * Zeitpunkt der Erstellung des Objekts. Entspricht in etwa dem Zeitpunkt des Submits.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder createdOn(final Date createdOn) {
      this.createdOn = createdOn;
      return this;
    }

    /**
     * Die Ersetzungswerte für Platzhalter in der Formulardefinition, die verwendet wurden, um die
     * Formulardefinition zu vervollständigen. Dient dazu, um aus der Formulardefinition mit Platzhaltern wieder
     * eine vollständige Formulardefinition machen zu können.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormContentV1.FormContentV1Builder appliedReplacements(final FormReplacementValuesV1 appliedReplacements) {
      this.appliedReplacements = appliedReplacements;
      return this;
    }

    @SuppressWarnings("all")
    public FormContentV1 build() {
      Map<String, FormFieldContentV1> fields$value = this.fields$value;
      if (!this.fields$set) fields$value = FormContentV1.$default$fields();
      List<ValidationMessageV1> validationMessages$value = this.validationMessages$value;
      if (!this.validationMessages$set) validationMessages$value = FormContentV1.$default$validationMessages();
      return new FormContentV1(this.formId, this.formTitle, this.context, fields$value, validationMessages$value, this.pressedCustomButton, this.createdOn, this.appliedReplacements);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "FormContentV1.FormContentV1Builder(formId=" + this.formId + ", formTitle=" + this.formTitle + ", context=" + this.context + ", fields$value=" + this.fields$value + ", validationMessages$value=" + this.validationMessages$value + ", pressedCustomButton=" + this.pressedCustomButton + ", createdOn=" + this.createdOn + ", appliedReplacements=" + this.appliedReplacements + ")";
    }
  }

  @SuppressWarnings("all")
  public static FormContentV1.FormContentV1Builder builder() {
    return new FormContentV1.FormContentV1Builder();
  }

  /**
   * ID des zugehörigen Formulars.
   */
  @NonNull
  @SuppressWarnings("all")
  public String getFormId() {
    return this.formId;
  }

  /**
   * Titel des zugehörigen Formulars. Wird nur zu Ausgabezwecken verwendet, überschreibt nicht den Titel des
   * Formulars, wenn der Content in ein Formular eingespielt wird.
   */
  @SuppressWarnings("all")
  public String getFormTitle() {
    return this.formTitle;
  }

  /**
   * Der Context dieser Formularinhaltsdaten. Dieser kann bspw. die Quelle der Daten oder Informationen über
   * den Bearbeiter der Daten beinhalten.
   */
  @SuppressWarnings("all")
  public Map<String, Object> getContext() {
    return this.context;
  }

  /**
   * Enthält die Inhalte der Felder. Key der Map ist der String-Wert des {@link FormFieldKeyV1 FormFieldKeys}.
   * Default ist eine leere Map.
   */
  @NonNull
  @SuppressWarnings("all")
  public Map<String, FormFieldContentV1> getFields() {
    return this.fields;
  }

  /**
   * Enthält die Texte der Validierungsmeldungen für das Formular insgesamt
   * (Die Validierungsmeldungen, die ein einzelnes Feld betreffen, sind NICHT enthalten).
   * Stammt der Content aus einem submitteten Formular, ist diese Liste immer leer
   * (Submit geht nur, wenn keine Validierungsfehler vorhanden sind
   * oder wenn keine Validierung durchgeführt wurde).
   * Default ist eine leere Liste.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<ValidationMessageV1> getValidationMessages() {
    return this.validationMessages;
  }

  /**
   * Wert des Custom-Buttons, der zum Submitten des Formulars gedrückt wurde.
   * {@code null}, wenn keine Custom-Buttons vorhanden.
   */
  @SuppressWarnings("all")
  public String getPressedCustomButton() {
    return this.pressedCustomButton;
  }

  /**
   * Zeitpunkt der Erstellung des Objekts. Entspricht in etwa dem Zeitpunkt des Submits.
   */
  @SuppressWarnings("all")
  public Date getCreatedOn() {
    return this.createdOn;
  }

  /**
   * Die Ersetzungswerte für Platzhalter in der Formulardefinition, die verwendet wurden, um die
   * Formulardefinition zu vervollständigen. Dient dazu, um aus der Formulardefinition mit Platzhaltern wieder
   * eine vollständige Formulardefinition machen zu können.
   */
  @SuppressWarnings("all")
  public FormReplacementValuesV1 getAppliedReplacements() {
    return this.appliedReplacements;
  }

  /**
   * ID des zugehörigen Formulars.
   */
  @SuppressWarnings("all")
  public void setFormId(@NonNull final String formId) {
    if (formId == null) {
      throw new NullPointerException("formId is marked non-null but is null");
    }
    this.formId = formId;
  }

  /**
   * Titel des zugehörigen Formulars. Wird nur zu Ausgabezwecken verwendet, überschreibt nicht den Titel des
   * Formulars, wenn der Content in ein Formular eingespielt wird.
   */
  @SuppressWarnings("all")
  public void setFormTitle(final String formTitle) {
    this.formTitle = formTitle;
  }

  /**
   * Der Context dieser Formularinhaltsdaten. Dieser kann bspw. die Quelle der Daten oder Informationen über
   * den Bearbeiter der Daten beinhalten.
   */
  @SuppressWarnings("all")
  public void setContext(final Map<String, Object> context) {
    this.context = context;
  }

  /**
   * Enthält die Inhalte der Felder. Key der Map ist der String-Wert des {@link FormFieldKeyV1 FormFieldKeys}.
   * Default ist eine leere Map.
   */
  @SuppressWarnings("all")
  public void setFields(@NonNull final Map<String, FormFieldContentV1> fields) {
    if (fields == null) {
      throw new NullPointerException("fields is marked non-null but is null");
    }
    this.fields = fields;
  }

  /**
   * Enthält die Texte der Validierungsmeldungen für das Formular insgesamt
   * (Die Validierungsmeldungen, die ein einzelnes Feld betreffen, sind NICHT enthalten).
   * Stammt der Content aus einem submitteten Formular, ist diese Liste immer leer
   * (Submit geht nur, wenn keine Validierungsfehler vorhanden sind
   * oder wenn keine Validierung durchgeführt wurde).
   * Default ist eine leere Liste.
   */
  @SuppressWarnings("all")
  public void setValidationMessages(@NonNull final List<ValidationMessageV1> validationMessages) {
    if (validationMessages == null) {
      throw new NullPointerException("validationMessages is marked non-null but is null");
    }
    this.validationMessages = validationMessages;
  }

  /**
   * Wert des Custom-Buttons, der zum Submitten des Formulars gedrückt wurde.
   * {@code null}, wenn keine Custom-Buttons vorhanden.
   */
  @SuppressWarnings("all")
  public void setPressedCustomButton(final String pressedCustomButton) {
    this.pressedCustomButton = pressedCustomButton;
  }

  /**
   * Zeitpunkt der Erstellung des Objekts. Entspricht in etwa dem Zeitpunkt des Submits.
   */
  @SuppressWarnings("all")
  public void setCreatedOn(final Date createdOn) {
    this.createdOn = createdOn;
  }

  /**
   * Die Ersetzungswerte für Platzhalter in der Formulardefinition, die verwendet wurden, um die
   * Formulardefinition zu vervollständigen. Dient dazu, um aus der Formulardefinition mit Platzhaltern wieder
   * eine vollständige Formulardefinition machen zu können.
   */
  @SuppressWarnings("all")
  public void setAppliedReplacements(final FormReplacementValuesV1 appliedReplacements) {
    this.appliedReplacements = appliedReplacements;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof FormContentV1)) return false;
    final FormContentV1 other = (FormContentV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$formId = this.getFormId();
    final Object other$formId = other.getFormId();
    if (this$formId == null ? other$formId != null : !this$formId.equals(other$formId)) return false;
    final Object this$formTitle = this.getFormTitle();
    final Object other$formTitle = other.getFormTitle();
    if (this$formTitle == null ? other$formTitle != null : !this$formTitle.equals(other$formTitle)) return false;
    final Object this$context = this.getContext();
    final Object other$context = other.getContext();
    if (this$context == null ? other$context != null : !this$context.equals(other$context)) return false;
    final Object this$fields = this.getFields();
    final Object other$fields = other.getFields();
    if (this$fields == null ? other$fields != null : !this$fields.equals(other$fields)) return false;
    final Object this$validationMessages = this.getValidationMessages();
    final Object other$validationMessages = other.getValidationMessages();
    if (this$validationMessages == null ? other$validationMessages != null : !this$validationMessages.equals(other$validationMessages)) return false;
    final Object this$pressedCustomButton = this.getPressedCustomButton();
    final Object other$pressedCustomButton = other.getPressedCustomButton();
    if (this$pressedCustomButton == null ? other$pressedCustomButton != null : !this$pressedCustomButton.equals(other$pressedCustomButton)) return false;
    final Object this$createdOn = this.getCreatedOn();
    final Object other$createdOn = other.getCreatedOn();
    if (this$createdOn == null ? other$createdOn != null : !this$createdOn.equals(other$createdOn)) return false;
    final Object this$appliedReplacements = this.getAppliedReplacements();
    final Object other$appliedReplacements = other.getAppliedReplacements();
    if (this$appliedReplacements == null ? other$appliedReplacements != null : !this$appliedReplacements.equals(other$appliedReplacements)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof FormContentV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $formId = this.getFormId();
    result = result * PRIME + ($formId == null ? 43 : $formId.hashCode());
    final Object $formTitle = this.getFormTitle();
    result = result * PRIME + ($formTitle == null ? 43 : $formTitle.hashCode());
    final Object $context = this.getContext();
    result = result * PRIME + ($context == null ? 43 : $context.hashCode());
    final Object $fields = this.getFields();
    result = result * PRIME + ($fields == null ? 43 : $fields.hashCode());
    final Object $validationMessages = this.getValidationMessages();
    result = result * PRIME + ($validationMessages == null ? 43 : $validationMessages.hashCode());
    final Object $pressedCustomButton = this.getPressedCustomButton();
    result = result * PRIME + ($pressedCustomButton == null ? 43 : $pressedCustomButton.hashCode());
    final Object $createdOn = this.getCreatedOn();
    result = result * PRIME + ($createdOn == null ? 43 : $createdOn.hashCode());
    final Object $appliedReplacements = this.getAppliedReplacements();
    result = result * PRIME + ($appliedReplacements == null ? 43 : $appliedReplacements.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "FormContentV1(formId=" + this.getFormId() + ", formTitle=" + this.getFormTitle() + ", context=" + this.getContext() + ", fields=" + this.getFields() + ", validationMessages=" + this.getValidationMessages() + ", pressedCustomButton=" + this.getPressedCustomButton() + ", createdOn=" + this.getCreatedOn() + ", appliedReplacements=" + this.getAppliedReplacements() + ")";
  }

  @SuppressWarnings("all")
  private FormContentV1(@NonNull final String formId, final String formTitle, final Map<String, Object> context, @NonNull final Map<String, FormFieldContentV1> fields, @NonNull final List<ValidationMessageV1> validationMessages, final String pressedCustomButton, final Date createdOn, final FormReplacementValuesV1 appliedReplacements) {
    if (formId == null) {
      throw new NullPointerException("formId is marked non-null but is null");
    }
    if (fields == null) {
      throw new NullPointerException("fields is marked non-null but is null");
    }
    if (validationMessages == null) {
      throw new NullPointerException("validationMessages is marked non-null but is null");
    }
    this.formId = formId;
    this.formTitle = formTitle;
    this.context = context;
    this.fields = fields;
    this.validationMessages = validationMessages;
    this.pressedCustomButton = pressedCustomButton;
    this.createdOn = createdOn;
    this.appliedReplacements = appliedReplacements;
  }
}
