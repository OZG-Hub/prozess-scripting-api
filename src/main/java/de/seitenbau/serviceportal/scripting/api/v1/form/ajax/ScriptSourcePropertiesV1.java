// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.ajax;

import java.util.ArrayList;
import java.util.List;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormFieldKeyV1;
import lombok.NonNull;

/**
 * Klasse zur Konfiguration von Skript-Ausführungen.
 */
public class ScriptSourcePropertiesV1 implements DynamicDataSourcePropertiesV1, Cloneable {
  /**
   * Skript, das ausgeführt werden soll
   */
  private String script;
  /**
   * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   */
  @NonNull
  private AjaxRequestIncludedFieldsScopeV1 scope;
  /**
   * Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  private List<FormFieldKeyV1> fieldIds;

  @Override
  public ScriptSourcePropertiesV1 clone() {
    ScriptSourcePropertiesV1 result;
    try {
      result = (ScriptSourcePropertiesV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    result.copy(this);
    return result;
  }

  private void copy(ScriptSourcePropertiesV1 toCopy) {
    this.script = toCopy.script;
    this.scope = toCopy.scope;
    if (toCopy.getFieldIds() != null) {
      this.fieldIds = new ArrayList<>(toCopy.getFieldIds());
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static class ScriptSourcePropertiesV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private String script;
    @SuppressWarnings("all")
    @lombok.Generated
    private AjaxRequestIncludedFieldsScopeV1 scope;
    @SuppressWarnings("all")
    @lombok.Generated
    private List<FormFieldKeyV1> fieldIds;

    @SuppressWarnings("all")
    @lombok.Generated
    ScriptSourcePropertiesV1Builder() {
    }

    /**
     * Skript, das ausgeführt werden soll
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public ScriptSourcePropertiesV1.ScriptSourcePropertiesV1Builder script(final String script) {
      this.script = script;
      return this;
    }

    /**
     * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
     * bestimmt werden sollen.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public ScriptSourcePropertiesV1.ScriptSourcePropertiesV1Builder scope(@NonNull final AjaxRequestIncludedFieldsScopeV1 scope) {
      if (scope == null) {
        throw new NullPointerException("scope is marked non-null but is null");
      }
      this.scope = scope;
      return this;
    }

    /**
     * Liste mit IDs von explizit definierten Felder, falls Scope
     * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public ScriptSourcePropertiesV1.ScriptSourcePropertiesV1Builder fieldIds(final List<FormFieldKeyV1> fieldIds) {
      this.fieldIds = fieldIds;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public ScriptSourcePropertiesV1 build() {
      return new ScriptSourcePropertiesV1(this.script, this.scope, this.fieldIds);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "ScriptSourcePropertiesV1.ScriptSourcePropertiesV1Builder(script=" + this.script + ", scope=" + this.scope + ", fieldIds=" + this.fieldIds + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static ScriptSourcePropertiesV1.ScriptSourcePropertiesV1Builder builder() {
    return new ScriptSourcePropertiesV1.ScriptSourcePropertiesV1Builder();
  }

  /**
   * Skript, das ausgeführt werden soll
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getScript() {
    return this.script;
  }

  /**
   * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   */
  @NonNull
  @SuppressWarnings("all")
  @lombok.Generated
  public AjaxRequestIncludedFieldsScopeV1 getScope() {
    return this.scope;
  }

  /**
   * Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public List<FormFieldKeyV1> getFieldIds() {
    return this.fieldIds;
  }

  /**
   * Skript, das ausgeführt werden soll
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setScript(final String script) {
    this.script = script;
  }

  /**
   * Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setScope(@NonNull final AjaxRequestIncludedFieldsScopeV1 scope) {
    if (scope == null) {
      throw new NullPointerException("scope is marked non-null but is null");
    }
    this.scope = scope;
  }

  /**
   * Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setFieldIds(final List<FormFieldKeyV1> fieldIds) {
    this.fieldIds = fieldIds;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof ScriptSourcePropertiesV1)) return false;
    final ScriptSourcePropertiesV1 other = (ScriptSourcePropertiesV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$script = this.getScript();
    final Object other$script = other.getScript();
    if (this$script == null ? other$script != null : !this$script.equals(other$script)) return false;
    final Object this$scope = this.getScope();
    final Object other$scope = other.getScope();
    if (this$scope == null ? other$scope != null : !this$scope.equals(other$scope)) return false;
    final Object this$fieldIds = this.getFieldIds();
    final Object other$fieldIds = other.getFieldIds();
    if (this$fieldIds == null ? other$fieldIds != null : !this$fieldIds.equals(other$fieldIds)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof ScriptSourcePropertiesV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $script = this.getScript();
    result = result * PRIME + ($script == null ? 43 : $script.hashCode());
    final Object $scope = this.getScope();
    result = result * PRIME + ($scope == null ? 43 : $scope.hashCode());
    final Object $fieldIds = this.getFieldIds();
    result = result * PRIME + ($fieldIds == null ? 43 : $fieldIds.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "ScriptSourcePropertiesV1(script=" + this.getScript() + ", scope=" + this.getScope() + ", fieldIds=" + this.getFieldIds() + ")";
  }

  /**
   * Creates a new {@code ScriptSourcePropertiesV1} instance.
   *
   * @param script Skript, das ausgeführt werden soll
   * @param scope Typ, der definiert, auf welche Art und Weise die Felder, deren Werte mitgeschickt werden,
   * bestimmt werden sollen.
   * @param fieldIds Liste mit IDs von explizit definierten Felder, falls Scope
   * {@link AjaxRequestIncludedFieldsScopeV1#DEFINED DEFINED} ist.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  private ScriptSourcePropertiesV1(final String script, @NonNull final AjaxRequestIncludedFieldsScopeV1 scope, final List<FormFieldKeyV1> fieldIds) {
    if (scope == null) {
      throw new NullPointerException("scope is marked non-null but is null");
    }
    this.script = script;
    this.scope = scope;
    this.fieldIds = fieldIds;
  }
}
