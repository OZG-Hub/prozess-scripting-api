// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

/**
 * Abstrakte Elternklasse für alle Validierungsregeln.
 */
public abstract class ValidationRuleV1 implements Cloneable {
  /**
   * Optionale benutzerdefinierte Fehlermeldung, falls Validierung fehlschlägt.
   */
  protected String validationErrorMessage;

  @Override
  public ValidationRuleV1 clone() {
    try {
      return (ValidationRuleV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class ValidationRuleV1Builder<C extends ValidationRuleV1, B extends ValidationRuleV1.ValidationRuleV1Builder<C, B>> {
    @SuppressWarnings("all")
    @lombok.Generated
    private String validationErrorMessage;

    /**
     * Optionale benutzerdefinierte Fehlermeldung, falls Validierung fehlschlägt.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B validationErrorMessage(final String validationErrorMessage) {
      this.validationErrorMessage = validationErrorMessage;
      return self();
    }

    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "ValidationRuleV1.ValidationRuleV1Builder(validationErrorMessage=" + this.validationErrorMessage + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected ValidationRuleV1(final ValidationRuleV1.ValidationRuleV1Builder<?, ?> b) {
    this.validationErrorMessage = b.validationErrorMessage;
  }

  /**
   * Optionale benutzerdefinierte Fehlermeldung, falls Validierung fehlschlägt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getValidationErrorMessage() {
    return this.validationErrorMessage;
  }

  /**
   * Optionale benutzerdefinierte Fehlermeldung, falls Validierung fehlschlägt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValidationErrorMessage(final String validationErrorMessage) {
    this.validationErrorMessage = validationErrorMessage;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof ValidationRuleV1)) return false;
    final ValidationRuleV1 other = (ValidationRuleV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$validationErrorMessage = this.getValidationErrorMessage();
    final Object other$validationErrorMessage = other.getValidationErrorMessage();
    if (this$validationErrorMessage == null ? other$validationErrorMessage != null : !this$validationErrorMessage.equals(other$validationErrorMessage)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof ValidationRuleV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $validationErrorMessage = this.getValidationErrorMessage();
    result = result * PRIME + ($validationErrorMessage == null ? 43 : $validationErrorMessage.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "ValidationRuleV1(validationErrorMessage=" + this.getValidationErrorMessage() + ")";
  }
}
