// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

/**
 * Validierungsregel, die pr√ºft, dass ein Feldwert eine Zahl ist.
 */
public class NumberValidatorV1 extends ValidationRuleV1 {
  /**
   * {@code true}, wenn die Zahl nicht negativ sein darf.
   */
  private Boolean nonNegative;
  /**
   * Maximale Anzahl an Dezimalstellen.
   */
  private Integer digitsAfterDecimalPoint;
  /**
   * Der benutzerdefinierte Fehlertext bei zu vielen Dezimalstellen.
   */
  private String validationDecimalPointError;
  /**
   * Der benutzerdefinierte Fehlertext bei Verwendung einer negativen Zahl.
   */
  private String validationNonNegativeNumberError;


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class NumberValidatorV1Builder<C extends NumberValidatorV1, B extends NumberValidatorV1.NumberValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private Boolean nonNegative;
    @SuppressWarnings("all")
    @lombok.Generated
    private Integer digitsAfterDecimalPoint;
    @SuppressWarnings("all")
    @lombok.Generated
    private String validationDecimalPointError;
    @SuppressWarnings("all")
    @lombok.Generated
    private String validationNonNegativeNumberError;

    /**
     * {@code true}, wenn die Zahl nicht negativ sein darf.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B nonNegative(final Boolean nonNegative) {
      this.nonNegative = nonNegative;
      return self();
    }

    /**
     * Maximale Anzahl an Dezimalstellen.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B digitsAfterDecimalPoint(final Integer digitsAfterDecimalPoint) {
      this.digitsAfterDecimalPoint = digitsAfterDecimalPoint;
      return self();
    }

    /**
     * Der benutzerdefinierte Fehlertext bei zu vielen Dezimalstellen.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B validationDecimalPointError(final String validationDecimalPointError) {
      this.validationDecimalPointError = validationDecimalPointError;
      return self();
    }

    /**
     * Der benutzerdefinierte Fehlertext bei Verwendung einer negativen Zahl.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B validationNonNegativeNumberError(final String validationNonNegativeNumberError) {
      this.validationNonNegativeNumberError = validationNonNegativeNumberError;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "NumberValidatorV1.NumberValidatorV1Builder(super=" + super.toString() + ", nonNegative=" + this.nonNegative + ", digitsAfterDecimalPoint=" + this.digitsAfterDecimalPoint + ", validationDecimalPointError=" + this.validationDecimalPointError + ", validationNonNegativeNumberError=" + this.validationNonNegativeNumberError + ")";
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  private static final class NumberValidatorV1BuilderImpl extends NumberValidatorV1.NumberValidatorV1Builder<NumberValidatorV1, NumberValidatorV1.NumberValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    @lombok.Generated
    private NumberValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected NumberValidatorV1.NumberValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public NumberValidatorV1 build() {
      return new NumberValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected NumberValidatorV1(final NumberValidatorV1.NumberValidatorV1Builder<?, ?> b) {
    super(b);
    this.nonNegative = b.nonNegative;
    this.digitsAfterDecimalPoint = b.digitsAfterDecimalPoint;
    this.validationDecimalPointError = b.validationDecimalPointError;
    this.validationNonNegativeNumberError = b.validationNonNegativeNumberError;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static NumberValidatorV1.NumberValidatorV1Builder<?, ?> builder() {
    return new NumberValidatorV1.NumberValidatorV1BuilderImpl();
  }

  /**
   * {@code true}, wenn die Zahl nicht negativ sein darf.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Boolean getNonNegative() {
    return this.nonNegative;
  }

  /**
   * Maximale Anzahl an Dezimalstellen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Integer getDigitsAfterDecimalPoint() {
    return this.digitsAfterDecimalPoint;
  }

  /**
   * Der benutzerdefinierte Fehlertext bei zu vielen Dezimalstellen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getValidationDecimalPointError() {
    return this.validationDecimalPointError;
  }

  /**
   * Der benutzerdefinierte Fehlertext bei Verwendung einer negativen Zahl.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getValidationNonNegativeNumberError() {
    return this.validationNonNegativeNumberError;
  }

  /**
   * {@code true}, wenn die Zahl nicht negativ sein darf.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setNonNegative(final Boolean nonNegative) {
    this.nonNegative = nonNegative;
  }

  /**
   * Maximale Anzahl an Dezimalstellen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setDigitsAfterDecimalPoint(final Integer digitsAfterDecimalPoint) {
    this.digitsAfterDecimalPoint = digitsAfterDecimalPoint;
  }

  /**
   * Der benutzerdefinierte Fehlertext bei zu vielen Dezimalstellen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValidationDecimalPointError(final String validationDecimalPointError) {
    this.validationDecimalPointError = validationDecimalPointError;
  }

  /**
   * Der benutzerdefinierte Fehlertext bei Verwendung einer negativen Zahl.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setValidationNonNegativeNumberError(final String validationNonNegativeNumberError) {
    this.validationNonNegativeNumberError = validationNonNegativeNumberError;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "NumberValidatorV1(nonNegative=" + this.getNonNegative() + ", digitsAfterDecimalPoint=" + this.getDigitsAfterDecimalPoint() + ", validationDecimalPointError=" + this.getValidationDecimalPointError() + ", validationNonNegativeNumberError=" + this.getValidationNonNegativeNumberError() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof NumberValidatorV1)) return false;
    final NumberValidatorV1 other = (NumberValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$nonNegative = this.getNonNegative();
    final Object other$nonNegative = other.getNonNegative();
    if (this$nonNegative == null ? other$nonNegative != null : !this$nonNegative.equals(other$nonNegative)) return false;
    final Object this$digitsAfterDecimalPoint = this.getDigitsAfterDecimalPoint();
    final Object other$digitsAfterDecimalPoint = other.getDigitsAfterDecimalPoint();
    if (this$digitsAfterDecimalPoint == null ? other$digitsAfterDecimalPoint != null : !this$digitsAfterDecimalPoint.equals(other$digitsAfterDecimalPoint)) return false;
    final Object this$validationDecimalPointError = this.getValidationDecimalPointError();
    final Object other$validationDecimalPointError = other.getValidationDecimalPointError();
    if (this$validationDecimalPointError == null ? other$validationDecimalPointError != null : !this$validationDecimalPointError.equals(other$validationDecimalPointError)) return false;
    final Object this$validationNonNegativeNumberError = this.getValidationNonNegativeNumberError();
    final Object other$validationNonNegativeNumberError = other.getValidationNonNegativeNumberError();
    if (this$validationNonNegativeNumberError == null ? other$validationNonNegativeNumberError != null : !this$validationNonNegativeNumberError.equals(other$validationNonNegativeNumberError)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof NumberValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $nonNegative = this.getNonNegative();
    result = result * PRIME + ($nonNegative == null ? 43 : $nonNegative.hashCode());
    final Object $digitsAfterDecimalPoint = this.getDigitsAfterDecimalPoint();
    result = result * PRIME + ($digitsAfterDecimalPoint == null ? 43 : $digitsAfterDecimalPoint.hashCode());
    final Object $validationDecimalPointError = this.getValidationDecimalPointError();
    result = result * PRIME + ($validationDecimalPointError == null ? 43 : $validationDecimalPointError.hashCode());
    final Object $validationNonNegativeNumberError = this.getValidationNonNegativeNumberError();
    result = result * PRIME + ($validationNonNegativeNumberError == null ? 43 : $validationNonNegativeNumberError.hashCode());
    return result;
  }
}
