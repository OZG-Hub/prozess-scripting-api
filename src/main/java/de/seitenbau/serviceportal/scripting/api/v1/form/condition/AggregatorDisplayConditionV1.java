// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.condition;

import java.util.ArrayList;
import java.util.List;

/**
 * Abstrakte Elternklasse f√ºr komplexe Sichtbarkeitsbedingungen.
 */
public abstract class AggregatorDisplayConditionV1 extends DisplayConditionV1 {
  /**
   * Liste der Sichtbarkeitsbedingungen, die in dieser Sichtbarkeitsbedingung enthalten sind.
   */
  private List<DisplayConditionV1> conditions;

  @SuppressWarnings("all")
  private static List<DisplayConditionV1> $default$conditions() {
    return new ArrayList<>();
  }


  @SuppressWarnings("all")
  public static abstract class AggregatorDisplayConditionV1Builder<C extends AggregatorDisplayConditionV1, B extends AggregatorDisplayConditionV1.AggregatorDisplayConditionV1Builder<C, B>> extends DisplayConditionV1.DisplayConditionV1Builder<C, B> {
    @SuppressWarnings("all")
    private boolean conditions$set;
    @SuppressWarnings("all")
    private List<DisplayConditionV1> conditions$value;

    /**
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public B conditions(final List<DisplayConditionV1> conditions) {
      this.conditions$value = conditions;
      conditions$set = true;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "AggregatorDisplayConditionV1.AggregatorDisplayConditionV1Builder(super=" + super.toString() + ", conditions$value=" + this.conditions$value + ")";
    }
  }

  @SuppressWarnings("all")
  protected AggregatorDisplayConditionV1(final AggregatorDisplayConditionV1.AggregatorDisplayConditionV1Builder<?, ?> b) {
    super(b);
    if (b.conditions$set) this.conditions = b.conditions$value;
     else this.conditions = AggregatorDisplayConditionV1.$default$conditions();
  }

  /**
   * Liste der Sichtbarkeitsbedingungen, die in dieser Sichtbarkeitsbedingung enthalten sind.
   */
  @SuppressWarnings("all")
  public List<DisplayConditionV1> getConditions() {
    return this.conditions;
  }

  /**
   * Liste der Sichtbarkeitsbedingungen, die in dieser Sichtbarkeitsbedingung enthalten sind.
   */
  @SuppressWarnings("all")
  public void setConditions(final List<DisplayConditionV1> conditions) {
    this.conditions = conditions;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "AggregatorDisplayConditionV1(conditions=" + this.getConditions() + ")";
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof AggregatorDisplayConditionV1)) return false;
    final AggregatorDisplayConditionV1 other = (AggregatorDisplayConditionV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$conditions = this.getConditions();
    final Object other$conditions = other.getConditions();
    if (this$conditions == null ? other$conditions != null : !this$conditions.equals(other$conditions)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof AggregatorDisplayConditionV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $conditions = this.getConditions();
    result = result * PRIME + ($conditions == null ? 43 : $conditions.hashCode());
    return result;
  }

  @SuppressWarnings("all")
  public AggregatorDisplayConditionV1() {
    this.conditions = AggregatorDisplayConditionV1.$default$conditions();
  }
}
