// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form;

import java.util.ArrayList;
import java.util.List;
import de.seitenbau.serviceportal.scripting.api.v1.form.condition.DisplayConditionV1;
import lombok.NonNull;

/**
 * Medien-Akkordeon in einem Formular.
 * <p>
 * Das Medien-Akkordeon ist eine spezielle Feldgruppe. Die Feldgruppe besteht aus mehreren
 * Akkordeon-Elementen, die wiederum die Felder enthalten. Bei den Feldern handelt es sich ausschließlich
 * um Felder der Typen {@link FieldTypeV1#H1 H1}, {@link FieldTypeV1#H2 H2}, {@link FieldTypeV1#TEXT TEXT},
 * {@link FieldTypeV1#IMAGE IMAGE}, und {@link FieldTypeV1#VIDEO VIDEO}. Jedes Feld hat die maximale Breite.
 */
public class MediaAccordionV1 implements FieldGroupInterfaceV1 {
  /**
   * ID des Medien-Akkordeons.
   */
  @NonNull
  private String id;
  /**
   * Überschrift der Feldgruppe.
   */
  private String title;
  /**
   * Akkordeon-Elemente des Akkordeons. Diese enthalten die Formularfelder.
   */
  @NonNull
  private List<MediaAccordionElementV1> elements;
  /**
   * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
   * Default ist eine leere Liste.
   */
  @NonNull
  private List<DisplayConditionV1> displayConditions;

  @SuppressWarnings("all")
  private static List<MediaAccordionElementV1> $default$elements() {
    return new ArrayList<>();
  }

  @SuppressWarnings("all")
  private static List<DisplayConditionV1> $default$displayConditions() {
    return new ArrayList<>();
  }

  @SuppressWarnings("all")
  MediaAccordionV1(@NonNull final String id, final String title, @NonNull final List<MediaAccordionElementV1> elements, @NonNull final List<DisplayConditionV1> displayConditions) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    if (elements == null) {
      throw new NullPointerException("elements is marked non-null but is null");
    }
    if (displayConditions == null) {
      throw new NullPointerException("displayConditions is marked non-null but is null");
    }
    this.id = id;
    this.title = title;
    this.elements = elements;
    this.displayConditions = displayConditions;
  }


  @SuppressWarnings("all")
  public static class MediaAccordionV1Builder {
    @SuppressWarnings("all")
    private String id;
    @SuppressWarnings("all")
    private String title;
    @SuppressWarnings("all")
    private boolean elements$set;
    @SuppressWarnings("all")
    private List<MediaAccordionElementV1> elements$value;
    @SuppressWarnings("all")
    private boolean displayConditions$set;
    @SuppressWarnings("all")
    private List<DisplayConditionV1> displayConditions$value;

    @SuppressWarnings("all")
    MediaAccordionV1Builder() {
    }

    /**
     * ID des Medien-Akkordeons.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public MediaAccordionV1.MediaAccordionV1Builder id(@NonNull final String id) {
      if (id == null) {
        throw new NullPointerException("id is marked non-null but is null");
      }
      this.id = id;
      return this;
    }

    /**
     * Überschrift der Feldgruppe.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public MediaAccordionV1.MediaAccordionV1Builder title(final String title) {
      this.title = title;
      return this;
    }

    /**
     * Akkordeon-Elemente des Akkordeons. Diese enthalten die Formularfelder.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public MediaAccordionV1.MediaAccordionV1Builder elements(@NonNull final List<MediaAccordionElementV1> elements) {
      if (elements == null) {
        throw new NullPointerException("elements is marked non-null but is null");
      }
      this.elements$value = elements;
      elements$set = true;
      return this;
    }

    /**
     * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
     * Default ist eine leere Liste.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public MediaAccordionV1.MediaAccordionV1Builder displayConditions(@NonNull final List<DisplayConditionV1> displayConditions) {
      if (displayConditions == null) {
        throw new NullPointerException("displayConditions is marked non-null but is null");
      }
      this.displayConditions$value = displayConditions;
      displayConditions$set = true;
      return this;
    }

    @SuppressWarnings("all")
    public MediaAccordionV1 build() {
      List<MediaAccordionElementV1> elements$value = this.elements$value;
      if (!this.elements$set) elements$value = MediaAccordionV1.$default$elements();
      List<DisplayConditionV1> displayConditions$value = this.displayConditions$value;
      if (!this.displayConditions$set) displayConditions$value = MediaAccordionV1.$default$displayConditions();
      return new MediaAccordionV1(this.id, this.title, elements$value, displayConditions$value);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "MediaAccordionV1.MediaAccordionV1Builder(id=" + this.id + ", title=" + this.title + ", elements$value=" + this.elements$value + ", displayConditions$value=" + this.displayConditions$value + ")";
    }
  }

  @SuppressWarnings("all")
  public static MediaAccordionV1.MediaAccordionV1Builder builder() {
    return new MediaAccordionV1.MediaAccordionV1Builder();
  }

  /**
   * ID des Medien-Akkordeons.
   */
  @NonNull
  @SuppressWarnings("all")
  public String getId() {
    return this.id;
  }

  /**
   * Überschrift der Feldgruppe.
   */
  @SuppressWarnings("all")
  public String getTitle() {
    return this.title;
  }

  /**
   * Akkordeon-Elemente des Akkordeons. Diese enthalten die Formularfelder.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<MediaAccordionElementV1> getElements() {
    return this.elements;
  }

  /**
   * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
   * Default ist eine leere Liste.
   */
  @NonNull
  @SuppressWarnings("all")
  public List<DisplayConditionV1> getDisplayConditions() {
    return this.displayConditions;
  }

  /**
   * ID des Medien-Akkordeons.
   */
  @SuppressWarnings("all")
  public void setId(@NonNull final String id) {
    if (id == null) {
      throw new NullPointerException("id is marked non-null but is null");
    }
    this.id = id;
  }

  /**
   * Überschrift der Feldgruppe.
   */
  @SuppressWarnings("all")
  public void setTitle(final String title) {
    this.title = title;
  }

  /**
   * Akkordeon-Elemente des Akkordeons. Diese enthalten die Formularfelder.
   */
  @SuppressWarnings("all")
  public void setElements(@NonNull final List<MediaAccordionElementV1> elements) {
    if (elements == null) {
      throw new NullPointerException("elements is marked non-null but is null");
    }
    this.elements = elements;
  }

  /**
   * Sichtbarkeitsbedingungen, über die die Feldgruppe dynamisch ein- oder ausgeblendet werden kann.
   * Default ist eine leere Liste.
   */
  @SuppressWarnings("all")
  public void setDisplayConditions(@NonNull final List<DisplayConditionV1> displayConditions) {
    if (displayConditions == null) {
      throw new NullPointerException("displayConditions is marked non-null but is null");
    }
    this.displayConditions = displayConditions;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof MediaAccordionV1)) return false;
    final MediaAccordionV1 other = (MediaAccordionV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$id = this.getId();
    final Object other$id = other.getId();
    if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
    final Object this$title = this.getTitle();
    final Object other$title = other.getTitle();
    if (this$title == null ? other$title != null : !this$title.equals(other$title)) return false;
    final Object this$elements = this.getElements();
    final Object other$elements = other.getElements();
    if (this$elements == null ? other$elements != null : !this$elements.equals(other$elements)) return false;
    final Object this$displayConditions = this.getDisplayConditions();
    final Object other$displayConditions = other.getDisplayConditions();
    if (this$displayConditions == null ? other$displayConditions != null : !this$displayConditions.equals(other$displayConditions)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof MediaAccordionV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $id = this.getId();
    result = result * PRIME + ($id == null ? 43 : $id.hashCode());
    final Object $title = this.getTitle();
    result = result * PRIME + ($title == null ? 43 : $title.hashCode());
    final Object $elements = this.getElements();
    result = result * PRIME + ($elements == null ? 43 : $elements.hashCode());
    final Object $displayConditions = this.getDisplayConditions();
    result = result * PRIME + ($displayConditions == null ? 43 : $displayConditions.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "MediaAccordionV1(id=" + this.getId() + ", title=" + this.getTitle() + ", elements=" + this.getElements() + ", displayConditions=" + this.getDisplayConditions() + ")";
  }
}
