// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.condition.section;

import de.seitenbau.serviceportal.scripting.api.v1.form.FieldGroupInstanceV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormFieldKeyV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormFieldV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormV1;

/**
 * Abstrakte Elternklasse für Bedingungen zum Überspringen von Elemente,
 * deren Sichtbarkeiten von einem Feldwert abhängen.
 */
public abstract class ReferencedFieldSkipConditionV1 extends SkipConditionV1 {
  /**
   * Schlüssel des Feldes, das auf die enthaltene Bedingung geprüft wird.
   */
  private FormFieldKeyV1 conditionFieldKey;

  /**
   * Ermittelt und gibt den {@link FormFieldKeyV1} des Feldes zurück,
   * das die {@link ReferencedFieldSkipConditionV1} referenziert.
   *
   * @param instance Die Instanz einer Feldgruppe, für die der referenzierte FormFieldKey ermittelt wird.
   *
   * @return Der referenzierte {@link FormFieldKeyV1}.
   */
  public final FormFieldKeyV1 getReferencedFieldKey(FieldGroupInstanceV1 instance) {
    return instance.resolveSameInstancePointers(conditionFieldKey);
  }

  /**
   * Ermittelt das von der {@link ReferencedFieldSkipConditionV1} referenzierte Feld und gibt dieses zurück.
   *
   * @param instance Die Instanz der Feldgruppe in der sich das Feld befindet.
   * @param form Das Formular in dem sich das Feld befindet.
   *
   * @return Das ermittelte {@link FormFieldV1}.
   */
  protected final FormFieldV1 getReferencedField(FieldGroupInstanceV1 instance, FormV1 form) {
    FormFieldKeyV1 resolvedKey = getReferencedFieldKey(instance);
    return form.getFieldInInstance(resolvedKey);
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class ReferencedFieldSkipConditionV1Builder<C extends ReferencedFieldSkipConditionV1, B extends ReferencedFieldSkipConditionV1.ReferencedFieldSkipConditionV1Builder<C, B>> extends SkipConditionV1.SkipConditionV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private FormFieldKeyV1 conditionFieldKey;

    /**
     * Schlüssel des Feldes, das auf die enthaltene Bedingung geprüft wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B conditionFieldKey(final FormFieldKeyV1 conditionFieldKey) {
      this.conditionFieldKey = conditionFieldKey;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "ReferencedFieldSkipConditionV1.ReferencedFieldSkipConditionV1Builder(super=" + super.toString() + ", conditionFieldKey=" + this.conditionFieldKey + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected ReferencedFieldSkipConditionV1(final ReferencedFieldSkipConditionV1.ReferencedFieldSkipConditionV1Builder<?, ?> b) {
    super(b);
    this.conditionFieldKey = b.conditionFieldKey;
  }

  /**
   * Schlüssel des Feldes, das auf die enthaltene Bedingung geprüft wird.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public FormFieldKeyV1 getConditionFieldKey() {
    return this.conditionFieldKey;
  }

  /**
   * Schlüssel des Feldes, das auf die enthaltene Bedingung geprüft wird.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setConditionFieldKey(final FormFieldKeyV1 conditionFieldKey) {
    this.conditionFieldKey = conditionFieldKey;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "ReferencedFieldSkipConditionV1(conditionFieldKey=" + this.getConditionFieldKey() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof ReferencedFieldSkipConditionV1)) return false;
    final ReferencedFieldSkipConditionV1 other = (ReferencedFieldSkipConditionV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (!super.equals(o)) return false;
    final Object this$conditionFieldKey = this.getConditionFieldKey();
    final Object other$conditionFieldKey = other.getConditionFieldKey();
    if (this$conditionFieldKey == null ? other$conditionFieldKey != null : !this$conditionFieldKey.equals(other$conditionFieldKey)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof ReferencedFieldSkipConditionV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = super.hashCode();
    final Object $conditionFieldKey = this.getConditionFieldKey();
    result = result * PRIME + ($conditionFieldKey == null ? 43 : $conditionFieldKey.hashCode());
    return result;
  }
}
