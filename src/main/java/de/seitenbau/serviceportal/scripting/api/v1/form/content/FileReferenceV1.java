// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.content;

import java.util.UUID;

/**
 * Referenz auf eine Datei.
 */
public class FileReferenceV1 {
  /**
   * ID der gespeicherten Datei.
   */
  private UUID id;
  /**
   * Symmetrische Schlüssel, mit dem die Datei und ihre Metadaten verschlüsselt sind.
   */
  private SymmetricKeyV1 symmetricKey;
  /**
   * Name der Datei.
   */
  private String name;
  /**
   * Dateigröße der Datei (in Bytes).
   */
  private Long size;
  /**
   * Mimetype der Datei.
   */
  private String mimetype;


  @SuppressWarnings("all")
  public static class FileReferenceV1Builder {
    @SuppressWarnings("all")
    private UUID id;
    @SuppressWarnings("all")
    private SymmetricKeyV1 symmetricKey;
    @SuppressWarnings("all")
    private String name;
    @SuppressWarnings("all")
    private Long size;
    @SuppressWarnings("all")
    private String mimetype;

    @SuppressWarnings("all")
    FileReferenceV1Builder() {
    }

    /**
     * ID der gespeicherten Datei.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FileReferenceV1.FileReferenceV1Builder id(final UUID id) {
      this.id = id;
      return this;
    }

    /**
     * Symmetrische Schlüssel, mit dem die Datei und ihre Metadaten verschlüsselt sind.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FileReferenceV1.FileReferenceV1Builder symmetricKey(final SymmetricKeyV1 symmetricKey) {
      this.symmetricKey = symmetricKey;
      return this;
    }

    /**
     * Name der Datei.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FileReferenceV1.FileReferenceV1Builder name(final String name) {
      this.name = name;
      return this;
    }

    /**
     * Dateigröße der Datei (in Bytes).
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FileReferenceV1.FileReferenceV1Builder size(final Long size) {
      this.size = size;
      return this;
    }

    /**
     * Mimetype der Datei.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FileReferenceV1.FileReferenceV1Builder mimetype(final String mimetype) {
      this.mimetype = mimetype;
      return this;
    }

    @SuppressWarnings("all")
    public FileReferenceV1 build() {
      return new FileReferenceV1(this.id, this.symmetricKey, this.name, this.size, this.mimetype);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "FileReferenceV1.FileReferenceV1Builder(id=" + this.id + ", symmetricKey=" + this.symmetricKey + ", name=" + this.name + ", size=" + this.size + ", mimetype=" + this.mimetype + ")";
    }
  }

  @SuppressWarnings("all")
  public static FileReferenceV1.FileReferenceV1Builder builder() {
    return new FileReferenceV1.FileReferenceV1Builder();
  }

  /**
   * ID der gespeicherten Datei.
   */
  @SuppressWarnings("all")
  public UUID getId() {
    return this.id;
  }

  /**
   * Symmetrische Schlüssel, mit dem die Datei und ihre Metadaten verschlüsselt sind.
   */
  @SuppressWarnings("all")
  public SymmetricKeyV1 getSymmetricKey() {
    return this.symmetricKey;
  }

  /**
   * Name der Datei.
   */
  @SuppressWarnings("all")
  public String getName() {
    return this.name;
  }

  /**
   * Dateigröße der Datei (in Bytes).
   */
  @SuppressWarnings("all")
  public Long getSize() {
    return this.size;
  }

  /**
   * Mimetype der Datei.
   */
  @SuppressWarnings("all")
  public String getMimetype() {
    return this.mimetype;
  }

  /**
   * ID der gespeicherten Datei.
   */
  @SuppressWarnings("all")
  public void setId(final UUID id) {
    this.id = id;
  }

  /**
   * Symmetrische Schlüssel, mit dem die Datei und ihre Metadaten verschlüsselt sind.
   */
  @SuppressWarnings("all")
  public void setSymmetricKey(final SymmetricKeyV1 symmetricKey) {
    this.symmetricKey = symmetricKey;
  }

  /**
   * Name der Datei.
   */
  @SuppressWarnings("all")
  public void setName(final String name) {
    this.name = name;
  }

  /**
   * Dateigröße der Datei (in Bytes).
   */
  @SuppressWarnings("all")
  public void setSize(final Long size) {
    this.size = size;
  }

  /**
   * Mimetype der Datei.
   */
  @SuppressWarnings("all")
  public void setMimetype(final String mimetype) {
    this.mimetype = mimetype;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof FileReferenceV1)) return false;
    final FileReferenceV1 other = (FileReferenceV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$size = this.getSize();
    final Object other$size = other.getSize();
    if (this$size == null ? other$size != null : !this$size.equals(other$size)) return false;
    final Object this$id = this.getId();
    final Object other$id = other.getId();
    if (this$id == null ? other$id != null : !this$id.equals(other$id)) return false;
    final Object this$symmetricKey = this.getSymmetricKey();
    final Object other$symmetricKey = other.getSymmetricKey();
    if (this$symmetricKey == null ? other$symmetricKey != null : !this$symmetricKey.equals(other$symmetricKey)) return false;
    final Object this$name = this.getName();
    final Object other$name = other.getName();
    if (this$name == null ? other$name != null : !this$name.equals(other$name)) return false;
    final Object this$mimetype = this.getMimetype();
    final Object other$mimetype = other.getMimetype();
    if (this$mimetype == null ? other$mimetype != null : !this$mimetype.equals(other$mimetype)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof FileReferenceV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $size = this.getSize();
    result = result * PRIME + ($size == null ? 43 : $size.hashCode());
    final Object $id = this.getId();
    result = result * PRIME + ($id == null ? 43 : $id.hashCode());
    final Object $symmetricKey = this.getSymmetricKey();
    result = result * PRIME + ($symmetricKey == null ? 43 : $symmetricKey.hashCode());
    final Object $name = this.getName();
    result = result * PRIME + ($name == null ? 43 : $name.hashCode());
    final Object $mimetype = this.getMimetype();
    result = result * PRIME + ($mimetype == null ? 43 : $mimetype.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "FileReferenceV1(id=" + this.getId() + ", symmetricKey=" + this.getSymmetricKey() + ", name=" + this.getName() + ", size=" + this.getSize() + ", mimetype=" + this.getMimetype() + ")";
  }

  @SuppressWarnings("all")
  public FileReferenceV1() {
  }

  @SuppressWarnings("all")
  private FileReferenceV1(final UUID id, final SymmetricKeyV1 symmetricKey, final String name, final Long size, final String mimetype) {
    this.id = id;
    this.symmetricKey = symmetricKey;
    this.name = name;
    this.size = size;
    this.mimetype = mimetype;
  }
}
