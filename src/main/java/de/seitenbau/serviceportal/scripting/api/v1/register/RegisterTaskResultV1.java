// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.register;

import java.util.Map;

/**
 * Dieses Objekt ist experimentell und kann sich noch ver√§ndern!
 * Ergebnis des Register Tasks
 */
public class RegisterTaskResultV1 {
  /**
   * Ergebnis des Nachweisabrufs.
   */
  private Map<String, Object> registerData;


  @SuppressWarnings("all")
  @lombok.Generated
  public static class RegisterTaskResultV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private Map<String, Object> registerData;

    @SuppressWarnings("all")
    @lombok.Generated
    RegisterTaskResultV1Builder() {
    }

    /**
     * Ergebnis des Nachweisabrufs.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskResultV1.RegisterTaskResultV1Builder registerData(final Map<String, Object> registerData) {
      this.registerData = registerData;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskResultV1 build() {
      return new RegisterTaskResultV1(this.registerData);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "RegisterTaskResultV1.RegisterTaskResultV1Builder(registerData=" + this.registerData + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static RegisterTaskResultV1.RegisterTaskResultV1Builder builder() {
    return new RegisterTaskResultV1.RegisterTaskResultV1Builder();
  }

  /**
   * Ergebnis des Nachweisabrufs.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Map<String, Object> getRegisterData() {
    return this.registerData;
  }

  /**
   * Ergebnis des Nachweisabrufs.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setRegisterData(final Map<String, Object> registerData) {
    this.registerData = registerData;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof RegisterTaskResultV1)) return false;
    final RegisterTaskResultV1 other = (RegisterTaskResultV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$registerData = this.getRegisterData();
    final Object other$registerData = other.getRegisterData();
    if (this$registerData == null ? other$registerData != null : !this$registerData.equals(other$registerData)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof RegisterTaskResultV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $registerData = this.getRegisterData();
    result = result * PRIME + ($registerData == null ? 43 : $registerData.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "RegisterTaskResultV1(registerData=" + this.getRegisterData() + ")";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public RegisterTaskResultV1() {
  }

  /**
   * Creates a new {@code RegisterTaskResultV1} instance.
   *
   * @param registerData Ergebnis des Nachweisabrufs.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public RegisterTaskResultV1(final Map<String, Object> registerData) {
    this.registerData = registerData;
  }
}
