// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.payment;

/**
 * Payment-Config für den generischen Bezahltask über ePayBL.
 */
public class EpayBlPaymentConfigV1 implements PaymentConfigV1 {
  /**
   * Provider. Hat den Wert "epaybl".
   */
  private final String provider = PaymentProviderV1.EPAYBL.toString();
  /**
   * ePayBL-Instanz die verwendet werden soll.
   */
  private String instanz;
  /**
   * Base64-kodierte String-Repräsentation des byte-Arrays des Keystores.
   */
  private String keystore;
  /**
   * Pfad zum Keystore im Deployment.
   */
  private String keystoreResource;
  /**
   * Typ des Keystores.
   */
  private String keystoreType;
  /**
   * Passwort des Keystores.
   */
  private String keystorePassword;
  /**
   * Mandantennummer.
   */
  private String mandant;
  /**
   * Bewirtschafternummer.
   */
  private String bewirtschafter;
  /**
   * Haushaltsstellennummer.
   */
  private String haushaltsstelle;
  /**
   * Objektnummer.
   */
  private String objektnummer;
  /**
   * Kennzeichen fürs Mahnverfahren.
   */
  private String kennzeichenMahnverfahren;
  /**
   * Enthält die Zahlungsfrist in Tagen.
   */
  private int frist;
  /**
   * Haushaltsreferenz. Wird nur für die Instanz für NRW benötigt.
   */
  private String href;


  @SuppressWarnings("all")
  @lombok.Generated
  public static class EpayBlPaymentConfigV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private String instanz;
    @SuppressWarnings("all")
    @lombok.Generated
    private String keystore;
    @SuppressWarnings("all")
    @lombok.Generated
    private String keystoreResource;
    @SuppressWarnings("all")
    @lombok.Generated
    private String keystoreType;
    @SuppressWarnings("all")
    @lombok.Generated
    private String keystorePassword;
    @SuppressWarnings("all")
    @lombok.Generated
    private String mandant;
    @SuppressWarnings("all")
    @lombok.Generated
    private String bewirtschafter;
    @SuppressWarnings("all")
    @lombok.Generated
    private String haushaltsstelle;
    @SuppressWarnings("all")
    @lombok.Generated
    private String objektnummer;
    @SuppressWarnings("all")
    @lombok.Generated
    private String kennzeichenMahnverfahren;
    @SuppressWarnings("all")
    @lombok.Generated
    private int frist;
    @SuppressWarnings("all")
    @lombok.Generated
    private String href;

    @SuppressWarnings("all")
    @lombok.Generated
    EpayBlPaymentConfigV1Builder() {
    }

    /**
     * ePayBL-Instanz die verwendet werden soll.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder instanz(final String instanz) {
      this.instanz = instanz;
      return this;
    }

    /**
     * Base64-kodierte String-Repräsentation des byte-Arrays des Keystores.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder keystore(final String keystore) {
      this.keystore = keystore;
      return this;
    }

    /**
     * Pfad zum Keystore im Deployment.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder keystoreResource(final String keystoreResource) {
      this.keystoreResource = keystoreResource;
      return this;
    }

    /**
     * Typ des Keystores.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder keystoreType(final String keystoreType) {
      this.keystoreType = keystoreType;
      return this;
    }

    /**
     * Passwort des Keystores.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder keystorePassword(final String keystorePassword) {
      this.keystorePassword = keystorePassword;
      return this;
    }

    /**
     * Mandantennummer.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder mandant(final String mandant) {
      this.mandant = mandant;
      return this;
    }

    /**
     * Bewirtschafternummer.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder bewirtschafter(final String bewirtschafter) {
      this.bewirtschafter = bewirtschafter;
      return this;
    }

    /**
     * Haushaltsstellennummer.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder haushaltsstelle(final String haushaltsstelle) {
      this.haushaltsstelle = haushaltsstelle;
      return this;
    }

    /**
     * Objektnummer.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder objektnummer(final String objektnummer) {
      this.objektnummer = objektnummer;
      return this;
    }

    /**
     * Kennzeichen fürs Mahnverfahren.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder kennzeichenMahnverfahren(final String kennzeichenMahnverfahren) {
      this.kennzeichenMahnverfahren = kennzeichenMahnverfahren;
      return this;
    }

    /**
     * Enthält die Zahlungsfrist in Tagen.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder frist(final int frist) {
      this.frist = frist;
      return this;
    }

    /**
     * Haushaltsreferenz. Wird nur für die Instanz für NRW benötigt.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder href(final String href) {
      this.href = href;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public EpayBlPaymentConfigV1 build() {
      return new EpayBlPaymentConfigV1(this.instanz, this.keystore, this.keystoreResource, this.keystoreType, this.keystorePassword, this.mandant, this.bewirtschafter, this.haushaltsstelle, this.objektnummer, this.kennzeichenMahnverfahren, this.frist, this.href);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder(instanz=" + this.instanz + ", keystore=" + this.keystore + ", keystoreResource=" + this.keystoreResource + ", keystoreType=" + this.keystoreType + ", keystorePassword=" + this.keystorePassword + ", mandant=" + this.mandant + ", bewirtschafter=" + this.bewirtschafter + ", haushaltsstelle=" + this.haushaltsstelle + ", objektnummer=" + this.objektnummer + ", kennzeichenMahnverfahren=" + this.kennzeichenMahnverfahren + ", frist=" + this.frist + ", href=" + this.href + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder builder() {
    return new EpayBlPaymentConfigV1.EpayBlPaymentConfigV1Builder();
  }

  /**
   * Provider. Hat den Wert "epaybl".
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getProvider() {
    return this.provider;
  }

  /**
   * ePayBL-Instanz die verwendet werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getInstanz() {
    return this.instanz;
  }

  /**
   * Base64-kodierte String-Repräsentation des byte-Arrays des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKeystore() {
    return this.keystore;
  }

  /**
   * Pfad zum Keystore im Deployment.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKeystoreResource() {
    return this.keystoreResource;
  }

  /**
   * Typ des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKeystoreType() {
    return this.keystoreType;
  }

  /**
   * Passwort des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKeystorePassword() {
    return this.keystorePassword;
  }

  /**
   * Mandantennummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getMandant() {
    return this.mandant;
  }

  /**
   * Bewirtschafternummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getBewirtschafter() {
    return this.bewirtschafter;
  }

  /**
   * Haushaltsstellennummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getHaushaltsstelle() {
    return this.haushaltsstelle;
  }

  /**
   * Objektnummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getObjektnummer() {
    return this.objektnummer;
  }

  /**
   * Kennzeichen fürs Mahnverfahren.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKennzeichenMahnverfahren() {
    return this.kennzeichenMahnverfahren;
  }

  /**
   * Enthält die Zahlungsfrist in Tagen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public int getFrist() {
    return this.frist;
  }

  /**
   * Haushaltsreferenz. Wird nur für die Instanz für NRW benötigt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getHref() {
    return this.href;
  }

  /**
   * ePayBL-Instanz die verwendet werden soll.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setInstanz(final String instanz) {
    this.instanz = instanz;
  }

  /**
   * Base64-kodierte String-Repräsentation des byte-Arrays des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKeystore(final String keystore) {
    this.keystore = keystore;
  }

  /**
   * Pfad zum Keystore im Deployment.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKeystoreResource(final String keystoreResource) {
    this.keystoreResource = keystoreResource;
  }

  /**
   * Typ des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKeystoreType(final String keystoreType) {
    this.keystoreType = keystoreType;
  }

  /**
   * Passwort des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKeystorePassword(final String keystorePassword) {
    this.keystorePassword = keystorePassword;
  }

  /**
   * Mandantennummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setMandant(final String mandant) {
    this.mandant = mandant;
  }

  /**
   * Bewirtschafternummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setBewirtschafter(final String bewirtschafter) {
    this.bewirtschafter = bewirtschafter;
  }

  /**
   * Haushaltsstellennummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setHaushaltsstelle(final String haushaltsstelle) {
    this.haushaltsstelle = haushaltsstelle;
  }

  /**
   * Objektnummer.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setObjektnummer(final String objektnummer) {
    this.objektnummer = objektnummer;
  }

  /**
   * Kennzeichen fürs Mahnverfahren.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKennzeichenMahnverfahren(final String kennzeichenMahnverfahren) {
    this.kennzeichenMahnverfahren = kennzeichenMahnverfahren;
  }

  /**
   * Enthält die Zahlungsfrist in Tagen.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setFrist(final int frist) {
    this.frist = frist;
  }

  /**
   * Haushaltsreferenz. Wird nur für die Instanz für NRW benötigt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setHref(final String href) {
    this.href = href;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof EpayBlPaymentConfigV1)) return false;
    final EpayBlPaymentConfigV1 other = (EpayBlPaymentConfigV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (this.getFrist() != other.getFrist()) return false;
    final Object this$provider = this.getProvider();
    final Object other$provider = other.getProvider();
    if (this$provider == null ? other$provider != null : !this$provider.equals(other$provider)) return false;
    final Object this$instanz = this.getInstanz();
    final Object other$instanz = other.getInstanz();
    if (this$instanz == null ? other$instanz != null : !this$instanz.equals(other$instanz)) return false;
    final Object this$keystore = this.getKeystore();
    final Object other$keystore = other.getKeystore();
    if (this$keystore == null ? other$keystore != null : !this$keystore.equals(other$keystore)) return false;
    final Object this$keystoreResource = this.getKeystoreResource();
    final Object other$keystoreResource = other.getKeystoreResource();
    if (this$keystoreResource == null ? other$keystoreResource != null : !this$keystoreResource.equals(other$keystoreResource)) return false;
    final Object this$keystoreType = this.getKeystoreType();
    final Object other$keystoreType = other.getKeystoreType();
    if (this$keystoreType == null ? other$keystoreType != null : !this$keystoreType.equals(other$keystoreType)) return false;
    final Object this$keystorePassword = this.getKeystorePassword();
    final Object other$keystorePassword = other.getKeystorePassword();
    if (this$keystorePassword == null ? other$keystorePassword != null : !this$keystorePassword.equals(other$keystorePassword)) return false;
    final Object this$mandant = this.getMandant();
    final Object other$mandant = other.getMandant();
    if (this$mandant == null ? other$mandant != null : !this$mandant.equals(other$mandant)) return false;
    final Object this$bewirtschafter = this.getBewirtschafter();
    final Object other$bewirtschafter = other.getBewirtschafter();
    if (this$bewirtschafter == null ? other$bewirtschafter != null : !this$bewirtschafter.equals(other$bewirtschafter)) return false;
    final Object this$haushaltsstelle = this.getHaushaltsstelle();
    final Object other$haushaltsstelle = other.getHaushaltsstelle();
    if (this$haushaltsstelle == null ? other$haushaltsstelle != null : !this$haushaltsstelle.equals(other$haushaltsstelle)) return false;
    final Object this$objektnummer = this.getObjektnummer();
    final Object other$objektnummer = other.getObjektnummer();
    if (this$objektnummer == null ? other$objektnummer != null : !this$objektnummer.equals(other$objektnummer)) return false;
    final Object this$kennzeichenMahnverfahren = this.getKennzeichenMahnverfahren();
    final Object other$kennzeichenMahnverfahren = other.getKennzeichenMahnverfahren();
    if (this$kennzeichenMahnverfahren == null ? other$kennzeichenMahnverfahren != null : !this$kennzeichenMahnverfahren.equals(other$kennzeichenMahnverfahren)) return false;
    final Object this$href = this.getHref();
    final Object other$href = other.getHref();
    if (this$href == null ? other$href != null : !this$href.equals(other$href)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof EpayBlPaymentConfigV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getFrist();
    final Object $provider = this.getProvider();
    result = result * PRIME + ($provider == null ? 43 : $provider.hashCode());
    final Object $instanz = this.getInstanz();
    result = result * PRIME + ($instanz == null ? 43 : $instanz.hashCode());
    final Object $keystore = this.getKeystore();
    result = result * PRIME + ($keystore == null ? 43 : $keystore.hashCode());
    final Object $keystoreResource = this.getKeystoreResource();
    result = result * PRIME + ($keystoreResource == null ? 43 : $keystoreResource.hashCode());
    final Object $keystoreType = this.getKeystoreType();
    result = result * PRIME + ($keystoreType == null ? 43 : $keystoreType.hashCode());
    final Object $keystorePassword = this.getKeystorePassword();
    result = result * PRIME + ($keystorePassword == null ? 43 : $keystorePassword.hashCode());
    final Object $mandant = this.getMandant();
    result = result * PRIME + ($mandant == null ? 43 : $mandant.hashCode());
    final Object $bewirtschafter = this.getBewirtschafter();
    result = result * PRIME + ($bewirtschafter == null ? 43 : $bewirtschafter.hashCode());
    final Object $haushaltsstelle = this.getHaushaltsstelle();
    result = result * PRIME + ($haushaltsstelle == null ? 43 : $haushaltsstelle.hashCode());
    final Object $objektnummer = this.getObjektnummer();
    result = result * PRIME + ($objektnummer == null ? 43 : $objektnummer.hashCode());
    final Object $kennzeichenMahnverfahren = this.getKennzeichenMahnverfahren();
    result = result * PRIME + ($kennzeichenMahnverfahren == null ? 43 : $kennzeichenMahnverfahren.hashCode());
    final Object $href = this.getHref();
    result = result * PRIME + ($href == null ? 43 : $href.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "EpayBlPaymentConfigV1(provider=" + this.getProvider() + ", instanz=" + this.getInstanz() + ", keystore=" + this.getKeystore() + ", keystoreResource=" + this.getKeystoreResource() + ", keystoreType=" + this.getKeystoreType() + ", keystorePassword=" + this.getKeystorePassword() + ", mandant=" + this.getMandant() + ", bewirtschafter=" + this.getBewirtschafter() + ", haushaltsstelle=" + this.getHaushaltsstelle() + ", objektnummer=" + this.getObjektnummer() + ", kennzeichenMahnverfahren=" + this.getKennzeichenMahnverfahren() + ", frist=" + this.getFrist() + ", href=" + this.getHref() + ")";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public EpayBlPaymentConfigV1() {
  }

  /**
   * Creates a new {@code EpayBlPaymentConfigV1} instance.
   *
   * @param instanz ePayBL-Instanz die verwendet werden soll.
   * @param keystore Base64-kodierte String-Repräsentation des byte-Arrays des Keystores.
   * @param keystoreResource Pfad zum Keystore im Deployment.
   * @param keystoreType Typ des Keystores.
   * @param keystorePassword Passwort des Keystores.
   * @param mandant Mandantennummer.
   * @param bewirtschafter Bewirtschafternummer.
   * @param haushaltsstelle Haushaltsstellennummer.
   * @param objektnummer Objektnummer.
   * @param kennzeichenMahnverfahren Kennzeichen fürs Mahnverfahren.
   * @param frist Enthält die Zahlungsfrist in Tagen.
   * @param href Haushaltsreferenz. Wird nur für die Instanz für NRW benötigt.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public EpayBlPaymentConfigV1(final String instanz, final String keystore, final String keystoreResource, final String keystoreType, final String keystorePassword, final String mandant, final String bewirtschafter, final String haushaltsstelle, final String objektnummer, final String kennzeichenMahnverfahren, final int frist, final String href) {
    this.instanz = instanz;
    this.keystore = keystore;
    this.keystoreResource = keystoreResource;
    this.keystoreType = keystoreType;
    this.keystorePassword = keystorePassword;
    this.mandant = mandant;
    this.bewirtschafter = bewirtschafter;
    this.haushaltsstelle = haushaltsstelle;
    this.objektnummer = objektnummer;
    this.kennzeichenMahnverfahren = kennzeichenMahnverfahren;
    this.frist = frist;
    this.href = href;
  }
}
