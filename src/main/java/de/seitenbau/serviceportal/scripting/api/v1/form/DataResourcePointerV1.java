// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form;

import lombok.NonNull;

/**
 * Eine Datenresource, von der ein Inhalt bezogen bzw. an die er geschickt werden kann.
 */
public class DataResourcePointerV1 implements Cloneable {
  /**
   * Service, an den Daten geschickt oder aus den Daten gelesen werden sollen.
   * <p>
   * Sollen Daten geschrieben werden, ist nur "prozess" g端ltig. Dann wird der Feldwert / Formularinhalt in
   * eine Prozessinstanz-Variable geschrieben.
   */
  @NonNull
  private String service;
  /**
   * Variable, in die geschrieben oder aus der gelesen wird.
   */
  @NonNull
  private String variableName;

  private void copy(DataResourcePointerV1 toCopy) {
    service = toCopy.service;
    variableName = toCopy.variableName;
  }

  @Override
  public DataResourcePointerV1 clone() {
    DataResourcePointerV1 result;
    try {
      result = (DataResourcePointerV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
    result.copy(this);
    return result;
  }


  @SuppressWarnings("all")
  public static class DataResourcePointerV1Builder {
    @SuppressWarnings("all")
    private String service;
    @SuppressWarnings("all")
    private String variableName;

    @SuppressWarnings("all")
    DataResourcePointerV1Builder() {
    }

    /**
     * Service, an den Daten geschickt oder aus den Daten gelesen werden sollen.
     * <p>
     * Sollen Daten geschrieben werden, ist nur "prozess" g端ltig. Dann wird der Feldwert / Formularinhalt in
     * eine Prozessinstanz-Variable geschrieben.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public DataResourcePointerV1.DataResourcePointerV1Builder service(@NonNull final String service) {
      if (service == null) {
        throw new NullPointerException("service is marked non-null but is null");
      }
      this.service = service;
      return this;
    }

    /**
     * Variable, in die geschrieben oder aus der gelesen wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public DataResourcePointerV1.DataResourcePointerV1Builder variableName(@NonNull final String variableName) {
      if (variableName == null) {
        throw new NullPointerException("variableName is marked non-null but is null");
      }
      this.variableName = variableName;
      return this;
    }

    @SuppressWarnings("all")
    public DataResourcePointerV1 build() {
      return new DataResourcePointerV1(this.service, this.variableName);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "DataResourcePointerV1.DataResourcePointerV1Builder(service=" + this.service + ", variableName=" + this.variableName + ")";
    }
  }

  @SuppressWarnings("all")
  public static DataResourcePointerV1.DataResourcePointerV1Builder builder() {
    return new DataResourcePointerV1.DataResourcePointerV1Builder();
  }

  /**
   * Service, an den Daten geschickt oder aus den Daten gelesen werden sollen.
   * <p>
   * Sollen Daten geschrieben werden, ist nur "prozess" g端ltig. Dann wird der Feldwert / Formularinhalt in
   * eine Prozessinstanz-Variable geschrieben.
   */
  @NonNull
  @SuppressWarnings("all")
  public String getService() {
    return this.service;
  }

  /**
   * Variable, in die geschrieben oder aus der gelesen wird.
   */
  @NonNull
  @SuppressWarnings("all")
  public String getVariableName() {
    return this.variableName;
  }

  /**
   * Service, an den Daten geschickt oder aus den Daten gelesen werden sollen.
   * <p>
   * Sollen Daten geschrieben werden, ist nur "prozess" g端ltig. Dann wird der Feldwert / Formularinhalt in
   * eine Prozessinstanz-Variable geschrieben.
   */
  @SuppressWarnings("all")
  public void setService(@NonNull final String service) {
    if (service == null) {
      throw new NullPointerException("service is marked non-null but is null");
    }
    this.service = service;
  }

  /**
   * Variable, in die geschrieben oder aus der gelesen wird.
   */
  @SuppressWarnings("all")
  public void setVariableName(@NonNull final String variableName) {
    if (variableName == null) {
      throw new NullPointerException("variableName is marked non-null but is null");
    }
    this.variableName = variableName;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof DataResourcePointerV1)) return false;
    final DataResourcePointerV1 other = (DataResourcePointerV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$service = this.getService();
    final Object other$service = other.getService();
    if (this$service == null ? other$service != null : !this$service.equals(other$service)) return false;
    final Object this$variableName = this.getVariableName();
    final Object other$variableName = other.getVariableName();
    if (this$variableName == null ? other$variableName != null : !this$variableName.equals(other$variableName)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof DataResourcePointerV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $service = this.getService();
    result = result * PRIME + ($service == null ? 43 : $service.hashCode());
    final Object $variableName = this.getVariableName();
    result = result * PRIME + ($variableName == null ? 43 : $variableName.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "DataResourcePointerV1(service=" + this.getService() + ", variableName=" + this.getVariableName() + ")";
  }

  @SuppressWarnings("all")
  public DataResourcePointerV1(@NonNull final String service, @NonNull final String variableName) {
    if (service == null) {
      throw new NullPointerException("service is marked non-null but is null");
    }
    if (variableName == null) {
      throw new NullPointerException("variableName is marked non-null but is null");
    }
    this.service = service;
    this.variableName = variableName;
  }
}
