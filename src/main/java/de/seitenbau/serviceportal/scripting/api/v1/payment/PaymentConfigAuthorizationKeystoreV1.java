// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.payment;

/**
 * Beinhaltet Daten zur Authentifizierung bei Bezahl-Providern für die Authentifizierungsmethode Keystore.
 */
public class PaymentConfigAuthorizationKeystoreV1 implements PaymentConfigAuthorizationV1 {
  /**
   * Typ der Authentifizierung.
   */
  private final PaymentConfigAuthorizationTypeV1 type = PaymentConfigAuthorizationTypeV1.KEYSTORE;
  /**
   * Base64-kodierte String-Repräsentation des byte-Inhalts des PKCS12-Keystores.
   */
  private String keystore;
  /**
   * Passwort des Keystores.
   */
  private String keystorePassword;


  @SuppressWarnings("all")
  @lombok.Generated
  public static class PaymentConfigAuthorizationKeystoreV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private String keystore;
    @SuppressWarnings("all")
    @lombok.Generated
    private String keystorePassword;

    @SuppressWarnings("all")
    @lombok.Generated
    PaymentConfigAuthorizationKeystoreV1Builder() {
    }

    /**
     * Base64-kodierte String-Repräsentation des byte-Inhalts des PKCS12-Keystores.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public PaymentConfigAuthorizationKeystoreV1.PaymentConfigAuthorizationKeystoreV1Builder keystore(final String keystore) {
      this.keystore = keystore;
      return this;
    }

    /**
     * Passwort des Keystores.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public PaymentConfigAuthorizationKeystoreV1.PaymentConfigAuthorizationKeystoreV1Builder keystorePassword(final String keystorePassword) {
      this.keystorePassword = keystorePassword;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public PaymentConfigAuthorizationKeystoreV1 build() {
      return new PaymentConfigAuthorizationKeystoreV1(this.keystore, this.keystorePassword);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "PaymentConfigAuthorizationKeystoreV1.PaymentConfigAuthorizationKeystoreV1Builder(keystore=" + this.keystore + ", keystorePassword=" + this.keystorePassword + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static PaymentConfigAuthorizationKeystoreV1.PaymentConfigAuthorizationKeystoreV1Builder builder() {
    return new PaymentConfigAuthorizationKeystoreV1.PaymentConfigAuthorizationKeystoreV1Builder();
  }

  /**
   * Typ der Authentifizierung.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public PaymentConfigAuthorizationTypeV1 getType() {
    return this.type;
  }

  /**
   * Base64-kodierte String-Repräsentation des byte-Inhalts des PKCS12-Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKeystore() {
    return this.keystore;
  }

  /**
   * Passwort des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getKeystorePassword() {
    return this.keystorePassword;
  }

  /**
   * Base64-kodierte String-Repräsentation des byte-Inhalts des PKCS12-Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKeystore(final String keystore) {
    this.keystore = keystore;
  }

  /**
   * Passwort des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setKeystorePassword(final String keystorePassword) {
    this.keystorePassword = keystorePassword;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof PaymentConfigAuthorizationKeystoreV1)) return false;
    final PaymentConfigAuthorizationKeystoreV1 other = (PaymentConfigAuthorizationKeystoreV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$type = this.getType();
    final Object other$type = other.getType();
    if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
    final Object this$keystore = this.getKeystore();
    final Object other$keystore = other.getKeystore();
    if (this$keystore == null ? other$keystore != null : !this$keystore.equals(other$keystore)) return false;
    final Object this$keystorePassword = this.getKeystorePassword();
    final Object other$keystorePassword = other.getKeystorePassword();
    if (this$keystorePassword == null ? other$keystorePassword != null : !this$keystorePassword.equals(other$keystorePassword)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof PaymentConfigAuthorizationKeystoreV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $type = this.getType();
    result = result * PRIME + ($type == null ? 43 : $type.hashCode());
    final Object $keystore = this.getKeystore();
    result = result * PRIME + ($keystore == null ? 43 : $keystore.hashCode());
    final Object $keystorePassword = this.getKeystorePassword();
    result = result * PRIME + ($keystorePassword == null ? 43 : $keystorePassword.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "PaymentConfigAuthorizationKeystoreV1(type=" + this.getType() + ", keystore=" + this.getKeystore() + ", keystorePassword=" + this.getKeystorePassword() + ")";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public PaymentConfigAuthorizationKeystoreV1() {
  }

  /**
   * Creates a new {@code PaymentConfigAuthorizationKeystoreV1} instance.
   *
   * @param keystore Base64-kodierte String-Repräsentation des byte-Inhalts des PKCS12-Keystores.
   * @param keystorePassword Passwort des Keystores.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public PaymentConfigAuthorizationKeystoreV1(final String keystore, final String keystorePassword) {
    this.keystore = keystore;
    this.keystorePassword = keystorePassword;
  }
}
