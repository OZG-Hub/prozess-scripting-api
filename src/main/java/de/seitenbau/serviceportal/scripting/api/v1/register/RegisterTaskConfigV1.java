// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.register;

/**
 * Dieses Objekt ist experimentell und kann sich noch verändern!
 * Config des Register Tasks
 */
public class RegisterTaskConfigV1 {
  /**
   * Typ des angeforderten Nachweises.
   */
  private String evidenceType;
  /**
   * ID der IT-Komponente in IAM für Behörden.
   */
  private String componentId;
  /**
   * Amtlicher Regionalschlüssel zur Bestimmung der Zuständigkeit.
   */
  private String ars;
  /**
   * Rechtsgrundlage.
   */
  private String rechtsgrundlage;
  /**
   * Verarbeitungszweck.
   */
  private String verarbeitungszweck;
  /**
   * Vorhaltedauer der Protokolle des Nachweisabrufs.
   */
  private EvidenceRequestComplianceLogRetentionPeriodV1 evidenceRequestComplianceLogRetentionPeriod;
  /**
   * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung persönlichen und weiteren Daten im Task.
   */
  private ConfirmProcessDataUsageConfigV1 confirmProcessDataUsageConfig;
  /**
   * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung des Nachweises im Task.
   */
  private ConfirmRegisterDataUsageConfigV1 confirmRegisterDataUsageConfig;


  @SuppressWarnings("all")
  @lombok.Generated
  public static class RegisterTaskConfigV1Builder {
    @SuppressWarnings("all")
    @lombok.Generated
    private String evidenceType;
    @SuppressWarnings("all")
    @lombok.Generated
    private String componentId;
    @SuppressWarnings("all")
    @lombok.Generated
    private String ars;
    @SuppressWarnings("all")
    @lombok.Generated
    private String rechtsgrundlage;
    @SuppressWarnings("all")
    @lombok.Generated
    private String verarbeitungszweck;
    @SuppressWarnings("all")
    @lombok.Generated
    private EvidenceRequestComplianceLogRetentionPeriodV1 evidenceRequestComplianceLogRetentionPeriod;
    @SuppressWarnings("all")
    @lombok.Generated
    private ConfirmProcessDataUsageConfigV1 confirmProcessDataUsageConfig;
    @SuppressWarnings("all")
    @lombok.Generated
    private ConfirmRegisterDataUsageConfigV1 confirmRegisterDataUsageConfig;

    @SuppressWarnings("all")
    @lombok.Generated
    RegisterTaskConfigV1Builder() {
    }

    /**
     * Typ des angeforderten Nachweises.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder evidenceType(final String evidenceType) {
      this.evidenceType = evidenceType;
      return this;
    }

    /**
     * ID der IT-Komponente in IAM für Behörden.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder componentId(final String componentId) {
      this.componentId = componentId;
      return this;
    }

    /**
     * Amtlicher Regionalschlüssel zur Bestimmung der Zuständigkeit.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder ars(final String ars) {
      this.ars = ars;
      return this;
    }

    /**
     * Rechtsgrundlage.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder rechtsgrundlage(final String rechtsgrundlage) {
      this.rechtsgrundlage = rechtsgrundlage;
      return this;
    }

    /**
     * Verarbeitungszweck.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder verarbeitungszweck(final String verarbeitungszweck) {
      this.verarbeitungszweck = verarbeitungszweck;
      return this;
    }

    /**
     * Vorhaltedauer der Protokolle des Nachweisabrufs.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder evidenceRequestComplianceLogRetentionPeriod(final EvidenceRequestComplianceLogRetentionPeriodV1 evidenceRequestComplianceLogRetentionPeriod) {
      this.evidenceRequestComplianceLogRetentionPeriod = evidenceRequestComplianceLogRetentionPeriod;
      return this;
    }

    /**
     * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung persönlichen und weiteren Daten im Task.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder confirmProcessDataUsageConfig(final ConfirmProcessDataUsageConfigV1 confirmProcessDataUsageConfig) {
      this.confirmProcessDataUsageConfig = confirmProcessDataUsageConfig;
      return this;
    }

    /**
     * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung des Nachweises im Task.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1.RegisterTaskConfigV1Builder confirmRegisterDataUsageConfig(final ConfirmRegisterDataUsageConfigV1 confirmRegisterDataUsageConfig) {
      this.confirmRegisterDataUsageConfig = confirmRegisterDataUsageConfig;
      return this;
    }

    @SuppressWarnings("all")
    @lombok.Generated
    public RegisterTaskConfigV1 build() {
      return new RegisterTaskConfigV1(this.evidenceType, this.componentId, this.ars, this.rechtsgrundlage, this.verarbeitungszweck, this.evidenceRequestComplianceLogRetentionPeriod, this.confirmProcessDataUsageConfig, this.confirmRegisterDataUsageConfig);
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "RegisterTaskConfigV1.RegisterTaskConfigV1Builder(evidenceType=" + this.evidenceType + ", componentId=" + this.componentId + ", ars=" + this.ars + ", rechtsgrundlage=" + this.rechtsgrundlage + ", verarbeitungszweck=" + this.verarbeitungszweck + ", evidenceRequestComplianceLogRetentionPeriod=" + this.evidenceRequestComplianceLogRetentionPeriod + ", confirmProcessDataUsageConfig=" + this.confirmProcessDataUsageConfig + ", confirmRegisterDataUsageConfig=" + this.confirmRegisterDataUsageConfig + ")";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static RegisterTaskConfigV1.RegisterTaskConfigV1Builder builder() {
    return new RegisterTaskConfigV1.RegisterTaskConfigV1Builder();
  }

  /**
   * Typ des angeforderten Nachweises.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getEvidenceType() {
    return this.evidenceType;
  }

  /**
   * ID der IT-Komponente in IAM für Behörden.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getComponentId() {
    return this.componentId;
  }

  /**
   * Amtlicher Regionalschlüssel zur Bestimmung der Zuständigkeit.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getArs() {
    return this.ars;
  }

  /**
   * Rechtsgrundlage.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getRechtsgrundlage() {
    return this.rechtsgrundlage;
  }

  /**
   * Verarbeitungszweck.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public String getVerarbeitungszweck() {
    return this.verarbeitungszweck;
  }

  /**
   * Vorhaltedauer der Protokolle des Nachweisabrufs.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public EvidenceRequestComplianceLogRetentionPeriodV1 getEvidenceRequestComplianceLogRetentionPeriod() {
    return this.evidenceRequestComplianceLogRetentionPeriod;
  }

  /**
   * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung persönlichen und weiteren Daten im Task.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public ConfirmProcessDataUsageConfigV1 getConfirmProcessDataUsageConfig() {
    return this.confirmProcessDataUsageConfig;
  }

  /**
   * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung des Nachweises im Task.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public ConfirmRegisterDataUsageConfigV1 getConfirmRegisterDataUsageConfig() {
    return this.confirmRegisterDataUsageConfig;
  }

  /**
   * Typ des angeforderten Nachweises.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setEvidenceType(final String evidenceType) {
    this.evidenceType = evidenceType;
  }

  /**
   * ID der IT-Komponente in IAM für Behörden.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setComponentId(final String componentId) {
    this.componentId = componentId;
  }

  /**
   * Amtlicher Regionalschlüssel zur Bestimmung der Zuständigkeit.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setArs(final String ars) {
    this.ars = ars;
  }

  /**
   * Rechtsgrundlage.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setRechtsgrundlage(final String rechtsgrundlage) {
    this.rechtsgrundlage = rechtsgrundlage;
  }

  /**
   * Verarbeitungszweck.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setVerarbeitungszweck(final String verarbeitungszweck) {
    this.verarbeitungszweck = verarbeitungszweck;
  }

  /**
   * Vorhaltedauer der Protokolle des Nachweisabrufs.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setEvidenceRequestComplianceLogRetentionPeriod(final EvidenceRequestComplianceLogRetentionPeriodV1 evidenceRequestComplianceLogRetentionPeriod) {
    this.evidenceRequestComplianceLogRetentionPeriod = evidenceRequestComplianceLogRetentionPeriod;
  }

  /**
   * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung persönlichen und weiteren Daten im Task.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setConfirmProcessDataUsageConfig(final ConfirmProcessDataUsageConfigV1 confirmProcessDataUsageConfig) {
    this.confirmProcessDataUsageConfig = confirmProcessDataUsageConfig;
  }

  /**
   * Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung des Nachweises im Task.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setConfirmRegisterDataUsageConfig(final ConfirmRegisterDataUsageConfigV1 confirmRegisterDataUsageConfig) {
    this.confirmRegisterDataUsageConfig = confirmRegisterDataUsageConfig;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof RegisterTaskConfigV1)) return false;
    final RegisterTaskConfigV1 other = (RegisterTaskConfigV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$evidenceType = this.getEvidenceType();
    final Object other$evidenceType = other.getEvidenceType();
    if (this$evidenceType == null ? other$evidenceType != null : !this$evidenceType.equals(other$evidenceType)) return false;
    final Object this$componentId = this.getComponentId();
    final Object other$componentId = other.getComponentId();
    if (this$componentId == null ? other$componentId != null : !this$componentId.equals(other$componentId)) return false;
    final Object this$ars = this.getArs();
    final Object other$ars = other.getArs();
    if (this$ars == null ? other$ars != null : !this$ars.equals(other$ars)) return false;
    final Object this$rechtsgrundlage = this.getRechtsgrundlage();
    final Object other$rechtsgrundlage = other.getRechtsgrundlage();
    if (this$rechtsgrundlage == null ? other$rechtsgrundlage != null : !this$rechtsgrundlage.equals(other$rechtsgrundlage)) return false;
    final Object this$verarbeitungszweck = this.getVerarbeitungszweck();
    final Object other$verarbeitungszweck = other.getVerarbeitungszweck();
    if (this$verarbeitungszweck == null ? other$verarbeitungszweck != null : !this$verarbeitungszweck.equals(other$verarbeitungszweck)) return false;
    final Object this$evidenceRequestComplianceLogRetentionPeriod = this.getEvidenceRequestComplianceLogRetentionPeriod();
    final Object other$evidenceRequestComplianceLogRetentionPeriod = other.getEvidenceRequestComplianceLogRetentionPeriod();
    if (this$evidenceRequestComplianceLogRetentionPeriod == null ? other$evidenceRequestComplianceLogRetentionPeriod != null : !this$evidenceRequestComplianceLogRetentionPeriod.equals(other$evidenceRequestComplianceLogRetentionPeriod)) return false;
    final Object this$confirmProcessDataUsageConfig = this.getConfirmProcessDataUsageConfig();
    final Object other$confirmProcessDataUsageConfig = other.getConfirmProcessDataUsageConfig();
    if (this$confirmProcessDataUsageConfig == null ? other$confirmProcessDataUsageConfig != null : !this$confirmProcessDataUsageConfig.equals(other$confirmProcessDataUsageConfig)) return false;
    final Object this$confirmRegisterDataUsageConfig = this.getConfirmRegisterDataUsageConfig();
    final Object other$confirmRegisterDataUsageConfig = other.getConfirmRegisterDataUsageConfig();
    if (this$confirmRegisterDataUsageConfig == null ? other$confirmRegisterDataUsageConfig != null : !this$confirmRegisterDataUsageConfig.equals(other$confirmRegisterDataUsageConfig)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof RegisterTaskConfigV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $evidenceType = this.getEvidenceType();
    result = result * PRIME + ($evidenceType == null ? 43 : $evidenceType.hashCode());
    final Object $componentId = this.getComponentId();
    result = result * PRIME + ($componentId == null ? 43 : $componentId.hashCode());
    final Object $ars = this.getArs();
    result = result * PRIME + ($ars == null ? 43 : $ars.hashCode());
    final Object $rechtsgrundlage = this.getRechtsgrundlage();
    result = result * PRIME + ($rechtsgrundlage == null ? 43 : $rechtsgrundlage.hashCode());
    final Object $verarbeitungszweck = this.getVerarbeitungszweck();
    result = result * PRIME + ($verarbeitungszweck == null ? 43 : $verarbeitungszweck.hashCode());
    final Object $evidenceRequestComplianceLogRetentionPeriod = this.getEvidenceRequestComplianceLogRetentionPeriod();
    result = result * PRIME + ($evidenceRequestComplianceLogRetentionPeriod == null ? 43 : $evidenceRequestComplianceLogRetentionPeriod.hashCode());
    final Object $confirmProcessDataUsageConfig = this.getConfirmProcessDataUsageConfig();
    result = result * PRIME + ($confirmProcessDataUsageConfig == null ? 43 : $confirmProcessDataUsageConfig.hashCode());
    final Object $confirmRegisterDataUsageConfig = this.getConfirmRegisterDataUsageConfig();
    result = result * PRIME + ($confirmRegisterDataUsageConfig == null ? 43 : $confirmRegisterDataUsageConfig.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "RegisterTaskConfigV1(evidenceType=" + this.getEvidenceType() + ", componentId=" + this.getComponentId() + ", ars=" + this.getArs() + ", rechtsgrundlage=" + this.getRechtsgrundlage() + ", verarbeitungszweck=" + this.getVerarbeitungszweck() + ", evidenceRequestComplianceLogRetentionPeriod=" + this.getEvidenceRequestComplianceLogRetentionPeriod() + ", confirmProcessDataUsageConfig=" + this.getConfirmProcessDataUsageConfig() + ", confirmRegisterDataUsageConfig=" + this.getConfirmRegisterDataUsageConfig() + ")";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public RegisterTaskConfigV1() {
  }

  /**
   * Creates a new {@code RegisterTaskConfigV1} instance.
   *
   * @param evidenceType Typ des angeforderten Nachweises.
   * @param componentId ID der IT-Komponente in IAM für Behörden.
   * @param ars Amtlicher Regionalschlüssel zur Bestimmung der Zuständigkeit.
   * @param rechtsgrundlage Rechtsgrundlage.
   * @param verarbeitungszweck Verarbeitungszweck.
   * @param evidenceRequestComplianceLogRetentionPeriod Vorhaltedauer der Protokolle des Nachweisabrufs.
   * @param confirmProcessDataUsageConfig Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung persönlichen und weiteren Daten im Task.
   * @param confirmRegisterDataUsageConfig Objekt mit den Texten der Ansicht zur Bestätigung der Verwendung des Nachweises im Task.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public RegisterTaskConfigV1(final String evidenceType, final String componentId, final String ars, final String rechtsgrundlage, final String verarbeitungszweck, final EvidenceRequestComplianceLogRetentionPeriodV1 evidenceRequestComplianceLogRetentionPeriod, final ConfirmProcessDataUsageConfigV1 confirmProcessDataUsageConfig, final ConfirmRegisterDataUsageConfigV1 confirmRegisterDataUsageConfig) {
    this.evidenceType = evidenceType;
    this.componentId = componentId;
    this.ars = ars;
    this.rechtsgrundlage = rechtsgrundlage;
    this.verarbeitungszweck = verarbeitungszweck;
    this.evidenceRequestComplianceLogRetentionPeriod = evidenceRequestComplianceLogRetentionPeriod;
    this.confirmProcessDataUsageConfig = confirmProcessDataUsageConfig;
    this.confirmRegisterDataUsageConfig = confirmRegisterDataUsageConfig;
  }
}
