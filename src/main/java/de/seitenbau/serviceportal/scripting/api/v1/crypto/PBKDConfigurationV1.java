// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.crypto;

/**
 * Password-Based Key Derivation Konfiguration.
 *
 * @since Release 1.169
 */
public class PBKDConfigurationV1 {
  /**
   * Der Secret-Key-Factory-Algorithmus, der verwendet wird, um einen geheimen Schlüssel aus dem Passwort zu
   * generieren.
   *
   * @see <a href="https://tinyurl.com/standard-names#secretkeyfactory-algorithms">
   * SecretKeyFactory Algorithms</a>
   */
  private String secretKeyFactoryAlgorithm;
  /**
   * Der Secret-Key-Algorithmus, der mit dem angegebenen Schlüsselmaterial assoziiert werden soll.
   *
   * @see <a href="https://tinyurl.com/standard-names">Java Security Standard Algorithm Names</a>
   */
  private String secretKeySpecAlgorithm;
  /**
   * Gibt an, wie oft das Passwort während der Ableitung des symmetrischen Schlüssels gehasht wird.
   */
  private int pbeKeySpecIterationCount;
  /**
   * Die Schlüssellänge in Bits des geheimen Schlüssels, der aus dem Passwort generiert wird.
   * Muss durch 8 teilbar und größer als 0 sein.
   */
  private int pbeKeySpecKeyLengthInBits;


  @SuppressWarnings("all")
  public static class PBKDConfigurationV1Builder {
    @SuppressWarnings("all")
    private String secretKeyFactoryAlgorithm;
    @SuppressWarnings("all")
    private String secretKeySpecAlgorithm;
    @SuppressWarnings("all")
    private int pbeKeySpecIterationCount;
    @SuppressWarnings("all")
    private int pbeKeySpecKeyLengthInBits;

    @SuppressWarnings("all")
    PBKDConfigurationV1Builder() {
    }

    /**
     * Der Secret-Key-Factory-Algorithmus, der verwendet wird, um einen geheimen Schlüssel aus dem Passwort zu
     * generieren.
     *
     * @see <a href="https://tinyurl.com/standard-names#secretkeyfactory-algorithms">
     * SecretKeyFactory Algorithms</a>
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public PBKDConfigurationV1.PBKDConfigurationV1Builder secretKeyFactoryAlgorithm(final String secretKeyFactoryAlgorithm) {
      this.secretKeyFactoryAlgorithm = secretKeyFactoryAlgorithm;
      return this;
    }

    /**
     * Der Secret-Key-Algorithmus, der mit dem angegebenen Schlüsselmaterial assoziiert werden soll.
     *
     * @see <a href="https://tinyurl.com/standard-names">Java Security Standard Algorithm Names</a>
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public PBKDConfigurationV1.PBKDConfigurationV1Builder secretKeySpecAlgorithm(final String secretKeySpecAlgorithm) {
      this.secretKeySpecAlgorithm = secretKeySpecAlgorithm;
      return this;
    }

    /**
     * Gibt an, wie oft das Passwort während der Ableitung des symmetrischen Schlüssels gehasht wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public PBKDConfigurationV1.PBKDConfigurationV1Builder pbeKeySpecIterationCount(final int pbeKeySpecIterationCount) {
      this.pbeKeySpecIterationCount = pbeKeySpecIterationCount;
      return this;
    }

    /**
     * Die Schlüssellänge in Bits des geheimen Schlüssels, der aus dem Passwort generiert wird.
     * Muss durch 8 teilbar und größer als 0 sein.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public PBKDConfigurationV1.PBKDConfigurationV1Builder pbeKeySpecKeyLengthInBits(final int pbeKeySpecKeyLengthInBits) {
      this.pbeKeySpecKeyLengthInBits = pbeKeySpecKeyLengthInBits;
      return this;
    }

    @SuppressWarnings("all")
    public PBKDConfigurationV1 build() {
      return new PBKDConfigurationV1(this.secretKeyFactoryAlgorithm, this.secretKeySpecAlgorithm, this.pbeKeySpecIterationCount, this.pbeKeySpecKeyLengthInBits);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "PBKDConfigurationV1.PBKDConfigurationV1Builder(secretKeyFactoryAlgorithm=" + this.secretKeyFactoryAlgorithm + ", secretKeySpecAlgorithm=" + this.secretKeySpecAlgorithm + ", pbeKeySpecIterationCount=" + this.pbeKeySpecIterationCount + ", pbeKeySpecKeyLengthInBits=" + this.pbeKeySpecKeyLengthInBits + ")";
    }
  }

  @SuppressWarnings("all")
  public static PBKDConfigurationV1.PBKDConfigurationV1Builder builder() {
    return new PBKDConfigurationV1.PBKDConfigurationV1Builder();
  }

  /**
   * Der Secret-Key-Factory-Algorithmus, der verwendet wird, um einen geheimen Schlüssel aus dem Passwort zu
   * generieren.
   *
   * @see <a href="https://tinyurl.com/standard-names#secretkeyfactory-algorithms">
   * SecretKeyFactory Algorithms</a>
   */
  @SuppressWarnings("all")
  public String getSecretKeyFactoryAlgorithm() {
    return this.secretKeyFactoryAlgorithm;
  }

  /**
   * Der Secret-Key-Algorithmus, der mit dem angegebenen Schlüsselmaterial assoziiert werden soll.
   *
   * @see <a href="https://tinyurl.com/standard-names">Java Security Standard Algorithm Names</a>
   */
  @SuppressWarnings("all")
  public String getSecretKeySpecAlgorithm() {
    return this.secretKeySpecAlgorithm;
  }

  /**
   * Gibt an, wie oft das Passwort während der Ableitung des symmetrischen Schlüssels gehasht wird.
   */
  @SuppressWarnings("all")
  public int getPbeKeySpecIterationCount() {
    return this.pbeKeySpecIterationCount;
  }

  /**
   * Die Schlüssellänge in Bits des geheimen Schlüssels, der aus dem Passwort generiert wird.
   * Muss durch 8 teilbar und größer als 0 sein.
   */
  @SuppressWarnings("all")
  public int getPbeKeySpecKeyLengthInBits() {
    return this.pbeKeySpecKeyLengthInBits;
  }

  /**
   * Der Secret-Key-Factory-Algorithmus, der verwendet wird, um einen geheimen Schlüssel aus dem Passwort zu
   * generieren.
   *
   * @see <a href="https://tinyurl.com/standard-names#secretkeyfactory-algorithms">
   * SecretKeyFactory Algorithms</a>
   */
  @SuppressWarnings("all")
  public void setSecretKeyFactoryAlgorithm(final String secretKeyFactoryAlgorithm) {
    this.secretKeyFactoryAlgorithm = secretKeyFactoryAlgorithm;
  }

  /**
   * Der Secret-Key-Algorithmus, der mit dem angegebenen Schlüsselmaterial assoziiert werden soll.
   *
   * @see <a href="https://tinyurl.com/standard-names">Java Security Standard Algorithm Names</a>
   */
  @SuppressWarnings("all")
  public void setSecretKeySpecAlgorithm(final String secretKeySpecAlgorithm) {
    this.secretKeySpecAlgorithm = secretKeySpecAlgorithm;
  }

  /**
   * Gibt an, wie oft das Passwort während der Ableitung des symmetrischen Schlüssels gehasht wird.
   */
  @SuppressWarnings("all")
  public void setPbeKeySpecIterationCount(final int pbeKeySpecIterationCount) {
    this.pbeKeySpecIterationCount = pbeKeySpecIterationCount;
  }

  /**
   * Die Schlüssellänge in Bits des geheimen Schlüssels, der aus dem Passwort generiert wird.
   * Muss durch 8 teilbar und größer als 0 sein.
   */
  @SuppressWarnings("all")
  public void setPbeKeySpecKeyLengthInBits(final int pbeKeySpecKeyLengthInBits) {
    this.pbeKeySpecKeyLengthInBits = pbeKeySpecKeyLengthInBits;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof PBKDConfigurationV1)) return false;
    final PBKDConfigurationV1 other = (PBKDConfigurationV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (this.getPbeKeySpecIterationCount() != other.getPbeKeySpecIterationCount()) return false;
    if (this.getPbeKeySpecKeyLengthInBits() != other.getPbeKeySpecKeyLengthInBits()) return false;
    final Object this$secretKeyFactoryAlgorithm = this.getSecretKeyFactoryAlgorithm();
    final Object other$secretKeyFactoryAlgorithm = other.getSecretKeyFactoryAlgorithm();
    if (this$secretKeyFactoryAlgorithm == null ? other$secretKeyFactoryAlgorithm != null : !this$secretKeyFactoryAlgorithm.equals(other$secretKeyFactoryAlgorithm)) return false;
    final Object this$secretKeySpecAlgorithm = this.getSecretKeySpecAlgorithm();
    final Object other$secretKeySpecAlgorithm = other.getSecretKeySpecAlgorithm();
    if (this$secretKeySpecAlgorithm == null ? other$secretKeySpecAlgorithm != null : !this$secretKeySpecAlgorithm.equals(other$secretKeySpecAlgorithm)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof PBKDConfigurationV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + this.getPbeKeySpecIterationCount();
    result = result * PRIME + this.getPbeKeySpecKeyLengthInBits();
    final Object $secretKeyFactoryAlgorithm = this.getSecretKeyFactoryAlgorithm();
    result = result * PRIME + ($secretKeyFactoryAlgorithm == null ? 43 : $secretKeyFactoryAlgorithm.hashCode());
    final Object $secretKeySpecAlgorithm = this.getSecretKeySpecAlgorithm();
    result = result * PRIME + ($secretKeySpecAlgorithm == null ? 43 : $secretKeySpecAlgorithm.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "PBKDConfigurationV1(secretKeyFactoryAlgorithm=" + this.getSecretKeyFactoryAlgorithm() + ", secretKeySpecAlgorithm=" + this.getSecretKeySpecAlgorithm() + ", pbeKeySpecIterationCount=" + this.getPbeKeySpecIterationCount() + ", pbeKeySpecKeyLengthInBits=" + this.getPbeKeySpecKeyLengthInBits() + ")";
  }

  @SuppressWarnings("all")
  public PBKDConfigurationV1() {
  }

  @SuppressWarnings("all")
  public PBKDConfigurationV1(final String secretKeyFactoryAlgorithm, final String secretKeySpecAlgorithm, final int pbeKeySpecIterationCount, final int pbeKeySpecKeyLengthInBits) {
    this.secretKeyFactoryAlgorithm = secretKeyFactoryAlgorithm;
    this.secretKeySpecAlgorithm = secretKeySpecAlgorithm;
    this.pbeKeySpecIterationCount = pbeKeySpecIterationCount;
    this.pbeKeySpecKeyLengthInBits = pbeKeySpecKeyLengthInBits;
  }
}
