// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.button;

/**
 * Custom-Button am Formular.
 */
public class CustomButtonV1 {
  /**
   * Angezeigter Text im Button.
   */
  private String label;
  /**
   * Wert des Buttons. Dieser Wert wird, wenn der Button geklickt wird, in die verknüpfte
   * Prozessinstanzvariable geschrieben.
   */
  private String value;
  /**
   * Text für den Tooltip, der beim Mouseover über den Button angezeigt wird.
   */
  private String helptext;
  /**
   * {@code true}, wenn der Button hervorgehoben dargestellt werden soll. Sonst {@code false} oder
   * {@code null}. Default ist {@code null}.
   */
  private Boolean primary;
  /**
   * {@code true}, wenn der Button zum Submit gedrückt wurde. Sonst {@code false}.
   */
  private boolean wasPressed;
  /**
   * {@code true}, wenn beim Submit die Validierung der Eingaben des Formulars unterdrückt werden soll. Sonst
   * {@code false}.
   */
  private boolean skipValidation;


  @SuppressWarnings("all")
  public static class CustomButtonV1Builder {
    @SuppressWarnings("all")
    private String label;
    @SuppressWarnings("all")
    private String value;
    @SuppressWarnings("all")
    private String helptext;
    @SuppressWarnings("all")
    private Boolean primary;
    @SuppressWarnings("all")
    private boolean wasPressed;
    @SuppressWarnings("all")
    private boolean skipValidation;

    @SuppressWarnings("all")
    CustomButtonV1Builder() {
    }

    /**
     * Angezeigter Text im Button.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonV1.CustomButtonV1Builder label(final String label) {
      this.label = label;
      return this;
    }

    /**
     * Wert des Buttons. Dieser Wert wird, wenn der Button geklickt wird, in die verknüpfte
     * Prozessinstanzvariable geschrieben.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonV1.CustomButtonV1Builder value(final String value) {
      this.value = value;
      return this;
    }

    /**
     * Text für den Tooltip, der beim Mouseover über den Button angezeigt wird.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonV1.CustomButtonV1Builder helptext(final String helptext) {
      this.helptext = helptext;
      return this;
    }

    /**
     * {@code true}, wenn der Button hervorgehoben dargestellt werden soll. Sonst {@code false} oder
     * {@code null}. Default ist {@code null}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonV1.CustomButtonV1Builder primary(final Boolean primary) {
      this.primary = primary;
      return this;
    }

    /**
     * {@code true}, wenn der Button zum Submit gedrückt wurde. Sonst {@code false}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonV1.CustomButtonV1Builder wasPressed(final boolean wasPressed) {
      this.wasPressed = wasPressed;
      return this;
    }

    /**
     * {@code true}, wenn beim Submit die Validierung der Eingaben des Formulars unterdrückt werden soll. Sonst
     * {@code false}.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public CustomButtonV1.CustomButtonV1Builder skipValidation(final boolean skipValidation) {
      this.skipValidation = skipValidation;
      return this;
    }

    @SuppressWarnings("all")
    public CustomButtonV1 build() {
      return new CustomButtonV1(this.label, this.value, this.helptext, this.primary, this.wasPressed, this.skipValidation);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "CustomButtonV1.CustomButtonV1Builder(label=" + this.label + ", value=" + this.value + ", helptext=" + this.helptext + ", primary=" + this.primary + ", wasPressed=" + this.wasPressed + ", skipValidation=" + this.skipValidation + ")";
    }
  }

  @SuppressWarnings("all")
  public static CustomButtonV1.CustomButtonV1Builder builder() {
    return new CustomButtonV1.CustomButtonV1Builder();
  }

  /**
   * Angezeigter Text im Button.
   */
  @SuppressWarnings("all")
  public String getLabel() {
    return this.label;
  }

  /**
   * Wert des Buttons. Dieser Wert wird, wenn der Button geklickt wird, in die verknüpfte
   * Prozessinstanzvariable geschrieben.
   */
  @SuppressWarnings("all")
  public String getValue() {
    return this.value;
  }

  /**
   * Text für den Tooltip, der beim Mouseover über den Button angezeigt wird.
   */
  @SuppressWarnings("all")
  public String getHelptext() {
    return this.helptext;
  }

  /**
   * {@code true}, wenn der Button hervorgehoben dargestellt werden soll. Sonst {@code false} oder
   * {@code null}. Default ist {@code null}.
   */
  @SuppressWarnings("all")
  public Boolean getPrimary() {
    return this.primary;
  }

  /**
   * {@code true}, wenn der Button zum Submit gedrückt wurde. Sonst {@code false}.
   */
  @SuppressWarnings("all")
  public boolean isWasPressed() {
    return this.wasPressed;
  }

  /**
   * {@code true}, wenn beim Submit die Validierung der Eingaben des Formulars unterdrückt werden soll. Sonst
   * {@code false}.
   */
  @SuppressWarnings("all")
  public boolean isSkipValidation() {
    return this.skipValidation;
  }

  /**
   * Angezeigter Text im Button.
   */
  @SuppressWarnings("all")
  public void setLabel(final String label) {
    this.label = label;
  }

  /**
   * Wert des Buttons. Dieser Wert wird, wenn der Button geklickt wird, in die verknüpfte
   * Prozessinstanzvariable geschrieben.
   */
  @SuppressWarnings("all")
  public void setValue(final String value) {
    this.value = value;
  }

  /**
   * Text für den Tooltip, der beim Mouseover über den Button angezeigt wird.
   */
  @SuppressWarnings("all")
  public void setHelptext(final String helptext) {
    this.helptext = helptext;
  }

  /**
   * {@code true}, wenn der Button hervorgehoben dargestellt werden soll. Sonst {@code false} oder
   * {@code null}. Default ist {@code null}.
   */
  @SuppressWarnings("all")
  public void setPrimary(final Boolean primary) {
    this.primary = primary;
  }

  /**
   * {@code true}, wenn der Button zum Submit gedrückt wurde. Sonst {@code false}.
   */
  @SuppressWarnings("all")
  public void setWasPressed(final boolean wasPressed) {
    this.wasPressed = wasPressed;
  }

  /**
   * {@code true}, wenn beim Submit die Validierung der Eingaben des Formulars unterdrückt werden soll. Sonst
   * {@code false}.
   */
  @SuppressWarnings("all")
  public void setSkipValidation(final boolean skipValidation) {
    this.skipValidation = skipValidation;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof CustomButtonV1)) return false;
    final CustomButtonV1 other = (CustomButtonV1) o;
    if (!other.canEqual((Object) this)) return false;
    if (this.isWasPressed() != other.isWasPressed()) return false;
    if (this.isSkipValidation() != other.isSkipValidation()) return false;
    final Object this$primary = this.getPrimary();
    final Object other$primary = other.getPrimary();
    if (this$primary == null ? other$primary != null : !this$primary.equals(other$primary)) return false;
    final Object this$label = this.getLabel();
    final Object other$label = other.getLabel();
    if (this$label == null ? other$label != null : !this$label.equals(other$label)) return false;
    final Object this$value = this.getValue();
    final Object other$value = other.getValue();
    if (this$value == null ? other$value != null : !this$value.equals(other$value)) return false;
    final Object this$helptext = this.getHelptext();
    final Object other$helptext = other.getHelptext();
    if (this$helptext == null ? other$helptext != null : !this$helptext.equals(other$helptext)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof CustomButtonV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    result = result * PRIME + (this.isWasPressed() ? 79 : 97);
    result = result * PRIME + (this.isSkipValidation() ? 79 : 97);
    final Object $primary = this.getPrimary();
    result = result * PRIME + ($primary == null ? 43 : $primary.hashCode());
    final Object $label = this.getLabel();
    result = result * PRIME + ($label == null ? 43 : $label.hashCode());
    final Object $value = this.getValue();
    result = result * PRIME + ($value == null ? 43 : $value.hashCode());
    final Object $helptext = this.getHelptext();
    result = result * PRIME + ($helptext == null ? 43 : $helptext.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "CustomButtonV1(label=" + this.getLabel() + ", value=" + this.getValue() + ", helptext=" + this.getHelptext() + ", primary=" + this.getPrimary() + ", wasPressed=" + this.isWasPressed() + ", skipValidation=" + this.isSkipValidation() + ")";
  }

  @SuppressWarnings("all")
  public CustomButtonV1() {
  }

  @SuppressWarnings("all")
  private CustomButtonV1(final String label, final String value, final String helptext, final Boolean primary, final boolean wasPressed, final boolean skipValidation) {
    this.label = label;
    this.value = value;
    this.helptext = helptext;
    this.primary = primary;
    this.wasPressed = wasPressed;
    this.skipValidation = skipValidation;
  }
}
