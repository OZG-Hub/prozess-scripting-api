// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.validator;

import java.util.Date;

/**
 * Validierungsregel, die prüft, dass die Nutzereingabe in einem Datums- oder Uhrzeit-Feld nicht vor einem
 * definierten Datum bzw. Zeitpunkt liegt.
 */
public class MinDateValueValidatorV1 extends ValidationRuleV1 {
  /**
   * Frühestes erlaubtes Datum.
   */
  private Date minValue;


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class MinDateValueValidatorV1Builder<C extends MinDateValueValidatorV1, B extends MinDateValueValidatorV1.MinDateValueValidatorV1Builder<C, B>> extends ValidationRuleV1.ValidationRuleV1Builder<C, B> {
    @SuppressWarnings("all")
    @lombok.Generated
    private Date minValue;

    /**
     * Frühestes erlaubtes Datum.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    @lombok.Generated
    public B minValue(final Date minValue) {
      this.minValue = minValue;
      return self();
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "MinDateValueValidatorV1.MinDateValueValidatorV1Builder(super=" + super.toString() + ", minValue=" + this.minValue + ")";
    }
  }


  @SuppressWarnings("all")
  @lombok.Generated
  private static final class MinDateValueValidatorV1BuilderImpl extends MinDateValueValidatorV1.MinDateValueValidatorV1Builder<MinDateValueValidatorV1, MinDateValueValidatorV1.MinDateValueValidatorV1BuilderImpl> {
    @SuppressWarnings("all")
    @lombok.Generated
    private MinDateValueValidatorV1BuilderImpl() {
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    protected MinDateValueValidatorV1.MinDateValueValidatorV1BuilderImpl self() {
      return this;
    }

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public MinDateValueValidatorV1 build() {
      return new MinDateValueValidatorV1(this);
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected MinDateValueValidatorV1(final MinDateValueValidatorV1.MinDateValueValidatorV1Builder<?, ?> b) {
    super(b);
    this.minValue = b.minValue;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public static MinDateValueValidatorV1.MinDateValueValidatorV1Builder<?, ?> builder() {
    return new MinDateValueValidatorV1.MinDateValueValidatorV1BuilderImpl();
  }

  /**
   * Frühestes erlaubtes Datum.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public Date getMinValue() {
    return this.minValue;
  }

  /**
   * Frühestes erlaubtes Datum.
   */
  @SuppressWarnings("all")
  @lombok.Generated
  public void setMinValue(final Date minValue) {
    this.minValue = minValue;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "MinDateValueValidatorV1(minValue=" + this.getMinValue() + ")";
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof MinDateValueValidatorV1)) return false;
    final MinDateValueValidatorV1 other = (MinDateValueValidatorV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$minValue = this.getMinValue();
    final Object other$minValue = other.getMinValue();
    if (this$minValue == null ? other$minValue != null : !this$minValue.equals(other$minValue)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof MinDateValueValidatorV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $minValue = this.getMinValue();
    result = result * PRIME + ($minValue == null ? 43 : $minValue.hashCode());
    return result;
  }
}
