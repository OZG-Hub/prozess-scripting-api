// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.config;

import java.util.Set;
import de.seitenbau.serviceportal.scripting.api.v1.form.FieldTypeV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.geomap.GeoMapElementV1;

/**
 * Konfiguration für Karten-Felder ({@link FieldTypeV1#GEO_MAP GEO_MAP}.
 */
public class AdditionalGeoMapConfigV1 implements AdditionalFieldConfigV1 {
  /**
   * Elemente der Kartenanwendung die nicht dargestellt werden sollen. Wenn {@code null} oder leer wird die
   * Kartenanwendung unverändert dem Antragssteller zur Verfügung gestellt.
   */
  private Set<GeoMapElementV1> hideElements;

  @Override
  public AdditionalGeoMapConfigV1 clone() {
    try {
      return (AdditionalGeoMapConfigV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }

  @SuppressWarnings("all")
  AdditionalGeoMapConfigV1(final Set<GeoMapElementV1> hideElements) {
    this.hideElements = hideElements;
  }


  @SuppressWarnings("all")
  public static class AdditionalGeoMapConfigV1Builder {
    @SuppressWarnings("all")
    private Set<GeoMapElementV1> hideElements;

    @SuppressWarnings("all")
    AdditionalGeoMapConfigV1Builder() {
    }

    /**
     * Elemente der Kartenanwendung die nicht dargestellt werden sollen. Wenn {@code null} oder leer wird die
     * Kartenanwendung unverändert dem Antragssteller zur Verfügung gestellt.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public AdditionalGeoMapConfigV1.AdditionalGeoMapConfigV1Builder hideElements(final Set<GeoMapElementV1> hideElements) {
      this.hideElements = hideElements;
      return this;
    }

    @SuppressWarnings("all")
    public AdditionalGeoMapConfigV1 build() {
      return new AdditionalGeoMapConfigV1(this.hideElements);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "AdditionalGeoMapConfigV1.AdditionalGeoMapConfigV1Builder(hideElements=" + this.hideElements + ")";
    }
  }

  @SuppressWarnings("all")
  public static AdditionalGeoMapConfigV1.AdditionalGeoMapConfigV1Builder builder() {
    return new AdditionalGeoMapConfigV1.AdditionalGeoMapConfigV1Builder();
  }

  /**
   * Elemente der Kartenanwendung die nicht dargestellt werden sollen. Wenn {@code null} oder leer wird die
   * Kartenanwendung unverändert dem Antragssteller zur Verfügung gestellt.
   */
  @SuppressWarnings("all")
  public Set<GeoMapElementV1> getHideElements() {
    return this.hideElements;
  }

  /**
   * Elemente der Kartenanwendung die nicht dargestellt werden sollen. Wenn {@code null} oder leer wird die
   * Kartenanwendung unverändert dem Antragssteller zur Verfügung gestellt.
   */
  @SuppressWarnings("all")
  public void setHideElements(final Set<GeoMapElementV1> hideElements) {
    this.hideElements = hideElements;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof AdditionalGeoMapConfigV1)) return false;
    final AdditionalGeoMapConfigV1 other = (AdditionalGeoMapConfigV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$hideElements = this.getHideElements();
    final Object other$hideElements = other.getHideElements();
    if (this$hideElements == null ? other$hideElements != null : !this$hideElements.equals(other$hideElements)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof AdditionalGeoMapConfigV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $hideElements = this.getHideElements();
    result = result * PRIME + ($hideElements == null ? 43 : $hideElements.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "AdditionalGeoMapConfigV1(hideElements=" + this.getHideElements() + ")";
  }
}
