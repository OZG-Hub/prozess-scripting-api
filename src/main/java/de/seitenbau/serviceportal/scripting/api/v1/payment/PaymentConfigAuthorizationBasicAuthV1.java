// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.payment;

/**
 * Beinhaltet Daten zur Authorisierung bei Bezahl-Providern f√ºr die Authorisierungsmethode Basic Auth.
 */
public class PaymentConfigAuthorizationBasicAuthV1 implements PaymentConfigAuthorizationV1 {
  private static final long serialVersionUID = 1L;
  /**
   * Typ der Authorisierung.
   */
  private final PaymentConfigAuthorizationTypeV1 type = PaymentConfigAuthorizationTypeV1.BASICAUTH;
  /**
   * Id zur Authenfizierung fuer BasicAuth und OAuth2
   */
  private String clientId;
  /**
   * Geheimnis (Passwort) zur Authenfizierung fuer BasicAuth und OAuth2
   */
  private String clientSecret;


  @SuppressWarnings("all")
  public static class PaymentConfigAuthorizationBasicAuthV1Builder {
    @SuppressWarnings("all")
    private String clientId;
    @SuppressWarnings("all")
    private String clientSecret;

    @SuppressWarnings("all")
    PaymentConfigAuthorizationBasicAuthV1Builder() {
    }

    /**
     * Id zur Authenfizierung fuer BasicAuth und OAuth2
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public PaymentConfigAuthorizationBasicAuthV1.PaymentConfigAuthorizationBasicAuthV1Builder clientId(final String clientId) {
      this.clientId = clientId;
      return this;
    }

    /**
     * Geheimnis (Passwort) zur Authenfizierung fuer BasicAuth und OAuth2
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public PaymentConfigAuthorizationBasicAuthV1.PaymentConfigAuthorizationBasicAuthV1Builder clientSecret(final String clientSecret) {
      this.clientSecret = clientSecret;
      return this;
    }

    @SuppressWarnings("all")
    public PaymentConfigAuthorizationBasicAuthV1 build() {
      return new PaymentConfigAuthorizationBasicAuthV1(this.clientId, this.clientSecret);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "PaymentConfigAuthorizationBasicAuthV1.PaymentConfigAuthorizationBasicAuthV1Builder(clientId=" + this.clientId + ", clientSecret=" + this.clientSecret + ")";
    }
  }

  @SuppressWarnings("all")
  public static PaymentConfigAuthorizationBasicAuthV1.PaymentConfigAuthorizationBasicAuthV1Builder builder() {
    return new PaymentConfigAuthorizationBasicAuthV1.PaymentConfigAuthorizationBasicAuthV1Builder();
  }

  /**
   * Typ der Authorisierung.
   */
  @SuppressWarnings("all")
  public PaymentConfigAuthorizationTypeV1 getType() {
    return this.type;
  }

  /**
   * Id zur Authenfizierung fuer BasicAuth und OAuth2
   */
  @SuppressWarnings("all")
  public String getClientId() {
    return this.clientId;
  }

  /**
   * Geheimnis (Passwort) zur Authenfizierung fuer BasicAuth und OAuth2
   */
  @SuppressWarnings("all")
  public String getClientSecret() {
    return this.clientSecret;
  }

  /**
   * Id zur Authenfizierung fuer BasicAuth und OAuth2
   */
  @SuppressWarnings("all")
  public void setClientId(final String clientId) {
    this.clientId = clientId;
  }

  /**
   * Geheimnis (Passwort) zur Authenfizierung fuer BasicAuth und OAuth2
   */
  @SuppressWarnings("all")
  public void setClientSecret(final String clientSecret) {
    this.clientSecret = clientSecret;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof PaymentConfigAuthorizationBasicAuthV1)) return false;
    final PaymentConfigAuthorizationBasicAuthV1 other = (PaymentConfigAuthorizationBasicAuthV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$type = this.getType();
    final Object other$type = other.getType();
    if (this$type == null ? other$type != null : !this$type.equals(other$type)) return false;
    final Object this$clientId = this.getClientId();
    final Object other$clientId = other.getClientId();
    if (this$clientId == null ? other$clientId != null : !this$clientId.equals(other$clientId)) return false;
    final Object this$clientSecret = this.getClientSecret();
    final Object other$clientSecret = other.getClientSecret();
    if (this$clientSecret == null ? other$clientSecret != null : !this$clientSecret.equals(other$clientSecret)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof PaymentConfigAuthorizationBasicAuthV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $type = this.getType();
    result = result * PRIME + ($type == null ? 43 : $type.hashCode());
    final Object $clientId = this.getClientId();
    result = result * PRIME + ($clientId == null ? 43 : $clientId.hashCode());
    final Object $clientSecret = this.getClientSecret();
    result = result * PRIME + ($clientSecret == null ? 43 : $clientSecret.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "PaymentConfigAuthorizationBasicAuthV1(type=" + this.getType() + ", clientId=" + this.getClientId() + ", clientSecret=" + this.getClientSecret() + ")";
  }

  @SuppressWarnings("all")
  public PaymentConfigAuthorizationBasicAuthV1() {
  }

  @SuppressWarnings("all")
  public PaymentConfigAuthorizationBasicAuthV1(final String clientId, final String clientSecret) {
    this.clientId = clientId;
    this.clientSecret = clientSecret;
  }
}
