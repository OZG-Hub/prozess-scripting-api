// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.content;

import javax.validation.constraints.NotNull;

/**
 * Einzelner ersetzter Platzhalter in einem Formular.
 */
public class FormReplacementV1 {

  /**
   * Enum f√ºr den Typ des Wertes, der den Platzhalter ersetzt.
   */
  public enum ReturnType {
    /**
     * Text ({@link java.lang.String}).
     */
    STRING, @Deprecated
    HTML_SANITIZED_STRING, /**
     * 64-Bit Ganzzahl ({@link java.lang.Integer}).
     */
    INTEGER, /**
     * Zahl ({@link java.math.BigDecimal}).
     */
    BIG_DECIMAL, /**
     * Datum ({@link java.util.Date}).
     */
    DATE, /**
     * Liste ({@link java.util.List}).
     */
    LIST, /**
     * Map ({@link java.util.Map}).
     */
    MAP, /**
     * Map ({@link java.lang.Boolean}).
     */
    BOOLEAN;
  }

  /**
   * Platzhalter, der ersetzt wurde.
   */
  @NotNull
  private String template;
  /**
   * Typ des Platzhalters.
   */
  @NotNull
  private ReturnType returnType;

  @SuppressWarnings("all")
  FormReplacementV1(final String template, final ReturnType returnType) {
    this.template = template;
    this.returnType = returnType;
  }


  @SuppressWarnings("all")
  public static class FormReplacementV1Builder {
    @SuppressWarnings("all")
    private String template;
    @SuppressWarnings("all")
    private ReturnType returnType;

    @SuppressWarnings("all")
    FormReplacementV1Builder() {
    }

    /**
     * Platzhalter, der ersetzt wurde.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormReplacementV1.FormReplacementV1Builder template(final String template) {
      this.template = template;
      return this;
    }

    /**
     * Typ des Platzhalters.
     * @return {@code this}.
     */
    @SuppressWarnings("all")
    public FormReplacementV1.FormReplacementV1Builder returnType(final ReturnType returnType) {
      this.returnType = returnType;
      return this;
    }

    @SuppressWarnings("all")
    public FormReplacementV1 build() {
      return new FormReplacementV1(this.template, this.returnType);
    }

    @Override
    @SuppressWarnings("all")
    public String toString() {
      return "FormReplacementV1.FormReplacementV1Builder(template=" + this.template + ", returnType=" + this.returnType + ")";
    }
  }

  @SuppressWarnings("all")
  public static FormReplacementV1.FormReplacementV1Builder builder() {
    return new FormReplacementV1.FormReplacementV1Builder();
  }

  /**
   * Platzhalter, der ersetzt wurde.
   */
  @SuppressWarnings("all")
  public String getTemplate() {
    return this.template;
  }

  /**
   * Typ des Platzhalters.
   */
  @SuppressWarnings("all")
  public ReturnType getReturnType() {
    return this.returnType;
  }

  /**
   * Platzhalter, der ersetzt wurde.
   */
  @SuppressWarnings("all")
  public void setTemplate(final String template) {
    this.template = template;
  }

  /**
   * Typ des Platzhalters.
   */
  @SuppressWarnings("all")
  public void setReturnType(final ReturnType returnType) {
    this.returnType = returnType;
  }

  @Override
  @SuppressWarnings("all")
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof FormReplacementV1)) return false;
    final FormReplacementV1 other = (FormReplacementV1) o;
    if (!other.canEqual((Object) this)) return false;
    final Object this$template = this.getTemplate();
    final Object other$template = other.getTemplate();
    if (this$template == null ? other$template != null : !this$template.equals(other$template)) return false;
    final Object this$returnType = this.getReturnType();
    final Object other$returnType = other.getReturnType();
    if (this$returnType == null ? other$returnType != null : !this$returnType.equals(other$returnType)) return false;
    return true;
  }

  @SuppressWarnings("all")
  protected boolean canEqual(final Object other) {
    return other instanceof FormReplacementV1;
  }

  @Override
  @SuppressWarnings("all")
  public int hashCode() {
    final int PRIME = 59;
    int result = 1;
    final Object $template = this.getTemplate();
    result = result * PRIME + ($template == null ? 43 : $template.hashCode());
    final Object $returnType = this.getReturnType();
    result = result * PRIME + ($returnType == null ? 43 : $returnType.hashCode());
    return result;
  }

  @Override
  @SuppressWarnings("all")
  public String toString() {
    return "FormReplacementV1(template=" + this.getTemplate() + ", returnType=" + this.getReturnType() + ")";
  }
}
