// Generated by delombok
package de.seitenbau.serviceportal.scripting.api.v1.form.condition;

import java.util.stream.Stream;
import de.seitenbau.serviceportal.scripting.api.v1.form.FieldGroupInstanceV1;
import de.seitenbau.serviceportal.scripting.api.v1.form.FormV1;

/**
 * Abstrakte Elternklasse für alle Sichtbarkeitsbedingungen.
 */
public abstract class DisplayConditionV1 implements Cloneable {
  /**
   * Prüft, ob die Sichtbarkeitsbedingung in der gegebenen Gruppeninstanz im gegebenen Formular erfüllt
   * ist. Wenn die Sichtbarkeitsbedingung erfüllt ist, ist das Feld oder die Gruppe, an der die
   * Sichtbarkeitsbedingung hängt, sichtbar, sonst unsichtbar.
   *
   * @param instance Feldgruppen-Instanz, in der sich das Feld befindet, nicht {@code null}.
   * @param form das Formular, innerhalb dessen die Sichtbarkeitsbedingung geprüft werden soll, nicht
   * {@code null}.
   *
   * @return {@code true}, wenn die Sichtbarkeitsbedingung erfüllt ist, sonst {@code false}
   */
  public abstract boolean isShown(FieldGroupInstanceV1 instance, FormV1 form);

  @Override
  public DisplayConditionV1 clone() {
    try {
      return (DisplayConditionV1) super.clone();
    } catch (CloneNotSupportedException e) {
      throw new RuntimeException(e);
    }
  }

  /**
   * Gibt alle enthaltenen {@link FieldDisplayConditionV1}-Sichtbarkeitsbedingungen zurück.
   * Bei komplexen Sichtbarkeitsbedingungen werden die darin enthaltenen Sichtbarkeitsbedingungen
   * durchgegangen und rekursiv alle enthaltenen {@link FieldDisplayConditionV1}-Sichtbarkeitsbedingungen
   * in den zurückgegebenen Stream aufgenommen.
   *
   * @param condition die Sichtbarkeitsbedingung,
   * deren {@link FieldDisplayConditionV1}-Sichtbarkeitsbedingungen
   * extrahiert werden soll.
   *
   * @return einen Stream mit den enthaltenen {@link FieldDisplayConditionV1}-Sichtbarkeitsbedingungen,
   * niemals {@code null}.
   */
  public static Stream<FieldDisplayConditionV1> identifyFieldDisplayConditions(DisplayConditionV1 condition) {
    if (condition instanceof FieldDisplayConditionV1) {
      return Stream.of((FieldDisplayConditionV1) condition);
    }
    if (condition instanceof AggregatorDisplayConditionV1) {
      return ((AggregatorDisplayConditionV1) condition).getConditions().stream().flatMap(DisplayConditionV1::identifyFieldDisplayConditions);
    }
    return Stream.of();
  }


  @SuppressWarnings("all")
  @lombok.Generated
  public static abstract class DisplayConditionV1Builder<C extends DisplayConditionV1, B extends DisplayConditionV1.DisplayConditionV1Builder<C, B>> {
    @SuppressWarnings("all")
    @lombok.Generated
    protected abstract B self();

    @SuppressWarnings("all")
    @lombok.Generated
    public abstract C build();

    @Override
    @SuppressWarnings("all")
    @lombok.Generated
    public String toString() {
      return "DisplayConditionV1.DisplayConditionV1Builder()";
    }
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected DisplayConditionV1(final DisplayConditionV1.DisplayConditionV1Builder<?, ?> b) {
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public boolean equals(final Object o) {
    if (o == this) return true;
    if (!(o instanceof DisplayConditionV1)) return false;
    final DisplayConditionV1 other = (DisplayConditionV1) o;
    if (!other.canEqual((Object) this)) return false;
    return true;
  }

  @SuppressWarnings("all")
  @lombok.Generated
  protected boolean canEqual(final Object other) {
    return other instanceof DisplayConditionV1;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public int hashCode() {
    final int result = 1;
    return result;
  }

  @Override
  @SuppressWarnings("all")
  @lombok.Generated
  public String toString() {
    return "DisplayConditionV1()";
  }

  @SuppressWarnings("all")
  @lombok.Generated
  public DisplayConditionV1() {
  }
}
